
import langc;

extension langc::debug;
extension langc::element;

private Void addNotNullTo( Void value, Collection[Object] list ) : null;
private Void addNotNullTo( Object value, Collection[Object] list ) : list.add( value );
private Void addNotNullTo( Collection[Object] values, Collection[Object] list ) :
    values.collect( e | e.addNotNullTo( list ) )
;

create Set[FolderName] publicFolders( LinkableArtifact artifact ) :
    artifact.rootElements.publicFolder().addNotNullTo( this )
;

private cached FolderName publicFolder( Void nothing ) : null;
private cached FolderName publicFolder( Name name ) : name.parent.publicFolder();
private cached FolderName publicFolder( FileName filename ) : filename.parent;
private cached FolderName publicFolder( UserElement element ) : null;
private cached FolderName publicFolder( NamedElement element ) : element.name.publicFolder();

create List[UserElement] objectsIn( UserElement element, LinkableArtifact artifact ) : this;

/* This default rule handles elements that may not be fully populated. */
create List[UserElement] objectsIn( Void void, LinkableArtifact artifact ) : this;

/* Structs, unions, enums, and typedefs have no required objects. */
create List[UserElement] objectsIn( Structure structure, LinkableArtifact artifact ) : this;
create List[UserElement] objectsIn( Enum enum, LinkableArtifact artifact ) : this;
create List[UserElement] objectsIn( Typedef typedef, LinkableArtifact artifact ) : this;

/* Variable's require whatever objects are used in the initializer. */
create List[UserElement] objectsIn( VariableDeclaration var, LinkableArtifact artifact ) :
    var.initializer.objectsIn( artifact ).addNotNullTo( this )
;

/* In addition to the objects required in the body, the implementation needs to add
 * itself so that its containing file will be linked into the artifact. */
create List[UserElement] objectsIn( FunctionImplementation impl, LinkableArtifact artifact ) :
    impl.addNotNullTo( this )
 -> impl.body.objectsIn( artifact ).addNotNullTo( this )
;

/* The function implementation may require symbols, but the function itself
 * does not.  The implementation (default or specific for the artifact) will
 * add the object for itself. */
create List[UserElement] objectsIn( Function function, LinkableArtifact artifact ) :
    function.implementationFor( artifact ).objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( Statement stmt, LinkableArtifact artifact ) : this;

private create List[UserElement] objectsIn( CodeBlock block, LinkableArtifact artifact ) :
    block.statements.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( VariableDeclarationStatement stmt, LinkableArtifact artifact ) :
    stmt.variable.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( SwitchStatement stmt, LinkableArtifact artifact ) :
    stmt.condition.objectsIn( artifact ).addNotNullTo( this )
 -> stmt.clauses.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( ConditionalStatement stmt, LinkableArtifact artifact ) :
    stmt.condition.objectsIn( artifact ).addNotNullTo( this )
 -> stmt.statements.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( WhileStatement stmt, LinkableArtifact artifact ) :
    stmt.condition.objectsIn( artifact ).addNotNullTo( this )
 -> stmt.statements.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( ExpressionStatement expr, LinkableArtifact artifact ) :
    expr.expr.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( Expression expr, LinkableArtifact artifact ) : this;

private create List[UserElement] objectsIn( IndexExpr expr, LinkableArtifact artifact ) :
    expr.array.objectsIn( artifact ).addNotNullTo( this )
 -> expr.index.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( BinaryOperation expr, LinkableArtifact artifact ) :
    expr.lhs.objectsIn( artifact ).addNotNullTo( this )
 -> expr.rhs.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( LogicalComparison expr, LinkableArtifact artifact ) :
    expr.lhs.objectsIn( artifact ).addNotNullTo( this )
 -> expr.rhs.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( CastExpr expr, LinkableArtifact artifact ) :
    expr.expr.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( MemberAccess expr, LinkableArtifact artifact ) :
    expr.container.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( FunctionCall expr, LinkableArtifact artifact ) :
    expr.function.objectsIn( artifact ).addNotNullTo( this )
 -> expr.arguments.objectsIn( artifact ).addNotNullTo( this )
;

/* TODO Figure out if an extern function (one that does not have an implementation in the
 *      translation unit) has an address. */
private create List[UserElement] objectsIn( FunctionAddress expr, LinkableArtifact artifact ) :
    expr.function.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( AddressOfExpr expr, LinkableArtifact artifact ) :
    expr.expr.objectsIn( artifact ).addNotNullTo( this )
;

private create List[UserElement] objectsIn( DereferenceExpr expr, LinkableArtifact artifact ) :
    expr.expr.objectsIn( artifact ).addNotNullTo( this )
;

/* Sizeof is evaluated at compile-time, so there are no required objects. */
private create List[UserElement] objectsIn( Sizeof expr, LinkableArtifact artifact ) : this;
