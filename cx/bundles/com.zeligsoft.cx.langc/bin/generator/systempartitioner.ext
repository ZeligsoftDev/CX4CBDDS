import langc;

extension langc::debug;
extension langc::element;
extension generator::extend_util;
extension generator::filepartitioner;
extension generator::objects;

Collection[Name] transitiveClosure( SubSystem subsystem ) :
    let files = {}.toSet() :
        subsystem.files.resolve( files )
     -> files
;

private Collection[Name] resolve( Void none, Collection[Name] files ) :
    files
;

private Collection[Name] resolve( ElementList elementList, Collection[Name] files ) :
    elementList.name.resolve( files )
 -> elementList.elements.resolve( files )
 -> files
;

private Collection[Name] resolve( UserElement element, Collection[Name] files ) :
    files
;

private Collection[Name] resolve( FunctionImplementation impl, Collection[Name] files ) :
    impl.body.resolve( files )
 -> files
;

private Collection[Name] resolve( CodeBlock block, Collection[Name] files ) :
    block.statements.resolve( files )
 -> files
;

private Collection[Name] resolve( Statement stmt, Collection[Name] files ) :
    files
;

private Collection[Name] resolve( ExpressionStatement stmt, Collection[Name] files ) :
    stmt.expr.resolve( files )
 -> files
;

private Collection[Name] resolve( SwitchStatement stmt, Collection[Name] files ) :
    stmt.clauses.resolve( files )
 -> files
;

private Collection[Name] resolve( Expression expr, Collection[Name] files ) :
    files
;

private Collection[Name] resolve( FunctionCall call, Collection[Name] files ) :
    call.function.name.resolve( files )
 -> files
;

private FileName resolve( Name name, Collection[Name] files ) :
    name.parent.resolve( files )
 -> files
;

private FileName resolve( FileName name, Collection[Name] files ) :
    name.hasObjectCode ? files.add( name ) : null
 -> files
;

private FileName resolve( SystemFileName name, Collection[Name] files ) :
    files
;

/******************************************/
/* The implementations must put their dependencies in the result before
 * themselves */

/* TODO: The order gets lost because the lists are converted to a set.  This needs to
 *       be changed so that duplicates are removed without changing the order. */
cached Collection[UserElement] transitiveClosure( LinkableArtifact artifact ) :
    let tc = {}.toSet() :
        tc.addAll( artifact.rootElements.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( Void nothing, LinkableArtifact artifact ) : {};
private cached Collection[UserElement] transitiveClosure( Element element, LinkableArtifact artifact ) : {};

/* In some cases (e.g., Name.transitiveClosure) eContainer must be used. */
private cached Collection[UserElement] transitiveClosure( emf::EObject eobj, LinkableArtifact artifact ) : { };

private cached Collection[UserElement] transitiveClosure( VariableDeclaration var, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( var.element.transitiveClosure( artifact ) )
     -> tc.addAll( var.initializer.transitiveClosure( artifact ) )
     -> var.name.parent == null ? null : tc.add( var )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( Structure structure, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( structure.members.type.transitiveClosure( artifact ) )
     -> tc.add( structure )
     -> tc
;

/* Enums won't have other elements until non-integral initializers (e.g., a Macro)
 * are allowed. */
private cached Collection[UserElement] transitiveClosure( Enum enum, LinkableArtifact artifact ) : { enum };
private cached Collection[UserElement] transitiveClosure( Typedef typedef, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( typedef.element.transitiveClosure( artifact ) )
     -> tc.add( typedef )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( FunctionImplementation impl, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( impl.body.transitiveClosure( artifact ) )
     -> tc.add( impl.function )
     -> tc.add( impl )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( Function function, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( function.returnType.transitiveClosure( artifact ) )
     -> tc.addAll( function.parameters.type.transitiveClosure( artifact ) )
     -> tc.addAll( function.implementationFor( artifact ).transitiveClosure( artifact ) )
     -> tc.add( function )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( ElementReference ref, LinkableArtifact artifact ) :
    ref.element.transitiveClosure( artifact )
;

/* Statements */

private cached Collection[UserElement] transitiveClosure( Statement stmt, LinkableArtifact artifact ) : {};

private cached Collection[UserElement] transitiveClosure( CodeBlock block, LinkableArtifact artifact ) :
    block.statements.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( VariableDeclarationStatement stmt, LinkableArtifact artifact ) :
    stmt.variable.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( SwitchStatement stmt, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( stmt.condition.transitiveClosure( artifact ) )
     -> tc.addAll( stmt.clauses.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( ConditionalStatement stmt, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( stmt.condition.transitiveClosure( artifact ) )
     -> tc.addAll( stmt.statements.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( WhileStatement stmt, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( stmt.condition.transitiveClosure( artifact ) )
     -> tc.addAll( stmt.statements.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( ExpressionStatement expr, LinkableArtifact artifact ) :
    expr.expr.transitiveClosure( artifact )
;

/* Expressions */

private cached Collection[UserElement] transitiveClosure( Expression expr, LinkableArtifact artifact ) : {};

private cached Collection[UserElement] transitiveClosure( IndexExpr expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.array.transitiveClosure( artifact ) )
     -> tc.addAll( expr.index.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( BinaryOperation expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.lhs.transitiveClosure( artifact ) )
     -> tc.addAll( expr.rhs.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( LogicalComparison expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.lhs.transitiveClosure( artifact ) )
     -> tc.addAll( expr.rhs.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( CastExpr expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.targetType.transitiveClosure( artifact ) )
     -> tc.addAll( expr.expr.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( ElementAccess expr, LinkableArtifact artifact ) :
    expr.name.eContainer.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( MemberAccess expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.container.transitiveClosure( artifact ) )
     -> tc.addAll( expr.name.eContainer.transitiveClosure( artifact ) )
     -> tc
;

private cached Collection[UserElement] transitiveClosure( FunctionCall expr, LinkableArtifact artifact ) :
    let tc = {} :
        tc.addAll( expr.function.transitiveClosure( artifact ) )
     -> tc.addAll( expr.arguments.transitiveClosure( artifact ) )
     -> tc
;

/* TODO Figure out if an extern function (one that does not have an implementation in the
 *      translation unit) has an address. */
private cached Collection[UserElement] transitiveClosure( FunctionAddress expr, LinkableArtifact artifact ) :
    expr.function.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( AddressOfExpr expr, LinkableArtifact artifact ) :
    expr.expr.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( DereferenceExpr expr, LinkableArtifact artifact ) :
    expr.expr.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( SizeofType expr, LinkableArtifact artifact ) :
    expr.type.transitiveClosure( artifact )
;

private cached Collection[UserElement] transitiveClosure( SizeofExpr expr, LinkableArtifact artifact ) :
    expr.expr.transitiveClosure( artifact )
;
