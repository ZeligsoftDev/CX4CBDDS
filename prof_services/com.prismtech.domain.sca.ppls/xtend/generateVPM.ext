import uml;
import vpm;
import SCA::SCA_Property;
import SCA::SCA_ComponentModel;
import SCA::SCA_SoftwarePackage;
import SCA::SCA_Core;
import SCA::SCA_PlatformModel;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

// Visit the variation point model's elements to find owned rules/constraints of the VariationPoint and create Variation Points to be added to the variation point model  

Void visit(SCANode node, vpm::VPModel vpModel):
	getConstraints(node).typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	node.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	node.part.definition.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	node.part.definition.interface.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	node.part.definition.getImplementation().zdlAsArtifact().owner.zdlAsNamespace().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel)->
	node.part.definition.getImplementation().zdlAsArtifact().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel);

Void visit(SCAApplication app, vpm::VPModel vpModel):
	getConstraints(app).typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	app.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	app.part.definition.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	app.part.definition.interface.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	app.part.definition.getImplementation().zdlAsArtifact().owner.zdlAsNamespace().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	app.part.definition.getImplementation().zdlAsArtifact().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel);

Void visit(SCAPlatform pf, vpm::VPModel vpModel):
	pf.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	pf.part.definition.typeSelect(SCANode).visit(vpModel) ->
	pf.part.definition.typeSelect(SCADomainManager).visit(pf, vpModel);
	
Void visit(SCADomainManager dm, SCAPlatform pf, vpm::VPModel vpModel):
	dm.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	dm.interface.zdlAsComponent().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	dm.getImplementation().zdlAsArtifact().owner.zdlAsNamespace().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel) ->
	dm.getImplementation().zdlAsArtifact().ownedRule.typeSelect(VariationPoint).createVariationPoint(vpModel);
	
Void visit(uml::Model model, vpm::VPModel vpModel):
	model.zdlAsModel().packagedElement.typeSelect(SCAAssembly).visit(vpModel) ->
	model.zdlAsModel().packagedElement.typeSelect(SCAPlatform).visit(vpModel) ->
	model.zdlAsModel().nestedPackage.visit(vpModel);
	
Void visit(uml::Package pkg, vpm::VPModel vpModel):
	pkg.zdlAsPackage().packagedElement.visit(vpModel) ->
	pkg.zdlAsPackage().nestedPackage.visit(vpModel);

Void visit(emf::EObject obj, vpm::VPModel vpModel) :
	{};

// Create a VPModel from selected element
create vpm::VPModel mainTransform(SCANode node) :
	this.setName(node.name) ->
	this.setSource(node.getSource()) ->
	this.setQualifiedName(node.zdlAsNamedElement().qualifiedName)->
	node.visit(this);

create vpm::VPModel mainTransform(SCAApplication app) :
	this.setName(app.name) ->
	this.setSource(app.getSource()) ->
	this.setQualifiedName(app.zdlAsNamedElement().qualifiedName)-> 
	app.visit(this);

create vpm::VPModel mainTransform(SCAPlatform pf) :
	this.setName(pf.name) ->
	this.setSource(pf.getSource()) ->
	this.setQualifiedName(pf.zdlAsNamedElement().qualifiedName)-> 
	pf.visit(this);

create vpm::VPModel mainTransform(uml::Model model) :
	this.setName(model.name) ->
	this.setSource(model.getSource()) ->
	this.setQualifiedName(model.zdlAsNamedElement().qualifiedName)->
	model.visit(this);

create vpm::VPModel mainTransform(Object object) : {};

	
//String getBodyString(VariationPoint constraint ) :
//	constraint.zdlAsConstraint().specification.zdlAsOpaqueExpression().body.get(0);

String getSource(Element e) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.getSource(
		org.eclipse.uml2.uml.Element);

Void getImplementation(SCASoftwarePackage component ) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.getImplementation(
		org.eclipse.uml2.uml.Component);
		
Void getAttributesFromElement(Element e) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.getAttributesFromElement(
		org.eclipse.uml2.uml.Element);
		
Void getIDfromVariationPoint(Constraint c) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.getIDfromVariationPoint(
		org.eclipse.uml2.uml.Constraint);

Void getConstraints(Element e) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.getConstraints(
		org.eclipse.uml2.uml.Element);

// Create variation points from selected elements	
Void createVariationPoint(VariationPoint constraint, vpm::VPModel vpModel) :
	/* Make sure that the Variation Point is constraining elements, otherwise, don't create that Variation Point in the resulting VPModel*/
	if( constraint.zdlAsConstraint().constrainedElement.size != null && constraint.zdlAsConstraint().constrainedElement.size > 0 ) then
	createVariationPoint(constraint.zdlAsNamedElement().name, getIDfromVariationPoint(constraint), constraint.zdlAsConstraint().constrainedElement.get(0), constraint.zdlAsConstraint().constrainedElement, vpModel)
	;

//TODO: compact these four into one somehow
Void createVariationPoint(String name, String id, SCAComponentPart part, List constrainedElements, vpm::VPModel vpModel) :
	createVariationPoint(part, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, SCANodePart part, List constrainedElements, vpm::VPModel vpModel):
	createVariationPoint(part, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, SCAAssembly assembly, List constrainedElements, vpm::VPModel vpModel ) :
	createVariationPointWithSettings(assembly, name, id, constrainedElements, vpModel);
	
Void createVariationPoint(String name, String id, SCAPort port, List constrainedElements, vpm::VPModel vpModel) :
	createVariationPoint(port, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, SCAPlatformElementPart part, List constrainedElements, vpm::VPModel vpModel):
	createVariationPointWithSettings(part, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, SCAProperty property, List constrainedElements, vpm::VPModel vpModel) :
	createVariationPointWithValue(property, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, PropertyProvider provider, List constrainedElements, vpm::VPModel vpModel):
	createVariationPointWithSettings(provider, name, id, constrainedElements, vpModel);

Void createVariationPoint(String name, String id, SCAFreeStandingPort fsp, List constrainedElements, vpm::VPModel vpModel):
	createVariationPointWithSettings(fsp, name, id, constrainedElements, vpModel);
	
Void createVariationPoint(String name, String id, SCAConnector connector, List constrainedElements, vpm::VPModel vpModel):
	createVariationPoint(connector, name, id, constrainedElements, vpModel);
	
Void createVariationPoint(String name, String id, SCADependency depencency, List constrainedElements, vpm::VPModel vpModel):
	createVariationPoint(depencency, name, id, constrainedElements, vpModel);	

create vpm::VariationPoint createVariationPoint(NamedElement element, String name, String id, List constrainedElements, vpm::VPModel vpModel) :
	this.setName(name) ->
	this.setId(id) ->
	constrainedElements.collect(e|this.createConstrainedElement(e))->
	vpModel.variationPoints.add(this);

create vpm::VariationPointWithValue createVariationPointWithValue(NamedElement element, String name, String id, List constrainedElements, vpm::VPModel vpModel) :
	this.setName(name) ->
	this.setId(id) ->
	constrainedElements.collect(e|this.createConstrainedElement(e))->
	vpModel.variationPoints.add(this);

create vpm::VariationPointWithSettings createVariationPointWithSettings(NamedElement element, String name, String id, List constrainedElements, vpm::VPModel vpModel):
	this.setName(name) ->
	this.setId(id) ->
	constrainedElements.collect(e|this.createConstrainedElementWithAttributes(e))->
	vpModel.variationPoints.add(this);

create vpm::Attribute createAttribute(vpm::ConstrainedElement ce, String attributeName):
	this.setName(attributeName) ->
	ce.attributes.add(this);

create vpm::ConstrainedElement createConstrainedElement(vpm::VariationPoint vp, Element element):
	this.setQualifiedName(element.zdlAsNamedElement().qualifiedName) ->
	this.setName(element.zdlAsNamedElement().name)->
	vp.constrainedElements.add(this);

create vpm::ConstrainedElement createConstrainedElementWithAttributes(vpm::VariationPointWithSettings vpws, Element element):
	this.setQualifiedName(element.zdlAsNamedElement().qualifiedName) ->
	this.setName(element.zdlAsNamedElement().name)->
	getAttributesFromElement(element).collect(a | this.createAttribute(a))->
	vpws.constrainedElements.add(this);

Void debug(Object o) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.debug(
		java.lang.Object);

/*
Void debug(uml::Constraint constraint) :
	JAVA com.prismtech.domain.sca.ppls.GenerationUtils.debug(
		java.lang.Object);
*/
		
	