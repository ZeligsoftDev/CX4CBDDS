/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.prismtech.domain.sca.ppls.vpm.provider;

import com.prismtech.domain.sca.ppls.vpm.util.VpmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VpmItemProviderAdapterFactory extends VpmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VpmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.VariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationPointItemProvider variationPointItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.VariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationPointAdapter() {
		if (variationPointItemProvider == null) {
			variationPointItemProvider = new VariationPointItemProvider(this);
		}

		return variationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.VariationPointWithValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationPointWithValueItemProvider variationPointWithValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.VariationPointWithValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationPointWithValueAdapter() {
		if (variationPointWithValueItemProvider == null) {
			variationPointWithValueItemProvider = new VariationPointWithValueItemProvider(this);
		}

		return variationPointWithValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.VariationPointWithSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationPointWithSettingsItemProvider variationPointWithSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.VariationPointWithSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationPointWithSettingsAdapter() {
		if (variationPointWithSettingsItemProvider == null) {
			variationPointWithSettingsItemProvider = new VariationPointWithSettingsItemProvider(this);
		}

		return variationPointWithSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.ConstrainedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstrainedElementItemProvider constrainedElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.ConstrainedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstrainedElementAdapter() {
		if (constrainedElementItemProvider == null) {
			constrainedElementItemProvider = new ConstrainedElementItemProvider(this);
		}

		return constrainedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.VPModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VPModelItemProvider vpModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.VPModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVPModelAdapter() {
		if (vpModelItemProvider == null) {
			vpModelItemProvider = new VPModelItemProvider(this);
		}

		return vpModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationPointItemProvider configurationPointItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationPointAdapter() {
		if (configurationPointItemProvider == null) {
			configurationPointItemProvider = new ConfigurationPointItemProvider(this);
		}

		return configurationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPointWithValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationPointWithValueItemProvider configurationPointWithValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPointWithValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationPointWithValueAdapter() {
		if (configurationPointWithValueItemProvider == null) {
			configurationPointWithValueItemProvider = new ConfigurationPointWithValueItemProvider(this);
		}

		return configurationPointWithValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPointWithSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationPointWithSettingsItemProvider configurationPointWithSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.ConfigurationPointWithSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationPointWithSettingsAdapter() {
		if (configurationPointWithSettingsItemProvider == null) {
			configurationPointWithSettingsItemProvider = new ConfigurationPointWithSettingsItemProvider(this);
		}

		return configurationPointWithSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.SettableAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettableAttributeItemProvider settableAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.SettableAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettableAttributeAdapter() {
		if (settableAttributeItemProvider == null) {
			settableAttributeItemProvider = new SettableAttributeItemProvider(this);
		}

		return settableAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.prismtech.domain.sca.ppls.vpm.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.prismtech.domain.sca.ppls.vpm.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vpModelItemProvider != null) vpModelItemProvider.dispose();
		if (variationPointItemProvider != null) variationPointItemProvider.dispose();
		if (variationPointWithValueItemProvider != null) variationPointWithValueItemProvider.dispose();
		if (variationPointWithSettingsItemProvider != null) variationPointWithSettingsItemProvider.dispose();
		if (constrainedElementItemProvider != null) constrainedElementItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (configurationPointItemProvider != null) configurationPointItemProvider.dispose();
		if (configurationPointWithValueItemProvider != null) configurationPointWithValueItemProvider.dispose();
		if (configurationPointWithSettingsItemProvider != null) configurationPointWithSettingsItemProvider.dispose();
		if (settableAttributeItemProvider != null) settableAttributeItemProvider.dispose();
	}

}
