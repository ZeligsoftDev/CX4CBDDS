�REM�*
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *�ENDREM�
�IMPORT CCM::CCM_Implementation�
�IMPORT CCM::CCM_Component�

�EXTENSION codegen::regions�
�EXTENSION com::zeligsoft::domain::zml::oaw::generation::ZMLCommon�

�EXTENSION com::zeligsoft::base::zdl::util::ZDLUtil�

�DEFINE create FOR MonolithicImplementation�
�FILE "/"+this.name+"/worker/"+getFunctionPrefix()+this.name+"Worker.h" -�

�REM� �EXPAND templates::template::file_helpers::zeligsoft_file_header FOR getFunctionPrefix()+this.name+"Worker.h"� �ENDREM�

#ifndef __�getFunctionPrefix().toUpperCase()�_�this.name.toUpperCase()�_WORKER_H
#define __�getFunctionPrefix().toUpperCase()�_�this.name.toUpperCase()�_WORKER_H


#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>

#include "PortTypes.h"

#include "scxOperatingEnvironment.h"

#include "�getFunctionPrefix()��this.name�Servant.h"

class �getFunctionPrefix()��this.name�Worker 
	

	public:

		�getFunctionPrefix()��this.name�Worker( �getFunctionPrefix()��this.name�Servant *pServant, const �this.name�_params& execParams SCX_EXC_ENV_ARG );

		virtual ~�getFunctionPrefix()��this.name�Worker();
		
		void initExecParams( const �this.name�_params& params SCX_EXC_ENV_ARG);

	�REM� Generate Consumes Port �ENDREM�
	�FOREACH this.zdlAsComponent().superClass.get(0).ownedPort.typeSelect(EventPort) AS port -�
		�IF port.type.zdlAsClass().getUsedInterfaces().size > 0�
		void push_�port.zdlAsPort().name� (Stock::StockName *ev /* hard-coded */);
		�ENDIF�
	�ENDFOREACH�
		
		#if defined(DEBUG_MSGS)
		void setDebugStream(const std::ostream& stream);

		void debugMsg(const std::string&);
		#endif

	private:
	
		�this.name�_params execParams_;
		�getFunctionPrefix()��this.name�Servant *pServant_;

		#if defined(DEBUG_MSGS)
		std::ostream debug_;
		#endif

};
#endif     // __SCX�this.name.toUpperCase()�WORKER_H

// End-Of-File
//------------------------------------------------------------------------------
�ENDFILE -�
�ENDDEFINE�