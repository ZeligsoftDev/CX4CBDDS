/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import CCM::CCM_Component;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::uml_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::ccm_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::tao_idl_utils;

Void visit_consumes(EventPort node, uml::Class container) :
	visit_consumes__push_operation(node, container);
	
private create uml::Operation visit_consumes__push_operation(EventPort node, uml::Class container) :
	this.setName("push_" + node.name) ->
	visit_consumes__push_operation_parameter(node, this) ->
	this.createTrace(node, "consumes__push_operation") ->
	this.addGeneratedTag() ->
	container.ownedOperation.add(this) ->
	this;
	
private create uml::Parameter visit_consumes__push_operation_parameter(EventPort node, uml::Operation container) :
	this.setName("ev") ->
	// TODO : Set parameter type (:: consumes_type *)
	this.setDirection(parameter_direction_kind_in()) ->
	this.createTrace(node, "consumes__push_operation_parameter") ->
	this.addGeneratedTag() ->
	container.ownedParameter.add(this) ->
	this;