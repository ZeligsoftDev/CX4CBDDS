/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import CORBADomain::IDL;
import CCM::CCM_Component;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::uml_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::ccm_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::tao_idl_utils;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::component_names;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::namespaces;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::corba_standard_ops;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::standard_ops;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_interface;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_attribute;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_operation;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_inheritance_graph;
	
/*****************************************************************************
 **
 **
 ** Classes for the CIAO Executor IDL
 **
 **
 ***************************************************************************/
create uml::Class component__ciao_executor(CCMComponent node, uml::Package container) :
	let namespace_str = node.component_implementation_namespace() :
	let namespace = visit_namespace(namespace_str, container, node) :
	let name = node.component_ciao_executor_name() : 
		this.setName(name) ->
		this.standard_op__is_a().createTrace(node, container, "ciao_executor_standard_op__is_a") ->
 		this.standard_op__interface_repository_id().createTrace(node, container, "ciao_executor_standard_op__interface_repository_id") ->
 		this.standard_op__marshal().createTrace(node, container, "ciao_executor_standard_op__marshal") ->
 		this.add_default_constructor(name, visibility_kind_protected()).createTrace(node, container, "component__ciao_executor_constructor") ->
 		this.add_destructor(name, visibility_kind_protected()).createTrace(node, container, "component__ciao_executor_destructor") ->
 		this.add_copy_constructor(name, visibility_kind_private()).createTrace(node, container, "ciao_executor_copy_constructor") ->
		this.general.add(node.component__ciao_executor_facet(container)) ->
		namespace.packagedElement.add(this) ->
		this.createTrace(node, "component__ciao_executor") ->
		this.addGeneratedTag() ->
		this;
 
create uml::Class component__ciao_executor_var(CCMComponent node, uml::Package container) :
  	let namespace_str = node.component_implementation_namespace() :
	let namespace = visit_namespace(namespace_str, container, node) :
	  	this.setName(node.component_ciao_executor_var_name()) ->
	  	this.general.add(node.component__ciao_executor(container)) ->
	 	namespace.packagedElement.add(this) ->
	 	this.createTrace(node, "component__ciao_executor_var") ->
	 	this.addGeneratedTag() ->
	 	this;
 	
create uml::Class component__ciao_executor_out(CCMComponent node, uml::Package container) :
  	let namespace_str = node.component_implementation_namespace() :
	let namespace = visit_namespace(namespace_str, container, node) :
	  	this.setName(node.component_ciao_executor_out_name()) ->
	  	this.general.add(node.component__ciao_executor(container)) ->
	 	namespace.packagedElement.add(this) ->
	 	this.createTrace(node, "component__ciao_executor_out") ->
	 	this.addGeneratedTag() ->
	 	this;
 	
create uml::Class component__ciao_executor_ptr(CCMComponent node, uml::Package container) :
  	let namespace_str = node.component_implementation_namespace() :
	let namespace = visit_namespace(namespace_str, container, node) :
	  	this.setName(node.component_ciao_executor_ptr_name()) ->
  		this.general.add(node.component__ciao_executor(container)) ->
 		namespace.packagedElement.add(this) ->
 		this.createTrace(node, "component__ciao_executor_ptr") ->
 		this.addGeneratedTag() ->
 		this;
 
/*****************************************************************************
 **
 **
 ** Classes for the CIAO Executor Facet IDL
 **
 **
 ***************************************************************************/
 cached Void visit_component__ciao_executor_facet(CCMComponent node, uml::Package container) :
 	component__ciao_executor_facet(node, container) ->
 	component__ciao_executor_facet_out(node, container) ->
 	component__ciao_executor_facet_var(node, container) ->
 	component__ciao_executor_facet_ptr(node, container);
 	
create uml::Class component__ciao_executor_facet(CCMComponent node, uml::Package container) :
	let namespace = namespace(node, container) :
	let name = node.component_ciao_executor_facet_name() :
		this.setName(name) ->
		this.general.addAll(node.realizedInterfaces().type(container)) ->
		node.ownedAttribute.visit_attribute(this) ->
		this.standard_op__is_a().createTrace(node, container, "ciao_executor_facet_standard_op__is_a")  ->
	 	this.standard_op__interface_repository_id().createTrace(node, container, "ciao_executor_facet_standard_op__interface_repository_id")  ->
	 	this.standard_op__marshal().createTrace(node, container, "ciao_executor_facet_standard_op__marshal")  ->
	 	this.add_default_constructor(name, visibility_kind_protected()).createTrace(node, container, "ciao_executor_facet_default_constructor")  ->
	 	this.add_destructor(name, visibility_kind_protected()).createTrace(node, container, "ciao_executor_facet_destructor")  ->
	 	this.add_copy_constructor(name, visibility_kind_private()).createTrace(node, container, "ciao_executor_facet_copy_constructor") ->
		namespace.packagedElement.add(this) ->
		this.createTrace(node, "component__ciao_executor_facet") ->
		this.addGeneratedTag() ->
		this;
 
create uml::Class component__ciao_executor_facet_var(CCMComponent node, uml::Package container) :
  	let namespace = namespace(node, container) :
	  	this.setName(node.component_ciao_executor_facet_var_name()) ->
	  	this.general.add(node.component__ciao_executor_facet(container)) ->
	 	namespace.packagedElement.add(this) ->
	 	this.createTrace(node, "component__ciao_executor_facet_var") ->
	 	this.addGeneratedTag() ->
	 	this;
 	
create uml::Class component__ciao_executor_facet_out(CCMComponent node, uml::Package container) :
  	let namespace = namespace(node, container) :
	  	this.setName(node.component_ciao_executor_facet_out_name()) ->
	  	this.general.add(node.component__ciao_executor_facet(container)) ->
	 	namespace.packagedElement.add(this) ->
	 	this.createTrace(node, "component__ciao_executor_facet_out") ->
	 	this.addGeneratedTag() ->
	 	this;
 	
create uml::Class component__ciao_executor_facet_ptr(CCMComponent node, uml::Package container) :
  	let namespace = namespace(node, container) :
	  	this.setName(node.component_ciao_executor_facet_ptr_name()) ->
	  	this.general.add(node.component__ciao_executor_facet(container)) ->
	 	namespace.packagedElement.add(this) ->
	 	this.createTrace(node, "component__ciao_executor_facet_ptr") ->
	 	this.addGeneratedTag() ->
	 	this;
 	
 /*****************************************************************************
 **
 **
 ** Classes for the Interface Equivalent IDL
 **
 **
 ***************************************************************************/
 cached Void visit_interface__equivalent_idl(CORBAInterface node, uml::Package container) :
 	interface__equivalent_idl(node, container) ->
 	interface__equivalent_idl_out(node, container) ->
 	interface__equivalent_idl_var(node, container) ->
 	interface__equivalent_idl_ptr(node, container);
 
 create uml::Class interface__equivalent_idl(CORBAInterface node, uml::Package container) :
 	let namespace = namespace(node, container) :
 	let name = node.interface__equivalent_idl_name() :
 		this.setName(name) ->
 		this.general.add(type(node, container)) ->
 		this.standard_op__is_a().createTrace(node, container, "interface__equivalent_idl_standard_op__is_a") ->
 		this.standard_op__interface_repository_id().createTrace(node, container, "interface__equivalent_idl_standard_op__interface_repository_id") ->
 		this.standard_op__marshal().createTrace(node, container, "interface__equivalent_idl_standard_op__marshal") ->
 		this.add_default_constructor(name, visibility_kind_protected()).createTrace(node, container, "interface__equivalent_idl_default_constructor") ->
 		this.add_destructor(name, visibility_kind_protected()).createTrace(node, container, "interface__equivalent_idl_destructor") ->
 		//this.add_copy_constructor(name, visibility_kind_private()) ->
 		namespace.packagedElement.add(this) ->
 		this.createTrace(node, "interface__equivalent_idl") ->
 		this.addGeneratedTag() ->
 		this;
 	
 create uml::Class interface__equivalent_idl_var(CORBAInterface node, uml::Package container) :
 	let namespace = namespace(node, container) :
 		this.setName(node.interface__equivalent_idl_var_name()) ->
 		this.general.add(interface__equivalent_idl(node, container)) ->
 		namespace.packagedElement.add(this) ->
 		this.createTrace(node, "interface__equivalent_idl_var") ->
 		this.addGeneratedTag() ->
 		this;
 	
 create uml::Class interface__equivalent_idl_ptr(CORBAInterface node, uml::Package container) :
 	let namespace = namespace(node, container) :
 		this.setName(node.interface__equivalent_idl_ptr_name()) ->
 		this.general.add(interface__equivalent_idl(node, container)) ->
 		namespace.packagedElement.add(this) ->
 		this.createTrace(node, "interface__equivalent_idl_ptr") ->
 		this.addGeneratedTag() ->
 		this;
 	
 create uml::Class interface__equivalent_idl_out(CORBAInterface node, uml::Package container) :
 	let namespace = namespace(node, container) :
 		this.setName(node.interface__equivalent_idl_out_name()) ->
 		this.general.add(interface__equivalent_idl(node, container)) ->
 		namespace.packagedElement.add(this) ->
 		this.createTrace(node, "interface__equivalent_idl_out") ->
 		this.addGeneratedTag() ->
 		this;