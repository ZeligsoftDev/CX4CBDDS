/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import CORBADomain::IDL;
import CCM::CCM_Component;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::uml_utils;

// -Gd
boolean gen_direct_collocation() :
	true;

// -Gp
boolean gen_thru_poa_collocation() :
	true;
	
// -b for tao_idl
boolean use_clonable_argument_for_oneway_methods() :
	false;
	
// -GC
boolean gen_ami_classes() :
	false;
	
// -GH
boolean gen_amh_classes() :
	false;
	
// -GM
boolean gen_ami4ccm_classes() :
	false;
	
// -Gce
boolean gen_code_optimized_for_CORBAe() :
	false;
	
// -Gmc
boolean gen_code_optimized_for_min_CORBA() :
	false;
	
// -Gdcps
boolean gen_dds_dcps_type_definitions() :
	false;
	
// -Gos
boolean gen_std_ostream_operators() :
	false;
	
// -Gdcpsonly
boolean gen_dds_dcps_type_serializer() :
	false;
	
// -GIb prefix to the implementation class names. Default is 'no prefix'
String implementation_class_prefix() :
	"";

// -GIe suffix to the implementation class names. Default is '_i'
String implementation_class_suffix() :
	"_i";

// -GIc generate copy constructors in the servant implementation template files (off by default)
boolean gen_copy_constructors_in_servant_implementation() :
	false;

// -GIa generate assignment operators in the servant implementation template files (off by default)
boolean gen_assignment_operators_in_servant_implementation() :
	false;

// -Gsp
boolean gen_smart_proxies() :
	false;
	
// -Gt
boolean gen_optimized_typecode_support() :
	false;
	
// -GT
boolean gen_tie_class() :
	false;
	
// -GA generate Any operator and type codes in *A.{h, cpp} (generated in *C.{h, cpp} by default)
boolean gen_any_operator_and_typecodes() :
	false;

// -Guc generate uninlined constant if declared in a module (inlined by default)
boolean gen_uninlined_constant() :
	false;
	
// -Gse generate explicit export of sequences's template base class (not generated by default)
boolean gen_explicit_export_of_sequences() :
	false;
	
// -Gsv generate CIAO servant code (not generated by default)
boolean gen_ciao_servant() :
	false;
	
// -Glem geneate CIAO executor IDL (not generated by default)
boolean gen_ciao_executor_idl() :
	false;
	
// -Glfa generate executor IDL for all facets (only for facet interfaces in main file by default)
boolean gen_executor_idl_for_all_facets() :
	false;
	
// -Gex			generate CIAO executor implementation code (not generated by default)
boolean gen_ciao_executor_implementation() :
	false;

// -Gcn			generate CIAO connector implementation code (not generated by default)
boolean gen_ciao_connector_implementation() :
	false;

// -Gsc			generate CIAO code for static configuration (not generated by default)
boolean gen_ciao_static_configuration() :
	false;

// -Sa			suppress Any support (support enabled by default)
boolean suppress_any_support() :
	false;
	
// -Sal			suppress Any support for local interfaces (support enabled by default)
boolean suppress_any_support_for_local_interfaces() :
	false;

// -St			suppress TypeCode support (support enabled by default)
boolean suppress_typecode_support() :
	false;
	
// -Sp			suppress generating Thru POA collocated stubs (enabled by default)
boolean suppress_thru_poa_collocated_stubs() :
	false;

// -Sd			suppress generating Direct collocated stubs (disable by default)
boolean suppress_direct_collocated_stubs() :
	false;

// -Sm			disable IDL3 equivalent IDL preprocessing (enabled by default)
boolean disable_idl3_equivalent_idl_preprocessing() :
	false;

// -SS			suppress generating skeleton implementation and inline file (disabled by default)
boolean suppress_skeleton_implementation() :
	false;
	
cached Void addGeneratedTag(uml::Element element) :
	element.addKeyword("@tao_idl_generated");
	
Void createTrace(uml::NamedElement source, uml::NamedElement target, uml::Package container, String identifier) :
		source.addAnnotation("@tao_idl_generated", "source", target.getElementId()).addDetail("transform", identifier);

Void createTrace(uml::NamedElement source, uml::NamedElement target, String identifier) :
		source.addAnnotation("@tao_idl_generated", "source", target.getElementId()).addDetail("transform", identifier);

private String getElementId(uml::NamedElement source) :
	source.getXMIId();

private String getEAnnotation(ZMLMM::ZML_Core::NamedElement source, String name) :
	source.zdlAsElement().getEAnnotation(name);
		
private Void applyTraceStereotype(uml::Abstraction self) :
	let stereotype = self.getApplicableStereotype("Standard::Trace") :
		(stereotype != null) ? self.applyStereotype(stereotype) : Void;