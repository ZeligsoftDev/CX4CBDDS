/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


import CCM::CCM_Component;
import ZMLMM::ZML_Component;
import CORBADomain::IDL;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::uml_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::ccm_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::tao_idl_utils;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::component_names;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_attribute;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_operation;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_inheritance_graph;

Void visit_facet(MessagePort node, CCMComponent comp, uml::Package namespace) :
	facet_new(node, namespace);
	
create uml::Class facet_new(MessagePort node, uml::Package namespace) :
	let className = node.providedInterface.first().facet_executor_class_name() :
		this.setName(className) ->
		// TODO : generalization to interface CCM_<interface name>
		// TODO : generalization to CORBA::LocalObject 
		facet__constructor(node, this) ->
		facet__destructor(node, this) ->
		node.providedInterface.typeSelect(CORBAInterface).ownedAttribute.visit_attribute(this) ->
		node.providedInterface.typeSelect(CORBAInterface).ownedOperation.visit_operation(this) ->
		node.providedInterface.typeSelect(CORBAInterface).zdlAsInterface().general.typeSelect(CORBAInterface).forAll(c|visit_inheritance_graph(node, c, this)) ->
		facet__context_member(node, this) ->
		namespace.packagedElement.add(this) ->
		this.createTrace(node, "facet_new") ->
		this.addGeneratedTag() ->
		this;

private create uml::Operation facet__constructor(MessagePort node, uml::Class container) :
	container.ownedOperation.add(this) ->
	this.setName(node.facet_executor_class_name()) ->
	this.createTrace(node, "facet_constructor") ->
	this.addGeneratedTag() ->
	this;

private create uml::Parameter facet__constructor_parameter(MessagePort node, uml::Operation container) :
	this.setName("ctx") ->
	// TODO : set the parameter type
	container.ownedParameter.add(this) ->
	this.createTrace(node, "facet_constructor_parameter") ->
	this.addGeneratedTag() ->
	this;
	
private create uml::Operation facet__destructor(MessagePort node, uml::Class container) :
	container.ownedOperation.add(this) ->
	this.setName("~" + node.facet_executor_class_name()) ->
	this.createTrace(node, "facet_destructor") ->
	this.addGeneratedTag() ->
	this;
	
private create uml::Property facet__context_member(MessagePort node, uml::Class container) :
	this.setName("ciao_context_") ->
	// TODO : set type
	this.makePrivate() ->
	container.ownedAttribute.add(this) ->
	this.createTrace(node, "facet_context_member") ->
	this.addGeneratedTag() ->
	this;