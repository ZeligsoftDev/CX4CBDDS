/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
import CORBADomain::IDLFileSupport; // needed for IDLFile and similar
import CORBADomain::IDL; // needed for CORBAModule etc.
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CCM::CCM_Component;
import CCM::CCM_Core;
import DDS4CCM::DDS4CCM;
import IDL3Plus::Connectors;
import IDL3Plus::Generics;
import idl; // needed for IDL DSL

extension com::zeligsoft::domain::zml::oaw::importutils::ZMLImportUtils;

uml::Package mainTransform(Specification model, uml::Package importedIdlPackage, List[String] fileList) :
	clearFileList() ->
	processFileList(fileList) ->
	setImportedIdlPackage(importedIdlPackage) ->
	model.definitions.organize() ->
	importedIdlPackage.setName(getTopLevelPackageName()) ->
	importedIdlPackage;

Void processFileList(List[String] fileList) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.processFileList(
		java.util.List);
		
Void clearFileList() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.clearFileList();
	
Void setImportedIdlPackage(uml::Package importedIdlPackage ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.setImportedIdlPackage(
		org.eclipse.uml2.uml.Package);
		
String getTopLevelPackageName() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.getTopLevelPackageName();
	
Void organize(Definition def ) :
	debug("Unhandled Definition: " + def);

// Ignore forward declarations
Void organize(ComponentForwardDecl def ) : {};
Void organize(EventForwardDcl def ) : {};
Void organize(Forward_decl def ) : {};
Void organize(ConstrForwardDecl def ) : {};	
	
Void addElementToPackage(String elementName) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.addElementToPackage(
		java.lang.String);

Void organize(File_Marker def ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.setCurrentFile(
		com.zeligsoft.domain.omg.corba.dsl.idl.File_Marker);
		
Void organize(IDLComment def ) :
	{};
	
Void organize(Excluded_File_Marker def ) :
	{};
	
Void organize(Preproc def ) :
	{};
	
Void organize(Module def ) :
	def.definitions.organize();
	
Void organize(TemplateModuleInst def ) :
	addElementToPackage(def.name);
	
Void organize(ComponentDecl def ) :
	addElementToPackage(def.name);
	
Void organize(Preproc_Pragma_Component def ) :
	addElementToPackage(def.value);
	
Void organize(Interface_decl def ) :
	addElementToPackage(def.header.name);
	
Void organize(StructType def ) :
	addElementToPackage(def.name);
	
/* Need to fix union-importing into a top level model or else this throws an exception.
Void organize(UnionType def ) :
	addElementToPackage(def.name);
*/
	
Void organize(TypeDeclarator def ) :
	addElementToPackage(def.declarators.first().id);
	
Void organize(EnumType def ) :
	addElementToPackage(def.name);
	
Void organize(HomeDecl def ) :
	ignoreThisHome() ? {} : addElementToPackage(def.name);
	
Void organize(Preproc_Pragma_Home def ) :
	ignoreNextHome() ->
	addElementToPackage(def.value);
	
Void ignoreNextHome() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.ignoreNextHome();
	
boolean ignoreThisHome() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportOrganizer.ignoreThisHome();
	
Void organize(ConstDecl def ) :
	addElementToPackage(def.name);
	
Void organize(Connector def ) :
	addElementToPackage(def.header.name);
