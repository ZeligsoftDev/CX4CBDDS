<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
 <meta name="generator" content="Adobe RoboHelp 9">
<title>Bottom-Up Design</title>
<link rel="StyleSheet" href="helpstyle.css" type="text/css">
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="whmsg.js"></script>
<script type="text/javascript" language="javascript" src="whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js"></script>

</head>

<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("CX Online Help\nTutorials\nTutorial 3: Bottom-Up Design");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(0);

	
	

	if (window.setRelStartPage)
	{
	setRelStartPage("index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h1>Tutorial 3: Bottom-up Design</h1>
<p>This tutorial assumes that you have completed Tutorial 1: <a href="getting_started.htm">Getting 
 Started</a>.</p>
<p>In this tutorial you will learn how to create an application from the 
 bottom-up and will:</p>
<ul type="circle">
	<li class="p"><p><a href="#Define the Interfaces and Data">Define the 
	 Interfaces and Data</a></p></li>
	<li class="p"><p><a href="#Define the Components">Define the Components</a></p></li>
	<li class="p"><p><a href="#Assemble the Application">Assemble the Application</a></p></li>
</ul>
<p>You can view a video of this tutorial <a href="http://www.zeligsoft.com/files/CX_Videos/CX4CBDDS/CX4CBDDS-BottomUp/CX4CBDDS-BottomUp.html" 
											 title="Bottom-Up Design video" 
											 target="_blank">here</a>. 
 &#160;Depending on your screen size, you may want to close the Contents 
 frame.</p>
<h2><a name="Define the Interfaces and Data"></a>Define the Interfaces 
 and Data</h2>
<p>Bottom-up design assumes you are starting with well-defined interfaces 
 and data models.</p>
<h3>Create a New Package and Module for the Interfaces</h3>
<p>You need to create a package to organize the interface definitions and 
 namespaces.</p>
<p>To create a new package and module, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 model and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Package</b></span>.</p></li>
	<li class="p"><p>Rename the package <span style="font-weight: bold;"><b>objects</b></span>.</p></li>
	<li class="p"><p>Right-click <span style="font-weight: bold;"><b>objects</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Module.</b></span></p></li>
	<li class="p"><p>Rename the module <span style="font-weight: bold;"><b>DiningPhilosophers</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Create a New Diagram to Visualize the Interfaces</h3>
<p>To create a diagram, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 <span>model</span> and from the context menu select <span style="font-weight: bold;"><b>Add 
	 Diagram &gt; CX Component Diagram</b></span>.</p></li>
	<li class="p"><p>Rename the diagram <span style="font-weight: bold;"><b>objects_di</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Create an Exception</h3>
<p>You will now create a CORBA exception using the Project Explorer for 
 use in an interface.</p>
<p>To create an exception, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 model and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Exception</b></span>.</p></li>
	<li class="p"><p>Rename the exception <span style="font-weight: bold;"><b>InUse</b></span>.</p></li>
	<li class="p"><p>Drag-and-drop <span style="font-weight: bold;"><b>InUse</b></span> 
	 <span>onto the diagram.</span></p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add an Interface that Generates the Exception</h3>
<p>This interface generates an exception if the <span style="font-weight: bold;"><b>Fork</b></span> 
 is in use.</p>
<p>To add an interface, follow these steps:</p>
<ol type="1">
	<li class="p"><p>From the CORBA drawer in the Palette, drag-and-drop 
	 an <span style="font-weight: bold;"><b>Interface</b></span> onto&#160;<span 
	 style="font-weight: bold;"><b>objects_di</b></span>.</p></li>
	<li class="p"><p>Rename the interface <span style="font-weight: bold;"><b>Fork</b></span>.</p></li>
	<li class="p"><p>Hover over the interface and from the Action toolbar 
	 select <img src="corbaoperation.gif" alt="corbaoperation.gif" style="border: none;" width="13" height="13" border="0"> &#160;(Add CORBA 
	 Operation).</p></li>
	<li class="p"><p>Rename the operation <span style="font-weight: bold;"><b>pickup</b></span>.</p></li>
	<li class="p"><p>Select <span style="font-weight: bold;"><b>pickup</b></span> 
	 <span>in the diagram (or</span> in the Project Explorer).</p></li>
	<li class="p"><p>In the Properties tab, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> 
	 (Edit Exception Def).<br>
	The tool displays the Exception Def Properties dialog.</p></li>
	<li class="p"><p>Click <img src="add-icon.gif" alt="add-icon.gif" style="border: none;" width="16" height="16" border="0"> (Add 
	 New Exception Def).<br>
	The tool displays the <span style="font-weight: bold;"><b>Element Selection 
	 Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>InUse 
	 -DiningPhilosophers::objects::DiningPhilosophers::InUse</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>Close</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add an Enumeration for the Philosopher's State</h3>
<p>To add an enumeration for the Philosopher's state, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Open <span style="font-weight: bold;"><b>objects_di</b></span>.</p></li>
	<li class="p"><p>From the CORBA drawer in the Palette, drag-and-drop 
	 an <span style="font-weight: bold;"><b>Enumeration</b></span> onto the diagram.</p></li>
	<li class="p"><p>Rename the enumeration <span style="font-weight: bold;"><b>PhilosopherState</b></span>.</p></li>
	<li class="p"><p>From the Action toolbar, add two enumeration literals: 
	 <span style="font-weight: bold;"><b>EATING</b></span> and <span style="font-weight: bold;"><b>THINKING</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Define Data Connections</h3>
<p>To define data connections, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 model and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Package</b></span>.</p></li>
	<li class="p"><p>Rename the package <span style="font-weight: bold;"><b>connections</b></span>.</p></li>
	<li class="p"><p>Right-click connections and from the context menu 
	 select <span style="font-weight: bold;"><b>Add CX &gt; DDS Connector 
	 Type</b></span>.<br>
	The tool displays the <span style="font-weight: bold;"><b>Create DDS Connector 
	 Instance</b></span> dialog.</p></li>
	<li class="p"><p>Name the message <span style="font-weight: bold;"><b>StatusInfo</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>Finish</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add Fields to StatusInfo</h3>
<p>To add fields to <span style="font-weight: bold;"><b>StatusInfo</b></span>, 
 follow these steps:</p>
<ol type="1">
	<li class="p"><p>In the Project Explorer, right-click <span style="font-weight: bold;"><b>StatusInfo</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Field</b></span>.</p></li>
	<li class="p"><p>To rename to field, type <span style="font-weight: bold;"><b>name:</b></span> 
	 <span>(name following by a colon [:]).</span><br>
	The tool displays a list of types for you to choose from.</p></li>
	<li class="p"><p>Select <span style="font-weight: bold;"><b>IDLPrimitives::CORBAString.</b></span></p></li>
	<li class="p"><p>Right-click <span style="font-weight: bold;"><b>StatusInfo</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Field</b></span>.</p></li>
	<li class="p"><p>Rename the field <span style="font-weight: bold;"><b>state</b></span>.</p></li>
	<li class="p"><p>In the Properties tab, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> 
	 (Edit Idl Type).<br>
	The tool displays the <span style="font-weight: bold;"><b>Element Specification 
	 Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>PhilosopherState 
	 - DiningPhilosophers::objects::DiningPhilosophers::PhilosopherState.</b></span></p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<p><span style="font-weight: bold;"><b>StatusInfo</b></span> now carries the name 
 of the Philosopher and its state.</p>
<h2><a name="Define the Components"></a>Define the Components</h2>
<p>Now we have defined the CORBA objectsects and DDS messages we will create 
 components using these model elements.</p>
<h3>Create a New Component ForkManager</h3>
<p>To create a new package for components, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 model and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Package</b></span>.</p></li>
	<li class="p"><p>Rename the package <span style="font-weight: bold;"><b>components</b></span>.</p></li>
	<li class="p"><p>Right-click <span style="font-weight: bold;"><b>components</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; CCM Component</b></span>.<br>
	The tool displays the <span style="font-weight: bold;"><b>New Component</b></span> 
	 dialog.</p></li>
	<li class="p"><p>Name the component <span style="font-weight: bold;"><b>ForkManager</b></span>.</p></li>
	<li class="p"><p>Ensure that Create Assembly is <span style="font-style: italic;"><i>not</i></span> 
	 checked, but that Create component in a new package and Add component 
	 to a new diagram <span style="font-style: italic;"><i>are</i></span> checked.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>Finish</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add Interface Port to ForkManager</h3>
<p>To add an Interface Port to ForkManager, follow these steps:</p>
<ol type="1">
	<li class="p"><p>From the Project Explorer, right-click the <span style="font-weight: bold;"><b>ForkManager</b></span> 
	 component.</p></li>
	<li class="p"><p>Select <span style="font-weight: bold;"><b>Add CX &gt; 
	 Interface Port.</b></span></p></li>
	<li class="p"><p>Rename the interface port <span style="font-weight: bold;"><b>fork</b></span>.</p></li>
	<li class="p"><p>In the Properties tab, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> 
	 (Edit Porttype).<br>
	The tool displays the <span style="font-weight: bold;"><b>Element Specification</b></span> 
	 <span style="font-weight: bold;"><b>Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>Fork 
	 - DiningPhilosophers::objects::DiningPhilosophers::Fork</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Define Philosopher Component</h3>
<p>To define the Philosopher component, follow these steps:</p>
<ol type="1">
	<li class="p"><p>In the Project Explorer, right-click <span style="font-weight: bold;"><b>components</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; CCM Component</b></span>.<br>
	The tool displays the <span style="font-weight: bold;"><b>New Component</b></span> 
	 wizard.</p></li>
	<li class="p"><p>Name the component <span style="font-weight: bold;"><b>Philosopher</b></span>.</p></li>
	<li class="p"><p>Ensure that Create Assembly is <span style="font-style: italic;"><i>not</i></span> 
	 checked, but that Create component in a new package and Add component 
	 to a new diagram <span style="font-style: italic;"><i>are</i></span> checked.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>Finish</b></span>.<br>
	The tool creates and displays the <span style="font-weight: bold;"><b>Philosopher</b></span> 
	 diagram.</p></li>
	<li class="p"><p>From the Action toolbar, select <img src="addcorbaattribute.gif" alt="addcorbaattribute.gif" style="border: none;" width="13" height="9" border="0"> 
	 (Add CORBA Attribute).</p></li>
	<li class="p"><p>Type <span style="font-weight: bold;"><b>name:</b></span> 
	 (name following by a colon [:]).</p></li>
	<li class="p"><p>Select <span style="font-weight: bold;"><b>IDLPrimitives::CORBAString</b></span>.</p></li>
	<li class="p"><p>From the Action toolbar, select <img src="addinterfaceport.gif" alt="addinterfaceport.gif" style="border: none;" width="7" height="7" border="0"> 
	 (Add Interface Port).</p></li>
	<li class="p"><p>Rename the port <span style="font-weight: bold;"><b>leftHand</b></span>.</p></li>
	<li class="p"><p>Add another Interface Port named <span style="font-weight: bold;"><b>rightHand</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Assign the Interface Fork to the leftHand and rightHand Ports</h3>
<p>To assign the interface to the ports, follow these steps:</p>
<ol type="1">
	<li class="p"><p>In the Project Explorer, open the <span style="font-weight: bold;"><b>objects</b></span> 
	 package.</p></li>
	<li class="p"><p>Drag-and-drop the <span style="font-weight: bold;"><b>Fork</b></span> 
	 interface onto the <span style="font-weight: bold;"><b>leftHand</b></span> 
	 port.</p></li>
	<li class="p"><p>Select <span style="font-weight: bold;"><b>rightHand</b></span> 
	 port in the diagram.</p></li>
	<li class="p"><p>In the Properties tab, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> 
	 (Edit Porttype).<br>
	The tool displays the <span style="font-weight: bold;"><b>Element Specification 
	 Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>Fork 
	 - DiningPhilosophers::objects::DiningPhilosophers::Fork</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Select each port individually and in the <span style="font-weight: bold;"><b>Properties</b></span> 
	 tab check <span style="font-weight: bold;"><b>Is Conjugated</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add a Port to Write the Philosopher's Status</h3>
<p>To add the DDS message for status, follow these steps:</p>
<ol type="1">
	<li class="p"><p>In the <span style="font-weight: bold;"><b>Philosopher</b></span> 
	 diagram, select <span style="font-weight: bold;"><b>Add Interface Port</b></span> 
	 from the Action toolbar.</p></li>
	<li class="p"><p>Rename the port <span style="font-weight: bold;"><b>s</b></span><span 
	 style="font-weight: bold;"><b>tatus</b></span>.</p></li>
	<li class="p"><p>In the Properties tab, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> 
	 (Edit Porttype).<br>
	The tool displays the <span style="font-weight: bold;"><b>Element Specification 
	 Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>DDS_Write 
	 - DiningPhilosophers::connections::StatusInfo_conn::DDS_Write</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<p>A &#160;Philosopher component now has</p>
<ul type="circle">
	<li class="p"><p>a name</p></li>
	<li class="p"><p>leftHand and rightHand control ports</p></li>
	<li class="p"><p>a status port that writes out the state of the philosopher</p></li>
</ul>
<h2><a name="Assemble the Application"></a>Assemble the Application</h2>
<p>We will now use the control, data, and component definitions to design 
 a four dining philosopher application.</p>
<h3>Create an Assembly for the Application</h3>
<p>The application will be a component with an assembly implementation. 
 To create an assembly, follow these steps:</p>
<ol type="1">
	<li class="p"><p>Right-click the <span style="font-weight: bold;"><b>DiningPhilosophers</b></span> 
	 model and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; Package</b></span>.</p></li>
	<li class="p"><p>Rename the package <span style="font-weight: bold;"><b>assemblies</b></span>.</p></li>
	<li class="p"><p>Right-click <span style="font-weight: bold;"><b>assemblies</b></span> 
	 and from the context menu select <span style="font-weight: bold;"><b>Add 
	 CX &gt; CCM Component</b></span>.<br>
	The tool displays the <span style="font-weight: bold;"><b>New Component</b></span> 
	 wizard.</p></li>
	<li class="p"><p>Name the component <span style="font-weight: bold;"><b>FourPhilosopherSystem</b></span>.</p></li>
	<li class="p"><p>Check Create Assembly, Create component in a new package, 
	 Add component to a new diagram, and Create a new structure gdiagram.</p></li>
	<li class="p"><p>Rename the structure diagram <span style="font-weight: bold;"><b>FourPhilosopherSystem_asm</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>Finish</b></span>.<br>
	The tool creates <span style="font-weight: bold;"><b>FourPhilosopherSystem_asm</b></span> 
	 and displays the structure diagram for the assembly.</p></li>
	<li class="p"><p><span>Note the new Palette.</span></p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add fork Components to the Assembly Diagram</h3>
<p>To add the fork components to the assembly diagram, follow these steps:</p>
<ol type="1">
	<li class="p"><p>From the <span style="font-weight: bold;"><b>ForkManager</b></span> 
	 package in the Project Explorer, drag-and-drop the <span style="font-weight: bold;"><b>ForkManager</b></span> 
	 component onto <span style="font-weight: bold;"><b>FourPhilosopherSystem_asm</b></span>.</p></li>
	<li class="p"><p>Rename the component <span style="font-weight: bold;"><b>fork0</b></span>.</p></li>
	<li class="p"><p>Repeat three times so that you have <span style="font-weight: bold;"><b>fork1</b></span>, 
	 <span style="font-weight: bold;"><b>fork2</b></span>, and <span style="font-weight: bold;"><b>fork3</b></span>.</p></li>
	<li class="p"><p>Align the components and their ports so that they 
	 look something akin to the following:<br>
	<br>
	<img src="bottomupfourphilosophersystem_asmforksaligned.gif" alt="bottomupfourphilosophersystem_asmforksaligned.gif" style="border: none;" width="604" height="404" border="0"></p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Add philosopher Components to the Assembly Diagram</h3>
<p>To add the philosopher components to the assembly diagram, follow these 
 steps:</p>
<ol type="1">
	<li class="p"><p>From the <span style="font-weight: bold;"><b>Philosopher</b></span> 
	 package in the Project Explorer, drag-and-drop the <span style="font-weight: bold;"><b>Philosopher</b></span> 
	 component onto <span style="font-weight: bold;"><b>FourPhilosopherSystem_asm</b></span>.</p></li>
	<li class="p"><p>Rename the component <span style="font-weight: bold;"><b>phil0</b></span>.</p></li>
	<li class="p"><p>Repeat three times so that you have <span style="font-weight: bold;"><b>phil1</b></span>, 
	 <span style="font-weight: bold;"><b>phil2</b></span>, and <span style="font-weight: bold;"><b>phil3</b></span>.</p></li>
	<li class="p"><p>Align the components and their ports so that they 
	 look something akin to the following:<br>
	<br>
	<img src="bottomupfourphilosophersystem_asmallaligned.gif" alt="bottomupfourphilosophersystem_asmallaligned.gif" style="border: none;" width="625" height="404" border="0"><br>
	&#160;</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Connect Ports</h3>
<p>You now have to connect the control ports on the forks to the hand ports 
 on the philosophers.</p>
<p>To connect the ports, follow these steps:</p>
<ol type="1">
	<li class="p"><p>From the Palette, drag-and-drop a Connection onto 
	 a fork's <span style="font-weight: bold;"><b>fork</b></span> port and connect 
	 it to the appropriate port on a philosopher.</p></li>
	<li class="p"><p>Similarly connect all the <span style="font-weight: bold;"><b>fork</b></span> 
	 ports on the forks to the hand ports on the philosophers. <span style="font-weight: bold;"><b><br>
	<br>
	Note</b></span>: You can hold CTRL to draw multiple connections.<br>
	&#160;</p></li>
	<li class="p"><p>Align the elements in the diagram so that it looks 
	 somewhat akin to the following:<br>
	<br>
	<img src="bottomupfourphilosophersystem_asmconnections.gif" alt="bottomupfourphilosophersystem_asmconnections.gif" style="border: none;" width="931" height="621" border="0"><br>
	&#160;</p></li>
</ol>
<h3>Create a Data Space</h3>
<p>To create a data space, follow these steps:</p>
<ol type="1">
	<li class="p"><p>In <span style="font-weight: bold;"><b>FourPhilosopherSystem_asm</b></span>, 
	 align the <span style="font-weight: bold;"><b>status</b></span> ports so 
	 that they are on the inside of the philosopher components.</p></li>
	<li class="p"><p>From the Palette, drag-and-drop a <span style="font-weight: bold;"><b>DataSpace</b></span> 
	 onto the middle of the diagram.</p></li>
	<li class="p"><p>In the Properties tab below the diagram, click <img src="edit-icon.gif" alt="edit-icon.gif" style="border: none;" width="16" height="16" border="0"> (Edit Connector type).<br>
	The tool opens the <span style="font-weight: bold;"><b>Element Selection 
	 Dialog</b></span>.</p></li>
	<li class="p"><p>From the Matching items list, select <span style="font-weight: bold;"><b>DDS_Event-DiningPhilosophers::objects::connections::StatusInfo_conn_conn::DDS_State</b></span>.</p></li>
	<li class="p"><p>Click <span style="font-weight: bold;"><b>OK</b></span>.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<h3>Connect status Ports to the Data Space</h3>
<p>To connect the DDS_Write Ports to the data space, follow these steps:</p>
<ol type="1">
	<li class="p"><p>From the Palette, drag-and-drop a Connection from 
	 a <span style="font-weight: bold;"><b>status</b></span> Port to the <span 
	 style="font-weight: bold;"><b>DataSpace</b></span>.</p></li>
	<li class="p"><p>Repeat for the remaining three <span style="font-weight: bold;"><b>status</b></span> 
	 Ports.</p></li>
	<li class="p"><p>Save your model.</p></li>
</ol>
<p>Your finished model should look somewhat akin to the following:<br>
<br>
<img src="bottomupfourphilosophersystem_asmcomplete.gif" alt="bottomupfourphilosophersystem_asmcomplete.gif" style="border: none;" width="931" height="619" border="0"><br>
&#160;</p>
<p>&#160;</p>
<h2>Tutorial Summary</h2>
<p>In this tutorial, you learned how to define your interfaces and components 
 and then assemble these model elements into an application.</p>
<div class="runningfooter" id="dochomefooter">
	<a href="mailto:support@prismtech.com" shape="rect" style="color: #0000ff; 
		 text-decoration: underline; ">Provide feedback</a><br style="clear: none;">
	
	<hr align="center">
	<br>Copyright <sup>©</sup> 2011 PrismTech Ltd. All rights 
	 reserved. 
</div>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
