/// @defgroup SAAT_Types_defn Types_defn
/// @{
/// 
/// @file SAAT_Types_defn.idl
/// @brief Types_defn definitions definition IDL file

//=========================================================

#ifndef CX_PORTS__SAAT_TYPES_DEFN_IDL
#define CX_PORTS__SAAT_TYPES_DEFN_IDL


/// @namespace SAAT 
module SAAT {

    /// This constant defines the maximum number of dimensions supported for SP
    /// data model <i>Views</i> and <i>Sub-Views</i>.
    const unsigned long MAX_DIMENSIONS = 3;

    /// @typedef ByteSequence
    ///
    /// This typedef defines a contiguous block of binary data (also referred to
    /// as a BLOB) that can be passed via an IDL defined interface. It should be
    /// used as a correctly sized placeholder for passing data buffer
    /// pointers/references to a specific memory location, for instance to
    /// define the beginning of a <i>Block</i>, or the beginning of a Block
    /// sub-element defined by a <i>View</i>. This is the IDL equivalent of a
    /// generic pointer type like a void*, which IDL does not natively support
    /// for language-agnostic reasons. In actual use at the code level, this
    /// pointer should be cast to the appropriate Block defined type it
    /// references.
    typedef sequence <octet> ByteSequence;

    /// @idlexcept SPDM_Exception
    ///
    /// Basic exception type for optional use with SPDM types and operations.
    /// This exception is *not* thrown by the connector but can be thrown by the
    /// operations defined in the MKC interface.
    exception SPDM_Exception {

        /// @publicsection what
        ///
        /// Text field containing a human readable description of an
        /// exception/error.
        string what;
    };

    /// @enum Storage_Format
    ///
    /// This enumeration defines the possible ways that the continugous
    /// fixed-size <i>elements</i> in a <i>Block</i> can be organized.
    enum Storage_Format {

        /// This enumeration literal indicates that the <i>Block</i> contains a
        /// contiguous array of <i>values</i> of the same <i>value type</i>,
        /// where each <i>value</i> represents a single <i>element</i>.
        REAL,

        /// This enumeration literal indicates that the <i>Block</i> contains
        /// two distinct contiguous arrays of <i>values</i> of the same <i>value
        /// type</i>, where the <i>values</i> in the first array represent the
        /// real part of a complex number, and corresponding <i>values</i> in
        /// the second array represent the imaginary part. The corresponding
        /// <i>Block</i> <i>meta data</i> has separate <i>BLOBS</i> for the
        /// separate arrays. Each <i>element</i> in the <i>Block</i> is
        /// represented by the composition of the corresponding <i>values</i> in
        /// each array. As such, each <i>element</i> is twice the size of the
        /// <i>value type</i> used to describe its respective parts.
        COMPLEX_SPLIT,

        /// This enumeration literal indicates that the <i>Block</i> contains a 
        /// contiguous array of pairs of <i>values</i> of the same <i>value
        /// type</i>, where the first <i>value</i> in each pair represents the
        /// real part of a complex number, and the second <i>value</i>
        /// represents the imaginary part. Each <i>element</i> in the
        /// <i>Block</i> is represented by the composition of the two
        /// <i>values</i> in the corresponding pair. As such, each
        /// <i>element</i> is twice the size of the <i>value type</i> used to
        /// describe its respective parts.
        COMPLEX_INTERLEAVED,

        /// This enumeration literal indicates that the <i>Block</i> contains a
        /// contiguous array of <i>elements</i>, where each <i>element</i> is a
        /// user-defined <i>value type</i>. The size of each <i>element</i> is
        /// determined by the size of the corresponding <i>value type</i>. There
        /// may be multiple "user-defined" storage formats, and hence the
        /// numeric suffix on this literal uniquely identifies this particular
        /// format.
        USER_DEFINED_1
    };

    /// @enum Basic_Scalar_Type
    ///
    /// Primitive type used to define basic elements in the Storage_Format
    /// specified for a Block. For REAL format, the Basic_Scalar_Type fully
    /// defines the type and size of each Block element. For both COMPLEX_n
    /// formats, the Basic_Scalar_Type defines the scalar type of both the real
    /// and imaginary parts of the complex number. The size of a COMPLEX_n Block
    /// element is actual 2 x Basic_Scalar_Type size. For a POINT_CLOUD_n format
    /// the SPDM_STRUCT type should be used, to specify use of a multi-field
    /// struct element defined by the application. The element size of an
    /// SPDM_STRUCT type is defined by the element_size field within a Block.
    enum Basic_Scalar_Type {

        /// This enumeration literal indicates that the <i>value</i> is a
        /// boolean.
        SPDM_BOOL,

        /// This enumeration literal indicates that the <i>value</i> is a char.
        SPDM_CHAR,

        /// This enumeration literal indicates that the <i>value</i> is a signed
        /// eight-bit integer.
        SPDM_INT8,

        /// This enumeration literal indicates that the <i>value</i> is a signed
        /// 16-bit integer.
        SPDM_INT16,

        /// This enumeration literal indicates that the <i>value</i> is a signed
        /// 32-bit integer.
        SPDM_INT32,

        /// This enumeration literal indicates that the <i>value</i> is a signed
        /// 64-bit integer.
        SPDM_INT64,

        /// This enumeration literal indicates that the <i>value</i> is an
        /// unsigned eight-bit integer.
        SPDM_UINT8,

        /// This enumeration literal indicates that the <i>value</i> is an
        /// unsigned 16-bit integer.
        SPDM_UINT16,

        /// This enumeration literal indicates that the <i>value</i> is an
        /// unsigned 32-bit integer.
        SPDM_UINT32,

        /// This enumeration literal indicates that the <i>value</i> is an
        /// unsigned 64-bit integer.
        SPDM_UINT64,

        /// This enumeration literal indicates that the <i>value</i> is a float.
        SPDM_FLOAT,

        /// This enumeration literal indicates that the <i>value</i> is a
        /// double.
        SPDM_DOUBLE,

        /// This enumeration literal indicates that the <i>value</i> is an
        /// extended-precision floating-point number.
        SPDM_LDOUBLE,

        /// This enumeration literal indicates that the <i>value</i> is a
        /// user-defined composition of <i>value types</i>.
        SPDM_STRUCT
    };

    /// @struct Block
    ///
    /// This structure defines the <i>meta data</i> associated with a
    /// <i>Block</i>. A <i>Block</i> is a logically contiguous area of memory
    /// that is used for <i>element</i> storage and wholly described by one or
    /// more <i>BLOBS</i>, which are the areas of memory used for storage, and
    /// this <i>meta data</i> structure.
    /// Five of the fields in the <i>Block</i> <i>meta data</i> are used to
    /// describe the size of the <i>Block</i> in memory. The purpose of each
    /// field is described alongside the field definition below, but this list
    /// provides some additional insight into their use.
    /// <ul>
    /// <li>
    /// <b><tt>blockSize</tt></b> takes into account any padding in the
    /// <i>Block's</i> primary and secondary data arrays that cannot be computed
    /// from the other fields.
    /// </li>
    /// <li>
    /// <b><tt>storageFormat</tt></b> indicates whether <i>elements</i> within a
    /// <i>Block</i> are contained within a single <i>BLOB</i> or spread across
    /// more than one <i>BLOB</i>. Additionally, the <tt>USER_DEFINED*</tt>
    /// storage formats indicate that the <i>elements</i> cannot be swapped by
    /// the connector.
    /// </li>
    /// <li>
    /// <b><tt>valueType</tt></b>, in the case of the <tt>REAL</tt> and
    /// <tt>USER_DEFINED*</tt> storage formats, indicates the data type of each 
    /// <i>element</i> in the <i>Block</i>. In the case of the <tt>COMPLEX*</tt>
    /// storage formats, it indicates the size of the real and imaginary parts
    /// separately, such that the <i>element</i> size is twice that of the
    /// <i>value type</i>.
    /// </li>
    /// <li>
    /// <b><tt>elementSize</tt></b> contains the size of each fix-sized
    /// <i>Block</i> <i>element</i>. In the case of the <tt>REAL</tt> and 
    /// <tt>USER_DEFINED*</tt> storage formats, this is the same as the size of
    /// the <i>value type</i>. In the case of the <tt>COMPLEX*</tt> storage
    /// formats, this is twice the size of the <i>value type</i>. This field is
    /// incredibly important for the <tt>USER_DEFINED</tt> <i>value typ</i>, as
    /// the <i>value type</i> and storage format alone are not enough to
    /// determine the size of each <i>element</i>.
    /// </li>
    /// <li>
    /// <b><tt>elementAlignment</tt></b> is used to ensure that <i>elements</i>
    /// begin on a certain byte-boundary. This can be used, for example, to pad
    /// each 4-byte single-precision floating-point <i>value</i> in the data
    /// arrays of a complex-split <i>Block</i> to 6-bytes so that each
    /// <i>value</i> begins on the 6-byte boundary.
    /// </li>
    /// <li>
    /// <b><tt>secondaryDataAlignment</tt></b> is used to ensure that secondary
    /// data array begins on a certain byte-boundary. For example, it may be
    /// important that the secondary data array begin on a 128-byte boundary.
    /// This field is used by the subscribing connector to align the received
    /// data appropriately -- and the publishing side, it is used when creating
    /// the data.
    /// </li>
    /// </ul>
    /// As an example, a <i>Block</i> containing 100 split complex
    /// single-precision floating-point <i>elements</i>, whose <i>elements</i>
    /// must begin on a 6-byte boundary, and whose secondary data array must be
    /// begin on a 128-byte boundary, might have the following size-related
    /// <i>meta data</i>.
    /// <table style="border-spacing: 0px" border="1">
    /// <tr>
    /// <td><b><tt>blockSize</tt></b></td>
    /// <td><tt>1208</tt></td>
    /// </tr>
    /// <tr>
    /// <td><b><tt>storageFormat</tt></b></td>
    /// <td><tt>STORAGE_FORMAT_COMPLEX_SPLIT</tt></td>
    /// </tr>
    /// <tr>
    /// <td><b><tt>valueType</tt></b></td>
    /// <td><tt>VALUE_TYPE_FLOAT</tt></td>
    /// </tr>
    /// <tr>
    /// <td><b><tt>elementSize</tt></b></td>
    /// <td><tt>8</tt></td>
    /// </tr>
    /// <tr>
    /// <td><b><tt>elementAlignment</tt></b></td>
    /// <td><tt>6</tt></td>
    /// </tr>
    /// <tr>
    /// <td><b><tt>secondaryDataAlignment</tt></b></td>
    /// <td><tt>128</tt></td>
    /// </tr>
    /// </table>
    /// In this case, supposing the primary data array started at address
    /// <tt>0x2000</tt> in memory, the first <i>value</i> would be located at
    /// <tt>0x2004</tt> and the last <i>value</i> would be located at
    /// <tt>0x2256</tt> such that the size of the array would be 604 bytes. By
    /// similar logic, if the secondary data array started at address
    /// <tt>0x4000</tt> in memory, which, is conveniently on a 128-byte
    /// boundary, the first <i>value</i> would be located at <tt>0x4004</tt> and
    /// the last <i>value</i> would be located at <tt>0x4256</tt> such that the
    /// size of the array would be 604 bytes.
    struct Block {

        /// Local address defining the start of the Block in memory.  This
        /// parameter is valid for all Storage_Format types.  For the
        /// COMPLEX_SPLIT type, it points to the beginning of the real array of
        /// contiguous Block elements.
        SAAT::ByteSequence primary_start_address;

        /// Local address defining the start of the imaginary array of
        /// contiguous <i>Block</i> <i>elements</i> in memory. This parameter is
        /// only valid for the COMPLEX_SPLIT format, and is a "don't care" for
        /// all the other storage formats that only require a single
        /// pointer/address.
        SAAT::ByteSequence secondary_start_address;

        /// Total size of the memory block in bytes.  For the COMPLEX_SPLIT
        /// storage format, this size encompasses both the real and imaginary
        /// sub-arrays stored separately within the Block.
        long long total_block_size;

        /// Organizational format used to define the storage of each Block
        /// element.  See the Storage_Format type definition for more
        /// information.
        SAAT::Storage_Format element_storage_format;

        /// Primitive scalar type used within each <i>Block</i> element. See the
        /// Basic_Scalar_Type type definition for more information.
        SAAT::Basic_Scalar_Type scalar_value_type;

        /// Size of each fixed-size, indexable Block element in bytes. For the
        /// REAL storage type, this size is determined by the scalar_value_type.
        /// For the COMPLEX_n storage formats, this is the size of the
        /// scalar_value_type * 2. For a POINT_CLOUD_n storage format, this
        /// field specifies the size in bytes of each struct element.  Although
        /// this field can be derived from others for the REAL and COMPLEX_n
        /// storage formats, it is the *only* way to determine element size for
        /// the POINT_CLOUD_n formats.
        long element_size;

        /// Memory alignment modulo boundary, in bytes, of each <i>Block</i>
        /// element. A default setting of "0" defines a contiguous packed array
        /// of elements.
        long element_alignment;

        /// Memory alignment modulo boundary, in bytes, for the separate real
        /// and imaginary sub-arrays for a Block with a COMPLEX_SPLIT storage
        /// format. A default value of "0" indicates a contiguous, packed
        /// alignment, with the imaginary array immediately following (or
        /// preceding if created by a user) the real array in memory. This field
        /// can be used to force alignment of the beginning of the imaginary
        /// sub-array on a cache line or other efficient memory boundary, in
        /// effect adding unused padding bytes between the two separate
        /// sub-arrays. This field is meaningless for all storage formats except
        /// COMPLEX_SPLIT.
        long complex_split_alignment;
    }; //@top-level false

    /// @struct Data_Shape
    ///
    /// Basic struct type used to capture offset, size and stride parameters for
    /// a single View dimension. An array of these structs in effect defines the
    /// data shape of a multi-dimensional View. Units for all three parameters
    /// are element indices within a Block or View - not bytes. Actual byte
    /// offsets to indexable data elements are determined by multiple Block and
    /// View parameters.
    struct Data_Shape {

        /// Offset in units of Block-defined elements/indices (not bytes) from
        /// start of the parent data (Block or View) to the first element. Valid
        /// for all dimensions of a Sub-View, defining the element offset from
        /// the root of the parent View. Only valid for the first dimension of a
        /// full View, which defines the element offset from the start of a
        /// Block.
        /// 
        /// @par For example, for a Sub-View:
        /// @b Vector:
        /// - Offset to beginning individual element (column)
        /// @b Matrix:
        /// - If describing dimension #1: Offset to the beginning row
        /// - If describing dimension #2: Offset to the beginning column
        /// @b Tensor: 
        /// - If describing dimension #1: Offset to the beginning plane
        /// - If describing dimension #2: Offset to the beginning row
        /// - If describing dimension #3: Offset to the beginning column
        long long offset;

        /// Stride in units of Block-defined elements/indices (not bytes)
        /// between successive element spans of interest (each of length
        /// "size").  Stride defines the spacing between consecutive elements in
        /// reference to the parent.
        /// 
        /// @par For example:
        /// @b Vector:
        /// - Spacing between individual elements (columns)
        /// @b Matrix:
        /// - If describing dimension #1: Spacing between rows
        /// - If describing dimension #2: Spacing between columns
        /// @b Tensor:
        /// - If describing dimension #1: Spacing between planes
        /// - If describing dimension #2: Spacing between rows
        /// - If describing dimension #3: Spacing between columns
        long long stride;

        /// Size in units of consecutive Block-defined elements/indices (not
        /// bytes) of data of interest. Basically, the number of elements in
        /// each dimension of a View or Sub-View.
        /// 
        /// @par For example:
        /// @b Vector:
        /// - Number of individual elements (columns)
        /// @b Matrix: 
        /// - If describing dimension #1: Number of rows
        /// - If describing dimension #2: Number of columns
        /// @b Tensor: 
        /// - If describing dimension #1: Number of planes
        /// - If describing dimension #2: Number of rows
        /// - If describing dimension #3: Number of columns
        long long size;
    }; //@top-level false

    /// @typedef Data_Shape_Array
    ///
    /// Type defining an N dimensional array of Data_Shape structs for use in
    /// View and Sub-View definition.
    typedef Data_Shape Data_Shape_Array[MAX_DIMENSIONS];

    /// @struct View
    ///
    /// A "View" defines a way of describing, interpreting and easily accessing
    /// a parent Block of memory to support data-parallel processing or data
    /// movement operations. Each View may define single or multi-dimensional
    /// Block access such as a vector, matrix or tensor, with offset, stride and
    /// size parameters for each dimension.
    struct View {

        /// Number of dimensions defined for this View or Sub-View. Defines the
        /// number of valid entries in the following view_parameters array.
        /// Valid entries are 1 through MAX_DIMENSIONS. A value of "0" is
        /// invalid, and will result in defining a null view that will be
        /// ignored or throw an exception depending upon what you're trying to
        /// accomplish. A value of "1" defines a vector, a "2" defines a matrix
        /// and a "3" defines a tensor.
        long dimensions;

        /// Offset, stride and size parameters for each defined dimension of the
        /// View. For a normal View, only the offset in the first dimension is
        /// valid, defining the offset in Block/View elements from the start of
        /// the parent Block to the start of the first element in the View. For
        /// a Sub-View, all offsets are valid.  For more explanation, see the
        /// definition for the Data_Shape struct type.
        SAAT::Data_Shape_Array view_parameters;
    }; //@top-level false

    /// @struct BlockView_Descriptor
    ///
    /// Combined descriptor struct that fully defines a combined Block and
    /// associated View.
    struct BlockView_Descriptor {

        /// See Block definition.
        SAAT::Block block;

        /// See View definition.
        SAAT::View view;
    }; //@top-level false

    /// @struct BlockSubView_Descriptor
    ///
    /// Combined descriptor struct that fully defines a combined Block and
    /// associated View, plus a Sub-View of the parent View.
    struct BlockSubView_Descriptor {

        /// See Block definition.
        SAAT::Block block;

        /// See View definition.
        SAAT::View view;

        /// See View definition.
        SAAT::View subview;
    }; //@top-level false
};

#endif // CX_PORTS__SAAT_TYPES_DEFN_IDL

/// @}

