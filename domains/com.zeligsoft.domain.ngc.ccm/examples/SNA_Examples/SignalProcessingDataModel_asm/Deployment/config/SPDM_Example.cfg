# ============================================================================ #
#                               SPDM_Example.cfg                               #
# ============================================================================ #
#
# This is a configuration file for the SPDM (Signal Processing Data Model)
# example  which allows some of the parameters controlling how it is run to be
# changed without having to recompile the source code.  It is also an example
# of using the Config Parameter Access API.  For more complete coverage of this
# API, please refer to the CONFIG PARAMETER ACCESS API section of the SNA
# Developer's Guide.
#

SPDM_Example:
{
   dataDistributor:
   {
      sendDataTimer:
      {
         initialDelay = { secs = 10; microsecs = 0; };
         repeat       = { secs = 5; microsecs = 0; };
      };
      
      /*
       * The publishers in this example use this parameter to determine if the
       * contents of a message should be sent to the logger when the messages is
       * published.
       *
       * Setting this parameter to an integer value "n" will mean that every nth
       * published message will have its contents logged on the publisher's side
       * of the pub/sub relationship.  In other words, setting this to "n" will
       * result in published messages 1, (n + 1), (2n + 1), ... , (m*n +1), etc 
       * having their contents logged.  NOTE: as a result, setting this value to
       * "1" will result in ALL published messages being logged.  
       */
      sendDataLoggingModulo = 1;
   };
   dataCollector:
   {    
      /*
       * All subscribers in this example use this parameter to determine if the
       * contents of a message should be sent to the logger when the messages is
       * received.
       *
       * Setting this parameter to an integer value "n" will mean that every nth
       * received message will have its contents logged on the subscriber's side
       * of the pub/sub relationship.  In other words, setting this to "n" will
       * result in received messages 1, (n + 1), (2n + 1), ... , (m*n +1), etc 
       * having their contents logged.  NOTE: as a result, setting this value to
       * "1" will result in ALL received messages being logged.  
       */
      receiveMsgLoggingModulo = 1;
   };
   dataTransformer:
   {    
      /*
       * All subscribers in this example use this parameter to determine if the
       * contents of a message should be sent to the logger when the messages is
       * received.
       *
       * Setting this parameter to an integer value "n" will mean that every nth
       * received message will have its contents logged on the subscriber's side
       * of the pub/sub relationship.  In other words, setting this to "n" will
       * result in received messages 1, (n + 1), (2n + 1), ... , (m*n +1), etc 
       * having their contents logged.  NOTE: as a result, setting this value to
       * "1" will result in ALL received messages being logged.  
       */
      receiveMsgLoggingModulo = 1;
   };
};
