# ============================================================================ #
#                               PSAT_Example.cfg                               #
# ============================================================================ #
#
# This is a configuration file for the PSAT example  which allows some of the
# parameters controlling how it is run to be changed without having to
# recompile the source code.  It is also an example of using the
# Config Parameter Access API.  For more complete coverage of this API, please
# refer to the CONFIG PARAMETER ACCESS API section of the SNA Developer's
# Guide.
#

PSAT_Example:
{
   publisher:
   {
      sendMsgTimer:
      {
         initialDelay = { secs = 5; microsecs = 0; };
         repeat       = { secs = 5; microsecs = 0; };
      };
      
      /*
       * All publishers in this example use this parameter to determine if the
       * contents of a message should be sent to the logger when the messages is
       * published.
       *
       * Setting this parameter to an integer value "n" will mean that every nth
       * published message will have its contents logged on the publisher's side
       * of the pub/sub relationship.  In other words, setting this to "n" will
       * result in published messages 1, (n + 1), (2n + 1), ... , (m*n +1), etc 
       * having their contents logged.  NOTE: as a result, setting this value to
       * "1" will result in ALL published messages being logged.  
       */
      sendMsgLoggingModulo = 1;
   };
   subscriber:
   {      
      /*
       * All subscribers in this example use these parameters to determine if
       * the contents of a message should be sent to the logger when the
       * messages is received.
       *
       * The value of "receiveMsgLoggingModulo" determines at which received
       * message logging should start, and the value of 
       * "receiveMsgLoggingModuloExtent" determines how many consecutive 
       * received messages should be logged before logging is disabled again.
       *
       * For example, in the case where receiveMsgLoggingModulo is set to a
       * positive integer value "m" and receiveMsgLoggingModuloExtent is set to
       * a positive integer value "e", the following received messages will be
       * logged:
       *    1, 2, ..., e-1, e, m+1, m+2, ..., m+e-1, m+e, 2m+1,...
       * As a result, if the value of "m" is equal to the value of "e" then all
       * received messages will be logged.  
       *
       * For purposes of this example, "receiveMsgLoggingModuloExtent" should be
       * set to "2" for most use cases because there are 2 publishers from which
       * the subscribers will be receiving messages.  Therefore, in order to log
       * every other message from both publishers then receiveMsgLoggingModulo
       * should be set to 4 (or 2 * receiveMsgLoggingModuloExtent), if the
       * desired function is for every 3rd message to be logged from each
       * publisher than receiveMsgLoggingModulo should be set to 6 (or 3 *
       * receiveMsgLoggingModuloExtent), etc.  
       */
      receiveMsgLoggingModulo = 2;
      receiveMsgLoggingModuloExtent = 2;
   };
};
