/*******************************************************************************
 * Copyright (c) 2020 Northrop Grumman Systems Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.zeligsoft.ddk.zdl.zdlgen.provider;

import com.zeligsoft.ddk.zdl.zdlgen.util.ZDLGenAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ZDLGenItemProviderAdapterFactory extends ZDLGenAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ZDLGenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainConcept} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainConceptItemProvider genDomainConceptItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainConcept}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainConceptAdapter() {
		if (genDomainConceptItemProvider == null) {
			genDomainConceptItemProvider = new GenDomainConceptItemProvider(this);
		}

		return genDomainConceptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainGeneralizationItemProvider genDomainGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainGeneralizationAdapter() {
		if (genDomainGeneralizationItemProvider == null) {
			genDomainGeneralizationItemProvider = new GenDomainGeneralizationItemProvider(this);
		}

		return genDomainGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainBlockItemProvider genDomainBlockItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainBlockAdapter() {
		if (genDomainBlockItemProvider == null) {
			genDomainBlockItemProvider = new GenDomainBlockItemProvider(this);
		}

		return genDomainBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainAttributeItemProvider genDomainAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainAttributeAdapter() {
		if (genDomainAttributeItemProvider == null) {
			genDomainAttributeItemProvider = new GenDomainAttributeItemProvider(this);
		}

		return genDomainAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainDataTypeItemProvider genDomainDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainDataTypeAdapter() {
		if (genDomainDataTypeItemProvider == null) {
			genDomainDataTypeItemProvider = new GenDomainDataTypeItemProvider(this);
		}

		return genDomainDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenAttributeOverride} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenAttributeOverrideItemProvider genAttributeOverrideItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenAttributeOverride}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenAttributeOverrideAdapter() {
		if (genAttributeOverrideItemProvider == null) {
			genAttributeOverrideItemProvider = new GenAttributeOverrideItemProvider(this);
		}

		return genAttributeOverrideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenMenuItemProvider genMenuItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenMenuAdapter() {
		if (genMenuItemProvider == null) {
			genMenuItemProvider = new GenMenuItemProvider(this);
		}

		return genMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainBlockImportItemProvider genDomainBlockImportItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainBlockImportAdapter() {
		if (genDomainBlockImportItemProvider == null) {
			genDomainBlockImportItemProvider = new GenDomainBlockImportItemProvider(this);
		}

		return genDomainBlockImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockMerge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainBlockMergeItemProvider genDomainBlockMergeItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockMerge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainBlockMergeAdapter() {
		if (genDomainBlockMergeItemProvider == null) {
			genDomainBlockMergeItemProvider = new GenDomainBlockMergeItemProvider(this);
		}

		return genDomainBlockMergeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenPalette} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenPaletteItemProvider genPaletteItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenPalette}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenPaletteAdapter() {
		if (genPaletteItemProvider == null) {
			genPaletteItemProvider = new GenPaletteItemProvider(this);
		}

		return genPaletteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteDrawer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenPaletteDrawerItemProvider genPaletteDrawerItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteDrawer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenPaletteDrawerAdapter() {
		if (genPaletteDrawerItemProvider == null) {
			genPaletteDrawerItemProvider = new GenPaletteDrawerItemProvider(this);
		}

		return genPaletteDrawerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenMenuModelItemProvider genMenuModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenMenuModelAdapter() {
		if (genMenuModelItemProvider == null) {
			genMenuModelItemProvider = new GenMenuModelItemProvider(this);
		}

		return genMenuModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenUMLMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenUMLMenuItemProvider genUMLMenuItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenUMLMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenUMLMenuAdapter() {
		if (genUMLMenuItemProvider == null) {
			genUMLMenuItemProvider = new GenUMLMenuItemProvider(this);
		}

		return genUMLMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainBlockReferenceItemProvider genDomainBlockReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainBlockReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainBlockReferenceAdapter() {
		if (genDomainBlockReferenceItemProvider == null) {
			genDomainBlockReferenceItemProvider = new GenDomainBlockReferenceItemProvider(this);
		}

		return genDomainBlockReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainEnumItemProvider genDomainEnumItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainEnumAdapter() {
		if (genDomainEnumItemProvider == null) {
			genDomainEnumItemProvider = new GenDomainEnumItemProvider(this);
		}

		return genDomainEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainEnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainEnumLiteralItemProvider genDomainEnumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainEnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainEnumLiteralAdapter() {
		if (genDomainEnumLiteralItemProvider == null) {
			genDomainEnumLiteralItemProvider = new GenDomainEnumLiteralItemProvider(this);
		}

		return genDomainEnumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteCreationTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenPaletteCreationToolItemProvider genPaletteCreationToolItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteCreationTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenPaletteCreationToolAdapter() {
		if (genPaletteCreationToolItemProvider == null) {
			genPaletteCreationToolItemProvider = new GenPaletteCreationToolItemProvider(this);
		}

		return genPaletteCreationToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteStack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenPaletteStackItemProvider genPaletteStackItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenPaletteStack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenPaletteStackAdapter() {
		if (genPaletteStackItemProvider == null) {
			genPaletteStackItemProvider = new GenPaletteStackItemProvider(this);
		}

		return genPaletteStackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.OawExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OawExpressionItemProvider oawExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.OawExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOawExpressionAdapter() {
		if (oawExpressionItemProvider == null) {
			oawExpressionItemProvider = new OawExpressionItemProvider(this);
		}

		return oawExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.OawXtend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OawXtendItemProvider oawXtendItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.OawXtend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOawXtendAdapter() {
		if (oawXtendItemProvider == null) {
			oawXtendItemProvider = new OawXtendItemProvider(this);
		}

		return oawXtendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuDelegateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenMenuDelegateActionItemProvider genMenuDelegateActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuDelegateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenMenuDelegateActionAdapter() {
		if (genMenuDelegateActionItemProvider == null) {
			genMenuDelegateActionItemProvider = new GenMenuDelegateActionItemProvider(this);
		}

		return genMenuDelegateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuCreateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenMenuCreateActionItemProvider genMenuCreateActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuCreateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenMenuCreateActionAdapter() {
		if (genMenuCreateActionItemProvider == null) {
			genMenuCreateActionItemProvider = new GenMenuCreateActionItemProvider(this);
		}

		return genMenuCreateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuSeparator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenMenuSeparatorItemProvider genMenuSeparatorItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenMenuSeparator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenMenuSeparatorAdapter() {
		if (genMenuSeparatorItemProvider == null) {
			genMenuSeparatorItemProvider = new GenMenuSeparatorItemProvider(this);
		}

		return genMenuSeparatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainReferenceItemProvider genDomainReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainReferenceAdapter() {
		if (genDomainReferenceItemProvider == null) {
			genDomainReferenceItemProvider = new GenDomainReferenceItemProvider(this);
		}

		return genDomainReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainSpecialization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainSpecializationItemProvider genDomainSpecializationItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainSpecialization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainSpecializationAdapter() {
		if (genDomainSpecializationItemProvider == null) {
			genDomainSpecializationItemProvider = new GenDomainSpecializationItemProvider(this);
		}

		return genDomainSpecializationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModelLibraryReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainModelLibraryReferenceItemProvider genDomainModelLibraryReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModelLibraryReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainModelLibraryReferenceAdapter() {
		if (genDomainModelLibraryReferenceItemProvider == null) {
			genDomainModelLibraryReferenceItemProvider = new GenDomainModelLibraryReferenceItemProvider(this);
		}

		return genDomainModelLibraryReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModelLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainModelLibraryItemProvider genDomainModelLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModelLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainModelLibraryAdapter() {
		if (genDomainModelLibraryItemProvider == null) {
			genDomainModelLibraryItemProvider = new GenDomainModelLibraryItemProvider(this);
		}

		return genDomainModelLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainModelItemProvider genDomainModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainModelAdapter() {
		if (genDomainModelItemProvider == null) {
			genDomainModelItemProvider = new GenDomainModelItemProvider(this);
		}

		return genDomainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenModelItemProvider genModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenModelAdapter() {
		if (genModelItemProvider == null) {
			genModelItemProvider = new GenModelItemProvider(this);
		}

		return genModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenDomainPackageItemProvider genDomainPackageItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.ddk.zdl.zdlgen.GenDomainPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenDomainPackageAdapter() {
		if (genDomainPackageItemProvider == null) {
			genDomainPackageItemProvider = new GenDomainPackageItemProvider(this);
		}

		return genDomainPackageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (genModelItemProvider != null)
			genModelItemProvider.dispose();
		if (genDomainModelItemProvider != null)
			genDomainModelItemProvider.dispose();
		if (genDomainPackageItemProvider != null)
			genDomainPackageItemProvider.dispose();
		if (genPaletteItemProvider != null)
			genPaletteItemProvider.dispose();
		if (genPaletteDrawerItemProvider != null)
			genPaletteDrawerItemProvider.dispose();
		if (genMenuModelItemProvider != null)
			genMenuModelItemProvider.dispose();
		if (genUMLMenuItemProvider != null)
			genUMLMenuItemProvider.dispose();
		if (genMenuItemProvider != null)
			genMenuItemProvider.dispose();
		if (genDomainBlockItemProvider != null)
			genDomainBlockItemProvider.dispose();
		if (genDomainBlockImportItemProvider != null)
			genDomainBlockImportItemProvider.dispose();
		if (genDomainBlockMergeItemProvider != null)
			genDomainBlockMergeItemProvider.dispose();
		if (genDomainGeneralizationItemProvider != null)
			genDomainGeneralizationItemProvider.dispose();
		if (genDomainConceptItemProvider != null)
			genDomainConceptItemProvider.dispose();
		if (genDomainReferenceItemProvider != null)
			genDomainReferenceItemProvider.dispose();
		if (genDomainAttributeItemProvider != null)
			genDomainAttributeItemProvider.dispose();
		if (genDomainDataTypeItemProvider != null)
			genDomainDataTypeItemProvider.dispose();
		if (genAttributeOverrideItemProvider != null)
			genAttributeOverrideItemProvider.dispose();
		if (genDomainBlockReferenceItemProvider != null)
			genDomainBlockReferenceItemProvider.dispose();
		if (genDomainSpecializationItemProvider != null)
			genDomainSpecializationItemProvider.dispose();
		if (genDomainModelLibraryReferenceItemProvider != null)
			genDomainModelLibraryReferenceItemProvider.dispose();
		if (genDomainModelLibraryItemProvider != null)
			genDomainModelLibraryItemProvider.dispose();
		if (genDomainEnumItemProvider != null)
			genDomainEnumItemProvider.dispose();
		if (genDomainEnumLiteralItemProvider != null)
			genDomainEnumLiteralItemProvider.dispose();
		if (genPaletteCreationToolItemProvider != null)
			genPaletteCreationToolItemProvider.dispose();
		if (genPaletteStackItemProvider != null)
			genPaletteStackItemProvider.dispose();
		if (oawExpressionItemProvider != null)
			oawExpressionItemProvider.dispose();
		if (oawXtendItemProvider != null)
			oawXtendItemProvider.dispose();
		if (genMenuDelegateActionItemProvider != null)
			genMenuDelegateActionItemProvider.dispose();
		if (genMenuCreateActionItemProvider != null)
			genMenuCreateActionItemProvider.dispose();
		if (genMenuSeparatorItemProvider != null)
			genMenuSeparatorItemProvider.dispose();
	}

}
