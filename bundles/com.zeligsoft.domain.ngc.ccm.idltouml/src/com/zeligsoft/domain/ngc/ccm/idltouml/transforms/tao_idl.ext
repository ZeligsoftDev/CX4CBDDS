/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import CCM::CCM_Component;
import CCM::CCM_Core;
import CORBADomain::IDL;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::uml_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::ccm_utils;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::utils::tao_idl_utils;

extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::component_names;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::namespaces;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::session_component;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::component_context;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_component_einterface;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_interface;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_attribute;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_operation;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_provides;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_consumes;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_facet;
extension com::zeligsoft::domain::ngc::ccm::idltouml::transforms::visitor_inheritance_graph;

uml::Package tao_idl(CCMModel model, uml::Package newModel) :
	let ccmComponents = model.eAllContents.typeSelect(CCMComponent) :
	let corbaInterfaces = model.eAllContents.typeSelect(CORBAInterface) :
		newModel.setName(model.zdlAsPackage().name + "_impl") ->
		ccmComponents.visit_component(newModel) ->
		ccmComponents.visit_equivalent_interface_client(newModel) ->
		ccmComponents.visit_component__ciao_executor_facet(newModel) ->
		ccmComponents.add_component_context_class(newModel) ->
		corbaInterfaces.visit_interface(newModel) ->
		corbaInterfaces.visit_interface__equivalent_idl(newModel) ->
		newModel;
	
cached Void visit_component(CCMComponent node, uml::Package container) :
	let namespace_str = node.component_implementation_namespace() :
	let namespace = visit_namespace(namespace_str, container, node) :
		node.be_visitor_executor_exh(namespace, container) ->
		node.providesPorts().visit_facet(node, namespace);
		
create uml::Class be_visitor_executor_exh(CCMComponent node, uml::Package namespace, uml::Package root) : 
	namespace.packagedElement.add(this) ->
	this.setName(node.executor_impl_class_name()) ->
	this.general.add(node.component__ciao_executor(root)) ->
	/* TODO : need to add LocalObject as a general*/
	node.be_visitor_executor_exh_constructor(this, namespace) ->
	node.be_visitor_executor_exh_destructor(this, namespace) ->
	/* supported operations and attributes */
	node.realizedInterfaces().forAll(c|visit_inheritance_graph(node, c, this)) ->
	/* component attributes and port operations */
	node.ownedAttribute.visit_attribute(this) ->
	node.providesPorts().visit_provides(this) ->
	node.consumesPorts().visit_consumes(this) ->
	/* session component operations */
	this.operations_from_components_sessioncomponent(node) ->
	/* context attribute */
	node.be_visitor_executor_exh_context(this, root) ->
	this.createTrace(node, namespace, "be_visitor_executor_exh") ->
	this.addGeneratedTag() ->
	this;
	
create uml::Operation be_visitor_executor_exh_constructor(CCMComponent node, uml::Class container, uml::Package namespace) :
	container.ownedOperation.add(this) ->
	this.setName(node.executor_impl_class_name()) ->
	this.createTrace(node, namespace, "be_visitor_executor_exh_constructor") ->
	this.addGeneratedTag() ->
	this;
	
create uml::Operation be_visitor_executor_exh_destructor(CCMComponent node, uml::Class container, uml::Package namespace) :
	container.ownedOperation.add(this) ->
	this.setName("~" + node.executor_impl_class_name()) ->
	this.createTrace(node, namespace, "be_visitor_executor_exh_destructor") ->
	this.addGeneratedTag() ->
	this;
	
cached uml::Association be_visitor_executor_exh_context(CCMComponent node, uml::Class container, uml::Package pkg) :
	let ciao_context_ = container.createAssociation(true, aggregation_kind_composite(), "ciao_context_", 1, 1, component_context_var(node, pkg),false, aggregation_kind_none(), "", 1, 1) :
	ciao_context_.memberEnd.makePrivate() ->
	ciao_context_.createTrace(node, pkg, "be_visitor_executor_exh_context") ->
	ciao_context_.addGeneratedTag() ->
	ciao_context_;

