/*
 * generated by Xtext
 */
package com.zeligsoft.domain.omg.corba.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import com.zeligsoft.domain.omg.corba.dsl.services.IDLGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class IDLParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private IDLGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Specification_Group(this, this, 0, inst);
			case 1: return new Preproc_Alternatives(this, this, 1, inst);
			case 2: return new Preproc_Include_Alternatives(this, this, 2, inst);
			case 3: return new FileName_Group(this, this, 3, inst);
			case 4: return new Preproc_Ifdef_Group(this, this, 4, inst);
			case 5: return new Preproc_Ifndef_Group(this, this, 5, inst);
			case 6: return new Preproc_Undef_Group(this, this, 6, inst);
			case 7: return new Preproc_If_Group(this, this, 7, inst);
			case 8: return new Preproc_If_Compare_Group(this, this, 8, inst);
			case 9: return new Preproc_If_Val_ValueAssignment(this, this, 9, inst);
			case 10: return new Preproc_Else_Group(this, this, 10, inst);
			case 11: return new Preproc_Error_Group(this, this, 11, inst);
			case 12: return new Preproc_Define_Group(this, this, 12, inst);
			case 13: return new Preproc_Endif_Group(this, this, 13, inst);
			case 14: return new Preproc_Pragma_Alternatives(this, this, 14, inst);
			case 15: return new Preproc_Pragma_Prefix_Group(this, this, 15, inst);
			case 16: return new Preproc_Pragma_Conn_Type_Group(this, this, 16, inst);
			case 17: return new Preproc_Pragma_Ciao_Lem_Group(this, this, 17, inst);
			case 18: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_Group(this, this, 18, inst);
			case 19: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Group(this, this, 19, inst);
			case 20: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_Group(this, this, 20, inst);
			case 21: return new Preproc_Pragma_Ndds_Group(this, this, 21, inst);
			case 22: return new Preproc_Pragma_Component_Group(this, this, 22, inst);
			case 23: return new Preproc_Pragma_Home_Group(this, this, 23, inst);
			case 24: return new Preproc_Pragma_DDS4CCM_Impl_Group(this, this, 24, inst);
			case 25: return new Preproc_Pragma_Misc_Group(this, this, 25, inst);
			case 26: return new File_Marker_Group(this, this, 26, inst);
			case 27: return new Excluded_File_Marker_Group(this, this, 27, inst);
			case 28: return new Import_decl_Group(this, this, 28, inst);
			case 29: return new Definition_Alternatives(this, this, 29, inst);
			case 30: return new Module_Group(this, this, 30, inst);
			case 31: return new Interface_or_Forward_Decl_Alternatives(this, this, 31, inst);
			case 32: return new Interface_decl_Group(this, this, 32, inst);
			case 33: return new Forward_decl_Group(this, this, 33, inst);
			case 34: return new Interface_header_Group(this, this, 34, inst);
			case 35: return new InterfaceBody_Group(this, this, 35, inst);
			case 36: return new Export_Alternatives(this, this, 36, inst);
			case 37: return new AttrDecl_Alternatives(this, this, 37, inst);
			case 38: return new AttrSpec_Group(this, this, 38, inst);
			case 39: return new ReadOnlyAttrSpec_Group(this, this, 39, inst);
			case 40: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 40, inst);
			case 41: return new ExceptionList_Group(this, this, 41, inst);
			case 42: return new OpDecl_Group(this, this, 42, inst);
			case 43: return new OpTypeDecl_Alternatives(this, this, 43, inst);
			case 44: return new ParameterDecls_Group(this, this, 44, inst);
			case 45: return new ParamDcl_Group(this, this, 45, inst);
			case 46: return new ContextExpr_Group(this, this, 46, inst);
			case 47: return new ParamTypeSpec_Alternatives(this, this, 47, inst);
			case 48: return new ScopedName_Group(this, this, 48, inst);
			case 49: return new BaseTypeSpec_Alternatives(this, this, 49, inst);
			case 50: return new FloatingPtType_Alternatives(this, this, 50, inst);
			case 51: return new FloatType_Group(this, this, 51, inst);
			case 52: return new DoubleType_Group(this, this, 52, inst);
			case 53: return new LongDoubleType_Group(this, this, 53, inst);
			case 54: return new IntegerType_Alternatives(this, this, 54, inst);
			case 55: return new SignedInt_Alternatives(this, this, 55, inst);
			case 56: return new SignedShortInt_Group(this, this, 56, inst);
			case 57: return new SignedLongInt_Group(this, this, 57, inst);
			case 58: return new SignedLongLongInt_Group(this, this, 58, inst);
			case 59: return new UnsignedInt_Alternatives(this, this, 59, inst);
			case 60: return new UnsignedShortInt_Group(this, this, 60, inst);
			case 61: return new UnsignedLongInt_Group(this, this, 61, inst);
			case 62: return new UnsignedLongLongInt_Group(this, this, 62, inst);
			case 63: return new CharType_Group(this, this, 63, inst);
			case 64: return new WideCharType_Group(this, this, 64, inst);
			case 65: return new BooleanType_Group(this, this, 65, inst);
			case 66: return new OctetType_Group(this, this, 66, inst);
			case 67: return new AnyType_Group(this, this, 67, inst);
			case 68: return new ObjectType_Group(this, this, 68, inst);
			case 69: return new ValueBaseType_Group(this, this, 69, inst);
			case 70: return new StringType_Group(this, this, 70, inst);
			case 71: return new WideStringType_Group(this, this, 71, inst);
			case 72: return new ExceptDecl_Group(this, this, 72, inst);
			case 73: return new Member_Group(this, this, 73, inst);
			case 74: return new Declarator_Alternatives(this, this, 74, inst);
			case 75: return new SimpleDeclarator_IdAssignment(this, this, 75, inst);
			case 76: return new ComplexDeclarator_ArrayDeclaratorParserRuleCall(this, this, 76, inst);
			case 77: return new ArrayDeclarator_Group(this, this, 77, inst);
			case 78: return new StructType_Group(this, this, 78, inst);
			case 79: return new TypeDecl_Alternatives(this, this, 79, inst);
			case 80: return new TypeDeclarator_Group(this, this, 80, inst);
			case 81: return new TypeSpec_Alternatives(this, this, 81, inst);
			case 82: return new SimpleTypeSpec_Alternatives(this, this, 82, inst);
			case 83: return new TemplateTypeSpec_Alternatives(this, this, 83, inst);
			case 84: return new ConstrTypeSpec_Alternatives(this, this, 84, inst);
			case 85: return new UnionType_Group(this, this, 85, inst);
			case 86: return new SwitchTypeSpec_Alternatives(this, this, 86, inst);
			case 87: return new SwitchBody_CaseAssignment(this, this, 87, inst);
			case 88: return new Case_Group(this, this, 88, inst);
			case 89: return new CaseLabel_Alternatives(this, this, 89, inst);
			case 90: return new ElementSpec_Group(this, this, 90, inst);
			case 91: return new EnumType_Group(this, this, 91, inst);
			case 92: return new SequenceType_Group(this, this, 92, inst);
			case 93: return new NativeType_Group(this, this, 93, inst);
			case 94: return new FixedPtType_Group(this, this, 94, inst);
			case 95: return new ConstrForwardDecl_Alternatives(this, this, 95, inst);
			case 96: return new StructForwardDecl_Group(this, this, 96, inst);
			case 97: return new UnionForwardDecl_Group(this, this, 97, inst);
			case 98: return new PositiveIntConst_ExpAssignment(this, this, 98, inst);
			case 99: return new ConstDecl_Group(this, this, 99, inst);
			case 100: return new ConstType_Alternatives(this, this, 100, inst);
			case 101: return new FixedPtConstType_Group(this, this, 101, inst);
			case 102: return new ConstExp_OrExprParserRuleCall(this, this, 102, inst);
			case 103: return new OrExpr_Group(this, this, 103, inst);
			case 104: return new XOrExpr_Group(this, this, 104, inst);
			case 105: return new AndExpr_Group(this, this, 105, inst);
			case 106: return new ShiftExpr_Group(this, this, 106, inst);
			case 107: return new AddExpr_Group(this, this, 107, inst);
			case 108: return new MultExpr_Group(this, this, 108, inst);
			case 109: return new UnaryExpr_Group(this, this, 109, inst);
			case 110: return new PrimaryExpr_Alternatives(this, this, 110, inst);
			case 111: return new Literal_Alternatives(this, this, 111, inst);
			case 112: return new ComponentDecl_Group(this, this, 112, inst);
			case 113: return new ComponentExport_Alternatives(this, this, 113, inst);
			case 114: return new ProvidesDcl_Group(this, this, 114, inst);
			case 115: return new UsesDcl_Group(this, this, 115, inst);
			case 116: return new PublishesDcl_Group(this, this, 116, inst);
			case 117: return new EmitDcl_Group(this, this, 117, inst);
			case 118: return new ConsumesDcl_Group(this, this, 118, inst);
			case 119: return new ComponentForwardDecl_Group(this, this, 119, inst);
			case 120: return new HomeDecl_Group(this, this, 120, inst);
			case 121: return new PrimaryKeySpec_Group(this, this, 121, inst);
			case 122: return new HomeExport_Alternatives(this, this, 122, inst);
			case 123: return new FactoryDcl_Group(this, this, 123, inst);
			case 124: return new FinderDcl_Group(this, this, 124, inst);
			case 125: return new Event_Alternatives(this, this, 125, inst);
			case 126: return new EventDcl_Group(this, this, 126, inst);
			case 127: return new StateMember_Group(this, this, 127, inst);
			case 128: return new EventForwardDcl_Group(this, this, 128, inst);
			case 129: return new PortTypeDecl_Group(this, this, 129, inst);
			case 130: return new PortExport_Alternatives(this, this, 130, inst);
			case 131: return new PortDecl_Group(this, this, 131, inst);
			case 132: return new Connector_Group(this, this, 132, inst);
			case 133: return new ConnectorHeader_Group(this, this, 133, inst);
			case 134: return new ConnectorExport_Alternatives(this, this, 134, inst);
			case 135: return new TemplateModule_Group(this, this, 135, inst);
			case 136: return new FormalParameter_Group(this, this, 136, inst);
			case 137: return new FormalParameterType_Alternatives(this, this, 137, inst);
			case 138: return new TypenameParamType_Group(this, this, 138, inst);
			case 139: return new InterfaceParamType_Group(this, this, 139, inst);
			case 140: return new ValuetypeParamType_Group(this, this, 140, inst);
			case 141: return new EventParamType_Group(this, this, 141, inst);
			case 142: return new StructParamType_Group(this, this, 142, inst);
			case 143: return new UnionParamType_Group(this, this, 143, inst);
			case 144: return new ExceptionParamType_Group(this, this, 144, inst);
			case 145: return new EnumParamType_Group(this, this, 145, inst);
			case 146: return new SequenceParamType_Group(this, this, 146, inst);
			case 147: return new ConstParamType_Group(this, this, 147, inst);
			case 148: return new TemplateDefinition_Alternatives(this, this, 148, inst);
			case 149: return new FixedModule_Group(this, this, 149, inst);
			case 150: return new FixedDefinition_Alternatives(this, this, 150, inst);
			case 151: return new TemplateModuleInst_Group(this, this, 151, inst);
			case 152: return new ActualParameter_Alternatives(this, this, 152, inst);
			case 153: return new TemplateModuleRef_Group(this, this, 153, inst);
			case 154: return new IDLComment_BodyAssignment(this, this, 154, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Specification ****************
 *
 * Specification:
 * 	{Specification} imports+=Import_decl*
 * 	definitions+=Definition+;
 *
 **/

// {Specification} imports+=Import_decl* definitions+=Definition+
protected class Specification_Group extends GroupToken {
	
	public Specification_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpecificationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Specification_DefinitionsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpecificationAccess().getSpecificationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Specification}
protected class Specification_SpecificationAction_0 extends ActionToken  {

	public Specification_SpecificationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSpecificationAccess().getSpecificationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// imports+=Import_decl*
protected class Specification_ImportsAssignment_1 extends AssignmentToken  {
	
	public Specification_ImportsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecificationAccess().getImportsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_decl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImport_declRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSpecificationAccess().getImportsImport_declParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Specification_ImportsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Specification_SpecificationAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// definitions+=Definition+
protected class Specification_DefinitionsAssignment_2 extends AssignmentToken  {
	
	public Specification_DefinitionsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecificationAccess().getDefinitionsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSpecificationAccess().getDefinitionsDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Specification_DefinitionsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Specification_ImportsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Specification_SpecificationAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Specification ****************/


/************ begin Rule Preproc ****************
 *
 * Preproc:
 * 	Preproc_Include | Preproc_Ifdef | Preproc_Ifndef | Preproc_Undef | Preproc_If | Preproc_Else | Preproc_Error |
 * 	Preproc_Define | Preproc_Endif | Preproc_Pragma | File_Marker | Excluded_File_Marker;
 *
 **/

// Preproc_Include | Preproc_Ifdef | Preproc_Ifndef | Preproc_Undef | Preproc_If | Preproc_Else | Preproc_Error |
// Preproc_Define | Preproc_Endif | Preproc_Pragma | File_Marker | Excluded_File_Marker
protected class Preproc_Alternatives extends AlternativesToken {

	public Preproc_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPreprocAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Preproc_IncludeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_Preproc_IfdefParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Preproc_Preproc_IfndefParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Preproc_Preproc_UndefParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Preproc_Preproc_IfParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Preproc_Preproc_ElseParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Preproc_Preproc_ErrorParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Preproc_Preproc_DefineParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Preproc_Preproc_EndifParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Preproc_Preproc_PragmaParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Preproc_File_MarkerParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Preproc_Excluded_File_MarkerParserRuleCall_11(lastRuleCallOrigin, this, 11, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Preproc_Include
protected class Preproc_Preproc_IncludeParserRuleCall_0 extends RuleCallToken {
	
	public Preproc_Preproc_IncludeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_IncludeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Include_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Ifdef
protected class Preproc_Preproc_IfdefParserRuleCall_1 extends RuleCallToken {
	
	public Preproc_Preproc_IfdefParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_IfdefParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifdef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Ifdef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Ifndef
protected class Preproc_Preproc_IfndefParserRuleCall_2 extends RuleCallToken {
	
	public Preproc_Preproc_IfndefParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_IfndefParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifndef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Ifndef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Undef
protected class Preproc_Preproc_UndefParserRuleCall_3 extends RuleCallToken {
	
	public Preproc_Preproc_UndefParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_UndefParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Undef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Undef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_If
protected class Preproc_Preproc_IfParserRuleCall_4 extends RuleCallToken {
	
	public Preproc_Preproc_IfParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_IfParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_If_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Else
protected class Preproc_Preproc_ElseParserRuleCall_5 extends RuleCallToken {
	
	public Preproc_Preproc_ElseParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_ElseParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Else_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Else_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Error
protected class Preproc_Preproc_ErrorParserRuleCall_6 extends RuleCallToken {
	
	public Preproc_Preproc_ErrorParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_ErrorParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Error_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Error_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Define
protected class Preproc_Preproc_DefineParserRuleCall_7 extends RuleCallToken {
	
	public Preproc_Preproc_DefineParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_DefineParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Define_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Define_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Endif
protected class Preproc_Preproc_EndifParserRuleCall_8 extends RuleCallToken {
	
	public Preproc_Preproc_EndifParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_EndifParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Endif_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Endif_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma
protected class Preproc_Preproc_PragmaParserRuleCall_9 extends RuleCallToken {
	
	public Preproc_Preproc_PragmaParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getPreproc_PragmaParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// File_Marker
protected class Preproc_File_MarkerParserRuleCall_10 extends RuleCallToken {
	
	public Preproc_File_MarkerParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getFile_MarkerParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new File_Marker_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(File_Marker_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Excluded_File_Marker
protected class Preproc_Excluded_File_MarkerParserRuleCall_11 extends RuleCallToken {
	
	public Preproc_Excluded_File_MarkerParserRuleCall_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreprocAccess().getExcluded_File_MarkerParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Excluded_File_Marker_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Excluded_File_Marker_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Preproc ****************/


/************ begin Rule Preproc_Include ****************
 *
 * Preproc_Include:
 * 	"#include" "<" value=FileName ">" | "#include" strValue=STRING;
 *
 **/

// "#include" "<" value=FileName ">" | "#include" strValue=STRING
protected class Preproc_Include_Alternatives extends AlternativesToken {

	public Preproc_Include_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_Include_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#include" "<" value=FileName ">"
protected class Preproc_Include_Group_0 extends GroupToken {
	
	public Preproc_Include_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_GreaterThanSignKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#include"
protected class Preproc_Include_IncludeKeyword_0_0 extends KeywordToken  {
	
	public Preproc_Include_IncludeKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getIncludeKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<"
protected class Preproc_Include_LessThanSignKeyword_0_1 extends KeywordToken  {
	
	public Preproc_Include_LessThanSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getLessThanSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_IncludeKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=FileName
protected class Preproc_Include_ValueAssignment_0_2 extends AssignmentToken  {
	
	public Preproc_Include_ValueAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getValueAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FileName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_IncludeAccess().getValueFileNameParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Preproc_Include_LessThanSignKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class Preproc_Include_GreaterThanSignKeyword_0_3 extends KeywordToken  {
	
	public Preproc_Include_GreaterThanSignKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getGreaterThanSignKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_ValueAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "#include" strValue=STRING
protected class Preproc_Include_Group_1 extends GroupToken {
	
	public Preproc_Include_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_StrValueAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#include"
protected class Preproc_Include_IncludeKeyword_1_0 extends KeywordToken  {
	
	public Preproc_Include_IncludeKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getIncludeKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// strValue=STRING
protected class Preproc_Include_StrValueAssignment_1_1 extends AssignmentToken  {
	
	public Preproc_Include_StrValueAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IncludeAccess().getStrValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Include_IncludeKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("strValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_IncludeAccess().getStrValueSTRINGTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_IncludeAccess().getStrValueSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Preproc_Include ****************/


/************ begin Rule FileName ****************
 *
 * FileName:
 * 	name+=ID ("." name+=ID)*;
 *
 **/

// name+=ID ("." name+=ID)*
protected class FileName_Group extends GroupToken {
	
	public FileName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFileNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FileName_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FileName_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFileNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name+=ID
protected class FileName_NameAssignment_0 extends AssignmentToken  {
	
	public FileName_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFileNameAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFileNameAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFileNameAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("." name+=ID)*
protected class FileName_Group_1 extends GroupToken {
	
	public FileName_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFileNameAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FileName_NameAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "."
protected class FileName_FullStopKeyword_1_0 extends KeywordToken  {
	
	public FileName_FullStopKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFileNameAccess().getFullStopKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FileName_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FileName_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// name+=ID
protected class FileName_NameAssignment_1_1 extends AssignmentToken  {
	
	public FileName_NameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFileNameAccess().getNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FileName_FullStopKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFileNameAccess().getNameIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFileNameAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule FileName ****************/


/************ begin Rule Preproc_Ifdef ****************
 *
 * Preproc_Ifdef:
 * 	"#ifdef" value=ID;
 *
 **/

// "#ifdef" value=ID
protected class Preproc_Ifdef_Group extends GroupToken {
	
	public Preproc_Ifdef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_IfdefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifdef_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#ifdef"
protected class Preproc_Ifdef_IfdefKeyword_0 extends KeywordToken  {
	
	public Preproc_Ifdef_IfdefKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IfdefAccess().getIfdefKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=ID
protected class Preproc_Ifdef_ValueAssignment_1 extends AssignmentToken  {
	
	public Preproc_Ifdef_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IfdefAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifdef_IfdefKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_IfdefAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_IfdefAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Ifdef ****************/


/************ begin Rule Preproc_Ifndef ****************
 *
 * Preproc_Ifndef:
 * 	"#ifndef" value=ID;
 *
 **/

// "#ifndef" value=ID
protected class Preproc_Ifndef_Group extends GroupToken {
	
	public Preproc_Ifndef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_IfndefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifndef_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#ifndef"
protected class Preproc_Ifndef_IfndefKeyword_0 extends KeywordToken  {
	
	public Preproc_Ifndef_IfndefKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IfndefAccess().getIfndefKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=ID
protected class Preproc_Ifndef_ValueAssignment_1 extends AssignmentToken  {
	
	public Preproc_Ifndef_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IfndefAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Ifndef_IfndefKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_IfndefAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_IfndefAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Ifndef ****************/


/************ begin Rule Preproc_Undef ****************
 *
 * Preproc_Undef:
 * 	"#undef" value=ID;
 *
 **/

// "#undef" value=ID
protected class Preproc_Undef_Group extends GroupToken {
	
	public Preproc_Undef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_UndefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Undef_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#undef"
protected class Preproc_Undef_UndefKeyword_0 extends KeywordToken  {
	
	public Preproc_Undef_UndefKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_UndefAccess().getUndefKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=ID
protected class Preproc_Undef_ValueAssignment_1 extends AssignmentToken  {
	
	public Preproc_Undef_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_UndefAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Undef_UndefKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_UndefAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_UndefAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Undef ****************/


/************ begin Rule Preproc_If ****************
 *
 * Preproc_If:
 * 	("#if" | "#elif") negation?="!"? "defined"? value+=Preproc_If_Compare+;
 *
 **/

// ("#if" | "#elif") negation?="!"? "defined"? value+=Preproc_If_Compare+
protected class Preproc_If_Group extends GroupToken {
	
	public Preproc_If_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_IfAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#if" | "#elif"
protected class Preproc_If_Alternatives_0 extends AlternativesToken {

	public Preproc_If_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPreproc_IfAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_IfKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#if"
protected class Preproc_If_IfKeyword_0_0 extends KeywordToken  {
	
	public Preproc_If_IfKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_IfAccess().getIfKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


// negation?="!"?
protected class Preproc_If_NegationAssignment_1 extends AssignmentToken  {
	
	public Preproc_If_NegationAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IfAccess().getNegationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("negation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("negation");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_IfAccess().getNegationExclamationMarkKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// value+=Preproc_If_Compare+
protected class Preproc_If_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_If_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_IfAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreproc_If_CompareRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_IfAccess().getValuePreproc_If_CompareParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Preproc_If_ValueAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Preproc_If_NegationAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Preproc_If_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Preproc_If ****************/


/************ begin Rule Preproc_If_Compare ****************
 *
 * Preproc_If_Compare:
 * 	lhs=Preproc_If_Val ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*;
 *
 **/

// lhs=Preproc_If_Val ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*
protected class Preproc_If_Compare_Group extends GroupToken {
	
	public Preproc_If_Compare_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_If_CompareRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=Preproc_If_Val
protected class Preproc_If_Compare_LhsAssignment_0 extends AssignmentToken  {
	
	public Preproc_If_Compare_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Val_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreproc_If_ValRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_If_CompareAccess().getLhsPreproc_If_ValParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*
protected class Preproc_If_Compare_Group_1 extends GroupToken {
	
	public Preproc_If_Compare_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<="
protected class Preproc_If_Compare_Alternatives_1_0 extends AlternativesToken {

	public Preproc_If_Compare_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_OpAssignment_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_OpAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Preproc_If_Compare_OpAssignment_1_0_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Preproc_If_Compare_OpAssignment_1_0_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Preproc_If_Compare_OpAssignment_1_0_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Preproc_If_Compare_OpAssignment_1_0_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// op="=="
protected class Preproc_If_Compare_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// op="!="
protected class Preproc_If_Compare_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// op=">"
protected class Preproc_If_Compare_OpAssignment_1_0_2 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpGreaterThanSignKeyword_1_0_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpGreaterThanSignKeyword_1_0_2_0();
			return obj;
		}
		return null;
	}

}

// op="<"
protected class Preproc_If_Compare_OpAssignment_1_0_3 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpLessThanSignKeyword_1_0_3_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpLessThanSignKeyword_1_0_3_0();
			return obj;
		}
		return null;
	}

}

// op=">="
protected class Preproc_If_Compare_OpAssignment_1_0_4 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4_0();
			return obj;
		}
		return null;
	}

}

// op="<="
protected class Preproc_If_Compare_OpAssignment_1_0_5 extends AssignmentToken  {
	
	public Preproc_If_Compare_OpAssignment_1_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getOpAssignment_1_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Compare_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_If_Compare_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_If_CompareAccess().getOpLessThanSignEqualsSignKeyword_1_0_5_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPreproc_If_CompareAccess().getOpLessThanSignEqualsSignKeyword_1_0_5_0();
			return obj;
		}
		return null;
	}

}


// rhs=Preproc_If_Val
protected class Preproc_If_Compare_RhsAssignment_1_1 extends AssignmentToken  {
	
	public Preproc_If_Compare_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_CompareAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_If_Val_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreproc_If_ValRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_If_CompareAccess().getRhsPreproc_If_ValParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Preproc_If_Compare_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Preproc_If_Compare ****************/


/************ begin Rule Preproc_If_Val ****************
 *
 * Preproc_If_Val:
 * 	value=ConstExp;
 *
 **/

// value=ConstExp
protected class Preproc_If_Val_ValueAssignment extends AssignmentToken  {
	
	public Preproc_If_Val_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_If_ValAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_If_ValRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_If_ValAccess().getValueConstExpParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Preproc_If_Val ****************/


/************ begin Rule Preproc_Else ****************
 *
 * Preproc_Else:
 * 	{Preproc_Else}
 * 	"#else";
 *
 **/

// {Preproc_Else} "#else"
protected class Preproc_Else_Group extends GroupToken {
	
	public Preproc_Else_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_ElseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Else_ElseKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Preproc_Else}
protected class Preproc_Else_Preproc_ElseAction_0 extends ActionToken  {

	public Preproc_Else_Preproc_ElseAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "#else"
protected class Preproc_Else_ElseKeyword_1 extends KeywordToken  {
	
	public Preproc_Else_ElseKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_ElseAccess().getElseKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Else_Preproc_ElseAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Preproc_Else ****************/


/************ begin Rule Preproc_Error ****************
 *
 * Preproc_Error:
 * 	"#error" value=STRING;
 *
 **/

// "#error" value=STRING
protected class Preproc_Error_Group extends GroupToken {
	
	public Preproc_Error_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_ErrorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Error_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#error"
protected class Preproc_Error_ErrorKeyword_0 extends KeywordToken  {
	
	public Preproc_Error_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_ErrorAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class Preproc_Error_ValueAssignment_1 extends AssignmentToken  {
	
	public Preproc_Error_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_ErrorAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Error_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_ErrorAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_ErrorAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Error ****************/


/************ begin Rule Preproc_Define ****************
 *
 * Preproc_Define:
 * 	"#define " value=ID exp=ConstExp?;
 *
 **/

// "#define " value=ID exp=ConstExp?
protected class Preproc_Define_Group extends GroupToken {
	
	public Preproc_Define_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_DefineAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Define_ExpAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_Define_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#define "
protected class Preproc_Define_DefineKeyword_0 extends KeywordToken  {
	
	public Preproc_Define_DefineKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_DefineAccess().getDefineKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=ID
protected class Preproc_Define_ValueAssignment_1 extends AssignmentToken  {
	
	public Preproc_Define_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_DefineAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Define_DefineKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_DefineAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_DefineAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// exp=ConstExp?
protected class Preproc_Define_ExpAssignment_2 extends AssignmentToken  {
	
	public Preproc_Define_ExpAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_DefineAccess().getExpAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exp",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreproc_DefineAccess().getExpConstExpParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Preproc_Define_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Preproc_Define ****************/


/************ begin Rule Preproc_Endif ****************
 *
 * Preproc_Endif:
 * 	{Preproc_Endif}
 * 	"#endif";
 *
 **/

// {Preproc_Endif} "#endif"
protected class Preproc_Endif_Group extends GroupToken {
	
	public Preproc_Endif_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_EndifAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Endif_EndifKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Preproc_Endif}
protected class Preproc_Endif_Preproc_EndifAction_0 extends ActionToken  {

	public Preproc_Endif_Preproc_EndifAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "#endif"
protected class Preproc_Endif_EndifKeyword_1 extends KeywordToken  {
	
	public Preproc_Endif_EndifKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_EndifAccess().getEndifKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Endif_Preproc_EndifAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Preproc_Endif ****************/


/************ begin Rule Preproc_Pragma ****************
 *
 * Preproc_Pragma:
 * 	Preproc_Pragma_Prefix
 * 	| Preproc_Pragma_Conn_Type
 * 	| Preproc_Pragma_Ciao_Lem
 * 	| Preproc_Pragma_Ciao_Ami4ccm_Interface
 * 	| Preproc_Pragma_Ciao_Ami4ccm_Receptacle
 * 	| Preproc_Pragma_Ciao_Ami4ccm_Idl
 * 	| Preproc_Pragma_Ndds
 * 	| Preproc_Pragma_Component
 * 	| Preproc_Pragma_Home
 * 	| Preproc_Pragma_DDS4CCM_Impl
 * 	| Preproc_Pragma_Misc;
 *
 **/

// Preproc_Pragma_Prefix | Preproc_Pragma_Conn_Type | Preproc_Pragma_Ciao_Lem | Preproc_Pragma_Ciao_Ami4ccm_Interface |
// Preproc_Pragma_Ciao_Ami4ccm_Receptacle | Preproc_Pragma_Ciao_Ami4ccm_Idl | Preproc_Pragma_Ndds |
// Preproc_Pragma_Component | Preproc_Pragma_Home | Preproc_Pragma_DDS4CCM_Impl | Preproc_Pragma_Misc
protected class Preproc_Pragma_Alternatives extends AlternativesToken {

	public Preproc_Pragma_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Preproc_Pragma_PrefixParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Preproc_Pragma_Preproc_Pragma_Conn_TypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Preproc_Pragma_Preproc_Pragma_Ciao_LemParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Preproc_Pragma_Preproc_Pragma_NddsParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Preproc_Pragma_Preproc_Pragma_ComponentParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Preproc_Pragma_Preproc_Pragma_HomeParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Preproc_Pragma_Preproc_Pragma_DDS4CCM_ImplParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Preproc_Pragma_Preproc_Pragma_MiscParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Preproc_Pragma_Prefix
protected class Preproc_Pragma_Preproc_Pragma_PrefixParserRuleCall_0 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_PrefixParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_PrefixParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Prefix_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Prefix_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Conn_Type
protected class Preproc_Pragma_Preproc_Pragma_Conn_TypeParserRuleCall_1 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_Conn_TypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_Conn_TypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Conn_Type_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Conn_Type_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Ciao_Lem
protected class Preproc_Pragma_Preproc_Pragma_Ciao_LemParserRuleCall_2 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_Ciao_LemParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_Ciao_LemParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Lem_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Ciao_Lem_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Ciao_Ami4ccm_Interface
protected class Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Ciao_Ami4ccm_Interface_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Ciao_Ami4ccm_Receptacle
protected class Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Ciao_Ami4ccm_Idl
protected class Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Ciao_Ami4ccm_Idl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Ndds
protected class Preproc_Pragma_Preproc_Pragma_NddsParserRuleCall_6 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_NddsParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_NddsParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ndds_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Ndds_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Component
protected class Preproc_Pragma_Preproc_Pragma_ComponentParserRuleCall_7 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_ComponentParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_ComponentParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Component_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Component_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Home
protected class Preproc_Pragma_Preproc_Pragma_HomeParserRuleCall_8 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_HomeParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_HomeParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Home_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Home_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_DDS4CCM_Impl
protected class Preproc_Pragma_Preproc_Pragma_DDS4CCM_ImplParserRuleCall_9 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_DDS4CCM_ImplParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_DDS4CCM_ImplParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_DDS4CCM_Impl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_DDS4CCM_Impl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Preproc_Pragma_Misc
protected class Preproc_Pragma_Preproc_Pragma_MiscParserRuleCall_10 extends RuleCallToken {
	
	public Preproc_Pragma_Preproc_Pragma_MiscParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPreproc_PragmaAccess().getPreproc_Pragma_MiscParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Misc_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Pragma_Misc_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Preproc_Pragma ****************/


/************ begin Rule Preproc_Pragma_Prefix ****************
 *
 * Preproc_Pragma_Prefix:
 * 	"#pragma" "prefix" value=STRING;
 *
 **/

// "#pragma" "prefix" value=STRING
protected class Preproc_Pragma_Prefix_Group extends GroupToken {
	
	public Preproc_Pragma_Prefix_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_PrefixAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Prefix_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Prefix_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Prefix_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_PrefixAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "prefix"
protected class Preproc_Pragma_Prefix_PrefixKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Prefix_PrefixKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_PrefixAccess().getPrefixKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Prefix_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Prefix_ValueAssignment_2 extends AssignmentToken  {
	
	public Preproc_Pragma_Prefix_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_PrefixAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Prefix_PrefixKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_PrefixAccess().getValueSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_PrefixAccess().getValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Prefix ****************/


/************ begin Rule Preproc_Pragma_Conn_Type ****************
 *
 * Preproc_Pragma_Conn_Type:
 * 	"#pragma" "conntype" valuePort=ID ("::" ID)* valueConnType=ID;
 *
 **/

// "#pragma" "conntype" valuePort=ID ("::" ID)* valueConnType=ID
protected class Preproc_Pragma_Conn_Type_Group extends GroupToken {
	
	public Preproc_Pragma_Conn_Type_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Conn_Type_ValueConnTypeAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Conn_Type_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Conn_Type_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "conntype"
protected class Preproc_Pragma_Conn_Type_ConntypeKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Conn_Type_ConntypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getConntypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Conn_Type_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valuePort=ID
protected class Preproc_Pragma_Conn_Type_ValuePortAssignment_2 extends AssignmentToken  {
	
	public Preproc_Pragma_Conn_Type_ValuePortAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValuePortAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Conn_Type_ConntypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valuePort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valuePort");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValuePortIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValuePortIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// valueConnType=ID
protected class Preproc_Pragma_Conn_Type_ValueConnTypeAssignment_4 extends AssignmentToken  {
	
	public Preproc_Pragma_Conn_Type_ValueConnTypeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValueConnTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Conn_Type_ValuePortAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueConnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueConnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValueConnTypeIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Conn_TypeAccess().getValueConnTypeIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Conn_Type ****************/


/************ begin Rule Preproc_Pragma_Ciao_Lem ****************
 *
 * Preproc_Pragma_Ciao_Lem:
 * 	"#pragma" "ciao" "lem" value=STRING;
 *
 **/

// "#pragma" "ciao" "lem" value=STRING
protected class Preproc_Pragma_Ciao_Lem_Group extends GroupToken {
	
	public Preproc_Pragma_Ciao_Lem_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Lem_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Ciao_Lem_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Lem_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "ciao"
protected class Preproc_Pragma_Ciao_Lem_CiaoKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Lem_CiaoKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getCiaoKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Lem_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "lem"
protected class Preproc_Pragma_Ciao_Lem_LemKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Lem_LemKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getLemKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Lem_CiaoKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Ciao_Lem_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_Ciao_Lem_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Lem_LemKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Ciao_LemAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Ciao_Lem ****************/


/************ begin Rule Preproc_Pragma_Ciao_Ami4ccm_Interface ****************
 *
 * Preproc_Pragma_Ciao_Ami4ccm_Interface:
 * 	"#pragma" "ciao" "ami4ccm interface" value=STRING;
 *
 **/

// "#pragma" "ciao" "ami4ccm interface" value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Interface_Group extends GroupToken {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Interface_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Ciao_Ami4ccm_Interface_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Interface_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "ciao"
protected class Preproc_Pragma_Ciao_Ami4ccm_Interface_CiaoKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Interface_CiaoKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getCiaoKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ami4ccm interface"
protected class Preproc_Pragma_Ciao_Ami4ccm_Interface_Ami4ccmInterfaceKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Interface_Ami4ccmInterfaceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getAmi4ccmInterfaceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_CiaoKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Interface_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Interface_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Interface_Ami4ccmInterfaceKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Ciao_Ami4ccm_Interface ****************/


/************ begin Rule Preproc_Pragma_Ciao_Ami4ccm_Receptacle ****************
 *
 * Preproc_Pragma_Ciao_Ami4ccm_Receptacle:
 * 	"#pragma" "ciao" "ami4ccm receptacle" value=STRING;
 *
 **/

// "#pragma" "ciao" "ami4ccm receptacle" value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Group extends GroupToken {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Ciao_Ami4ccm_Receptacle_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Receptacle_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "ciao"
protected class Preproc_Pragma_Ciao_Ami4ccm_Receptacle_CiaoKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Receptacle_CiaoKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getCiaoKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ami4ccm receptacle"
protected class Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Ami4ccmReceptacleKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Ami4ccmReceptacleKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getAmi4ccmReceptacleKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_CiaoKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Receptacle_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Receptacle_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Receptacle_Ami4ccmReceptacleKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Ciao_Ami4ccm_Receptacle ****************/


/************ begin Rule Preproc_Pragma_Ciao_Ami4ccm_Idl ****************
 *
 * Preproc_Pragma_Ciao_Ami4ccm_Idl:
 * 	"#pragma" "ciao" "ami4ccm idl" value=STRING;
 *
 **/

// "#pragma" "ciao" "ami4ccm idl" value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Idl_Group extends GroupToken {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Idl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Ciao_Ami4ccm_Idl_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Idl_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "ciao"
protected class Preproc_Pragma_Ciao_Ami4ccm_Idl_CiaoKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Idl_CiaoKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getCiaoKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ami4ccm idl"
protected class Preproc_Pragma_Ciao_Ami4ccm_Idl_Ami4ccmIdlKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Idl_Ami4ccmIdlKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getAmi4ccmIdlKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_CiaoKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Ciao_Ami4ccm_Idl_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_Ciao_Ami4ccm_Idl_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ciao_Ami4ccm_Idl_Ami4ccmIdlKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Ciao_Ami4ccm_Idl ****************/


/************ begin Rule Preproc_Pragma_Ndds ****************
 *
 * Preproc_Pragma_Ndds:
 * 	"#pragma" "ndds" "typesupport" value=STRING;
 *
 **/

// "#pragma" "ndds" "typesupport" value=STRING
protected class Preproc_Pragma_Ndds_Group extends GroupToken {
	
	public Preproc_Pragma_Ndds_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_NddsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ndds_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Ndds_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Ndds_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_NddsAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "ndds"
protected class Preproc_Pragma_Ndds_NddsKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Ndds_NddsKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_NddsAccess().getNddsKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ndds_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "typesupport"
protected class Preproc_Pragma_Ndds_TypesupportKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_Ndds_TypesupportKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_NddsAccess().getTypesupportKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ndds_NddsKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Ndds_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_Ndds_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_NddsAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Ndds_TypesupportKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_NddsAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_NddsAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Ndds ****************/


/************ begin Rule Preproc_Pragma_Component ****************
 *
 * Preproc_Pragma_Component:
 * 	"#pragma" "componentInterface" value=STRING;
 *
 **/

// "#pragma" "componentInterface" value=STRING
protected class Preproc_Pragma_Component_Group extends GroupToken {
	
	public Preproc_Pragma_Component_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_ComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Component_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Component_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Component_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_ComponentAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "componentInterface"
protected class Preproc_Pragma_Component_ComponentInterfaceKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Component_ComponentInterfaceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_ComponentAccess().getComponentInterfaceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Component_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Component_ValueAssignment_2 extends AssignmentToken  {
	
	public Preproc_Pragma_Component_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_ComponentAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Component_ComponentInterfaceKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_ComponentAccess().getValueSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_ComponentAccess().getValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Component ****************/


/************ begin Rule Preproc_Pragma_Home ****************
 *
 * Preproc_Pragma_Home:
 * 	"#pragma" "componentHome" value=STRING;
 *
 **/

// "#pragma" "componentHome" value=STRING
protected class Preproc_Pragma_Home_Group extends GroupToken {
	
	public Preproc_Pragma_Home_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_HomeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Home_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_Home_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_Home_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_HomeAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "componentHome"
protected class Preproc_Pragma_Home_ComponentHomeKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Home_ComponentHomeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_HomeAccess().getComponentHomeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Home_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_Home_ValueAssignment_2 extends AssignmentToken  {
	
	public Preproc_Pragma_Home_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_HomeAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Home_ComponentHomeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_HomeAccess().getValueSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_HomeAccess().getValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_Home ****************/


/************ begin Rule Preproc_Pragma_DDS4CCM_Impl ****************
 *
 * Preproc_Pragma_DDS4CCM_Impl:
 * 	"#pragma" "dds4ccm" "impl" value=STRING;
 *
 **/

// "#pragma" "dds4ccm" "impl" value=STRING
protected class Preproc_Pragma_DDS4CCM_Impl_Group extends GroupToken {
	
	public Preproc_Pragma_DDS4CCM_Impl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_DDS4CCM_Impl_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#pragma"
protected class Preproc_Pragma_DDS4CCM_Impl_PragmaKeyword_0 extends KeywordToken  {
	
	public Preproc_Pragma_DDS4CCM_Impl_PragmaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getPragmaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "dds4ccm"
protected class Preproc_Pragma_DDS4CCM_Impl_Dds4ccmKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_DDS4CCM_Impl_Dds4ccmKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getDds4ccmKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_DDS4CCM_Impl_PragmaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "impl"
protected class Preproc_Pragma_DDS4CCM_Impl_ImplKeyword_2 extends KeywordToken  {
	
	public Preproc_Pragma_DDS4CCM_Impl_ImplKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getImplKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_DDS4CCM_Impl_Dds4ccmKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Preproc_Pragma_DDS4CCM_Impl_ValueAssignment_3 extends AssignmentToken  {
	
	public Preproc_Pragma_DDS4CCM_Impl_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_DDS4CCM_Impl_ImplKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getValueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPreproc_Pragma_DDS4CCM_ImplAccess().getValueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preproc_Pragma_DDS4CCM_Impl ****************/


/************ begin Rule Preproc_Pragma_Misc ****************
 *
 * Preproc_Pragma_Misc:
 * 	{Preproc_Pragma_Misc}
 * 	"#pragma" ("typesupport" | STRING | ID)*;
 *
 **/

// {Preproc_Pragma_Misc} "#pragma" ("typesupport" | STRING | ID)*
protected class Preproc_Pragma_Misc_Group extends GroupToken {
	
	public Preproc_Pragma_Misc_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_MiscAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Misc_PragmaKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Preproc_Pragma_Misc}
protected class Preproc_Pragma_Misc_Preproc_Pragma_MiscAction_0 extends ActionToken  {

	public Preproc_Pragma_Misc_Preproc_Pragma_MiscAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "#pragma"
protected class Preproc_Pragma_Misc_PragmaKeyword_1 extends KeywordToken  {
	
	public Preproc_Pragma_Misc_PragmaKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreproc_Pragma_MiscAccess().getPragmaKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Pragma_Misc_Preproc_Pragma_MiscAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Preproc_Pragma_Misc ****************/


/************ begin Rule File_Marker ****************
 *
 * File_Marker:
 * 	"#file" file=STRING;
 *
 **/

// "#file" file=STRING
protected class File_Marker_Group extends GroupToken {
	
	public File_Marker_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFile_MarkerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new File_Marker_FileAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#file"
protected class File_Marker_FileKeyword_0 extends KeywordToken  {
	
	public File_Marker_FileKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFile_MarkerAccess().getFileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// file=STRING
protected class File_Marker_FileAssignment_1 extends AssignmentToken  {
	
	public File_Marker_FileAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFile_MarkerAccess().getFileAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new File_Marker_FileKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("file",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("file");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFile_MarkerAccess().getFileSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFile_MarkerAccess().getFileSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule File_Marker ****************/


/************ begin Rule Excluded_File_Marker ****************
 *
 * Excluded_File_Marker:
 * 	"#excluded_file" file=STRING;
 *
 **/

// "#excluded_file" file=STRING
protected class Excluded_File_Marker_Group extends GroupToken {
	
	public Excluded_File_Marker_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExcluded_File_MarkerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Excluded_File_Marker_FileAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#excluded_file"
protected class Excluded_File_Marker_Excluded_fileKeyword_0 extends KeywordToken  {
	
	public Excluded_File_Marker_Excluded_fileKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExcluded_File_MarkerAccess().getExcluded_fileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// file=STRING
protected class Excluded_File_Marker_FileAssignment_1 extends AssignmentToken  {
	
	public Excluded_File_Marker_FileAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExcluded_File_MarkerAccess().getFileAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Excluded_File_Marker_Excluded_fileKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("file",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("file");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExcluded_File_MarkerAccess().getFileSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExcluded_File_MarkerAccess().getFileSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Excluded_File_Marker ****************/


/************ begin Rule Import_decl ****************
 *
 * Import_decl:
 * 	"import" imported_scope=STRING ";";
 *
 **/

// "import" imported_scope=STRING ";"
protected class Import_decl_Group extends GroupToken {
	
	public Import_decl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImport_declAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_decl_SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImport_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "import"
protected class Import_decl_ImportKeyword_0 extends KeywordToken  {
	
	public Import_decl_ImportKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImport_declAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// imported_scope=STRING
protected class Import_decl_Imported_scopeAssignment_1 extends AssignmentToken  {
	
	public Import_decl_Imported_scopeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImport_declAccess().getImported_scopeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_decl_ImportKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imported_scope",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imported_scope");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getImport_declAccess().getImported_scopeSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getImport_declAccess().getImported_scopeSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Import_decl_SemicolonKeyword_2 extends KeywordToken  {
	
	public Import_decl_SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImport_declAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_decl_Imported_scopeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Import_decl ****************/


/************ begin Rule Definition ****************
 *
 * Definition:
 * 	Interface_or_Forward_Decl ";"
 * 	| ComponentForwardDecl ";"
 * 	| ConstDecl ";"
 * 	| Module ";"
 * 	| ExceptDecl ";"
 * 	| StructType ";"
 * 	| TypeDecl ";"
 * 	| NativeType ";"
 * 	| Preproc
 * 	// IDL3
 * 	| Event ";"
 * 	| ComponentDecl ";"
 * 	| HomeDecl ";"
 * 	// DDS4CCM
 * 	| PortTypeDecl ";"
 * 	| Connector ";"
 * 	| TemplateModule ";"
 * 	| TemplateModuleInst ";"
 * 	| IDLComment;
 *
 **/

// Interface_or_Forward_Decl ";" | ComponentForwardDecl ";" | ConstDecl ";" | Module ";" | ExceptDecl ";" | StructType ";"
// | TypeDecl ";" | NativeType ";" | Preproc // IDL3
// | Event ";" | ComponentDecl ";" | HomeDecl ";" // DDS4CCM
// | PortTypeDecl ";" | Connector ";" | TemplateModule ";" | TemplateModuleInst ";" | IDLComment
protected class Definition_Alternatives extends AlternativesToken {

	public Definition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Definition_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Definition_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Definition_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Definition_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Definition_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Definition_Group_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Definition_Group_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Definition_PreprocParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Definition_Group_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Definition_Group_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Definition_Group_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Definition_Group_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Definition_Group_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Definition_Group_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Definition_Group_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Definition_IDLCommentParserRuleCall_16(lastRuleCallOrigin, this, 16, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComponentForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForward_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getModuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTemplateModuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTemplateModuleInstRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Interface_or_Forward_Decl ";"
protected class Definition_Group_0 extends GroupToken {
	
	public Definition_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForward_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Interface_or_Forward_Decl
protected class Definition_Interface_or_Forward_DeclParserRuleCall_0_0 extends RuleCallToken {
	
	public Definition_Interface_or_Forward_DeclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getInterface_or_Forward_DeclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_or_Forward_Decl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Interface_or_Forward_Decl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_Interface_or_Forward_DeclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ComponentForwardDecl ";"
protected class Definition_Group_1 extends GroupToken {
	
	public Definition_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentForwardDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComponentForwardDecl
protected class Definition_ComponentForwardDeclParserRuleCall_1_0 extends RuleCallToken {
	
	public Definition_ComponentForwardDeclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getComponentForwardDeclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentForwardDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComponentForwardDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ComponentForwardDeclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConstDecl ";"
protected class Definition_Group_2 extends GroupToken {
	
	public Definition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstDecl
protected class Definition_ConstDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public Definition_ConstDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getConstDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ConstDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Module ";"
protected class Definition_Group_3 extends GroupToken {
	
	public Definition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Module
protected class Definition_ModuleParserRuleCall_3_0 extends RuleCallToken {
	
	public Definition_ModuleParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getModuleParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Module_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ModuleParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ExceptDecl ";"
protected class Definition_Group_4 extends GroupToken {
	
	public Definition_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExceptDecl
protected class Definition_ExceptDeclParserRuleCall_4_0 extends RuleCallToken {
	
	public Definition_ExceptDeclParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getExceptDeclParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExceptDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ExceptDeclParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// StructType ";"
protected class Definition_Group_5 extends GroupToken {
	
	public Definition_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructType
protected class Definition_StructTypeParserRuleCall_5_0 extends RuleCallToken {
	
	public Definition_StructTypeParserRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getStructTypeParserRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(StructType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_5_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_StructTypeParserRuleCall_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TypeDecl ";"
protected class Definition_Group_6 extends GroupToken {
	
	public Definition_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl
protected class Definition_TypeDeclParserRuleCall_6_0 extends RuleCallToken {
	
	public Definition_TypeDeclParserRuleCall_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getTypeDeclParserRuleCall_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TypeDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_TypeDeclParserRuleCall_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// NativeType ";"
protected class Definition_Group_7 extends GroupToken {
	
	public Definition_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NativeType
protected class Definition_NativeTypeParserRuleCall_7_0 extends RuleCallToken {
	
	public Definition_NativeTypeParserRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getNativeTypeParserRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NativeType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_7_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_NativeTypeParserRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Preproc
protected class Definition_PreprocParserRuleCall_8 extends RuleCallToken {
	
	public Definition_PreprocParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getPreprocParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Event ";"
protected class Definition_Group_9 extends GroupToken {
	
	public Definition_Group_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Event
protected class Definition_EventParserRuleCall_9_0 extends RuleCallToken {
	
	public Definition_EventParserRuleCall_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getEventParserRuleCall_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Event_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_9_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_EventParserRuleCall_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ComponentDecl ";"
protected class Definition_Group_10 extends GroupToken {
	
	public Definition_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_10_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComponentDecl
protected class Definition_ComponentDeclParserRuleCall_10_0 extends RuleCallToken {
	
	public Definition_ComponentDeclParserRuleCall_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getComponentDeclParserRuleCall_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComponentDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_10_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ComponentDeclParserRuleCall_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// HomeDecl ";"
protected class Definition_Group_11 extends GroupToken {
	
	public Definition_Group_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_11_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// HomeDecl
protected class Definition_HomeDeclParserRuleCall_11_0 extends RuleCallToken {
	
	public Definition_HomeDeclParserRuleCall_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getHomeDeclParserRuleCall_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(HomeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_11_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_HomeDeclParserRuleCall_11_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PortTypeDecl ";"
protected class Definition_Group_12 extends GroupToken {
	
	public Definition_Group_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_12_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PortTypeDecl
protected class Definition_PortTypeDeclParserRuleCall_12_0 extends RuleCallToken {
	
	public Definition_PortTypeDeclParserRuleCall_12_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getPortTypeDeclParserRuleCall_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PortTypeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_12_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_12_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_PortTypeDeclParserRuleCall_12_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Connector ";"
protected class Definition_Group_13 extends GroupToken {
	
	public Definition_Group_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_13_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Connector
protected class Definition_ConnectorParserRuleCall_13_0 extends RuleCallToken {
	
	public Definition_ConnectorParserRuleCall_13_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getConnectorParserRuleCall_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Connector_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_13_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_13_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ConnectorParserRuleCall_13_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TemplateModule ";"
protected class Definition_Group_14 extends GroupToken {
	
	public Definition_Group_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_14_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TemplateModule
protected class Definition_TemplateModuleParserRuleCall_14_0 extends RuleCallToken {
	
	public Definition_TemplateModuleParserRuleCall_14_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getTemplateModuleParserRuleCall_14_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TemplateModule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_14_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_14_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_14_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_TemplateModuleParserRuleCall_14_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TemplateModuleInst ";"
protected class Definition_Group_15 extends GroupToken {
	
	public Definition_Group_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_SemicolonKeyword_15_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleInstRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TemplateModuleInst
protected class Definition_TemplateModuleInstParserRuleCall_15_0 extends RuleCallToken {
	
	public Definition_TemplateModuleInstParserRuleCall_15_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getTemplateModuleInstParserRuleCall_15_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TemplateModuleInst_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Definition_SemicolonKeyword_15_1 extends KeywordToken  {
	
	public Definition_SemicolonKeyword_15_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getSemicolonKeyword_15_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_TemplateModuleInstParserRuleCall_15_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// IDLComment
protected class Definition_IDLCommentParserRuleCall_16 extends RuleCallToken {
	
	public Definition_IDLCommentParserRuleCall_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getIDLCommentParserRuleCall_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Definition ****************/


/************ begin Rule Module ****************
 *
 * Module:
 * 	"module" name=ID comments+=IDLComment* "{" definitions+=Definition* "}";
 *
 **/

// "module" name=ID comments+=IDLComment* "{" definitions+=Definition* "}"
protected class Module_Group extends GroupToken {
	
	public Module_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "module"
protected class Module_ModuleKeyword_0 extends KeywordToken  {
	
	public Module_ModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Module_NameAssignment_1 extends AssignmentToken  {
	
	public Module_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_ModuleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class Module_CommentsAssignment_2 extends AssignmentToken  {
	
	public Module_CommentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getCommentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getCommentsIDLCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Module_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Module_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Module_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_CommentsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Module_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// definitions+=Definition*
protected class Module_DefinitionsAssignment_4 extends AssignmentToken  {
	
	public Module_DefinitionsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getDefinitionsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getDefinitionsDefinitionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_DefinitionsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Module_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Module_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Module_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_DefinitionsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Module_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Module ****************/


/************ begin Rule Interface_or_Forward_Decl ****************
 *
 * Interface_or_Forward_Decl:
 * 	Interface_decl
 * 	| Forward_decl;
 *
 **/

// Interface_decl | Forward_decl
protected class Interface_or_Forward_Decl_Alternatives extends AlternativesToken {

	public Interface_or_Forward_Decl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInterface_or_Forward_DeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_or_Forward_Decl_Interface_declParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Interface_or_Forward_Decl_Forward_declParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForward_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Interface_decl
protected class Interface_or_Forward_Decl_Interface_declParserRuleCall_0 extends RuleCallToken {
	
	public Interface_or_Forward_Decl_Interface_declParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInterface_or_Forward_DeclAccess().getInterface_declParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Interface_decl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Forward_decl
protected class Interface_or_Forward_Decl_Forward_declParserRuleCall_1 extends RuleCallToken {
	
	public Interface_or_Forward_Decl_Forward_declParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInterface_or_Forward_DeclAccess().getForward_declParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Forward_decl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForward_declRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Forward_decl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Interface_or_Forward_Decl ****************/


/************ begin Rule Interface_decl ****************
 *
 * Interface_decl:
 * 	header=Interface_header "{" interfaceBody=InterfaceBody "}";
 *
 **/

// header=Interface_header "{" interfaceBody=InterfaceBody "}"
protected class Interface_decl_Group extends GroupToken {
	
	public Interface_decl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterface_declAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// header=Interface_header
protected class Interface_decl_HeaderAssignment_0 extends AssignmentToken  {
	
	public Interface_decl_HeaderAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_declAccess().getHeaderAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("header",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("header");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInterface_headerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_declAccess().getHeaderInterface_headerParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "{"
protected class Interface_decl_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Interface_decl_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterface_declAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_HeaderAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// interfaceBody=InterfaceBody
protected class Interface_decl_InterfaceBodyAssignment_2 extends AssignmentToken  {
	
	public Interface_decl_InterfaceBodyAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_declAccess().getInterfaceBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("interfaceBody",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("interfaceBody");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInterfaceBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_declAccess().getInterfaceBodyInterfaceBodyParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Interface_decl_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Interface_decl_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Interface_decl_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterface_declAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_InterfaceBodyAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Interface_decl ****************/


/************ begin Rule Forward_decl ****************
 *
 * Forward_decl:
 * 	("abstract" | "local")? "interface" name=ID;
 *
 **/

// ("abstract" | "local")? "interface" name=ID
protected class Forward_decl_Group extends GroupToken {
	
	public Forward_decl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForward_declAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Forward_decl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForward_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "interface"
protected class Forward_decl_InterfaceKeyword_1 extends KeywordToken  {
	
	public Forward_decl_InterfaceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForward_declAccess().getInterfaceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Forward_decl_NameAssignment_2 extends AssignmentToken  {
	
	public Forward_decl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForward_declAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Forward_decl_InterfaceKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getForward_declAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getForward_declAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Forward_decl ****************/


/************ begin Rule Interface_header ****************
 *
 * Interface_header:
 * 	(isAbstract?="abstract" | isLocal?="local")? "interface" name=ID (":" specializes+=ScopedName (","
 * 	comments+=IDLComment* specializes+=ScopedName)*)? comments+=IDLComment*;
 *
 **/

// (isAbstract?="abstract" | isLocal?="local")? "interface" name=ID (":" specializes+=ScopedName ("," comments+=IDLComment*
// specializes+=ScopedName)*)? comments+=IDLComment*
protected class Interface_header_Group extends GroupToken {
	
	public Interface_header_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_CommentsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Interface_header_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Interface_header_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterface_headerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (isAbstract?="abstract" | isLocal?="local")?
protected class Interface_header_Alternatives_0 extends AlternativesToken {

	public Interface_header_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_IsAbstractAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Interface_header_IsLocalAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isAbstract?="abstract"
protected class Interface_header_IsAbstractAssignment_0_0 extends AssignmentToken  {
	
	public Interface_header_IsAbstractAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getIsAbstractAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isAbstract",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInterface_headerAccess().getIsAbstractAbstractKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// isLocal?="local"
protected class Interface_header_IsLocalAssignment_0_1 extends AssignmentToken  {
	
	public Interface_header_IsLocalAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getIsLocalAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isLocal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isLocal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInterface_headerAccess().getIsLocalLocalKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "interface"
protected class Interface_header_InterfaceKeyword_1 extends KeywordToken  {
	
	public Interface_header_InterfaceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getInterfaceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class Interface_header_NameAssignment_2 extends AssignmentToken  {
	
	public Interface_header_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_InterfaceKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInterface_headerAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInterface_headerAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" specializes+=ScopedName ("," comments+=IDLComment* specializes+=ScopedName)*)?
protected class Interface_header_Group_3 extends GroupToken {
	
	public Interface_header_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_Group_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Interface_header_SpecializesAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ":"
protected class Interface_header_ColonKeyword_3_0 extends KeywordToken  {
	
	public Interface_header_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// specializes+=ScopedName
protected class Interface_header_SpecializesAssignment_3_1 extends AssignmentToken  {
	
	public Interface_header_SpecializesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getSpecializesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("specializes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("specializes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_headerAccess().getSpecializesScopedNameParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Interface_header_ColonKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," comments+=IDLComment* specializes+=ScopedName)*
protected class Interface_header_Group_3_2 extends GroupToken {
	
	public Interface_header_Group_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_SpecializesAssignment_3_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Interface_header_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Interface_header_CommaKeyword_3_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getCommaKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_header_Group_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Interface_header_SpecializesAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class Interface_header_CommentsAssignment_3_2_1 extends AssignmentToken  {
	
	public Interface_header_CommentsAssignment_3_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getCommentsAssignment_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_headerAccess().getCommentsIDLCommentParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Interface_header_CommentsAssignment_3_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Interface_header_CommaKeyword_3_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// specializes+=ScopedName
protected class Interface_header_SpecializesAssignment_3_2_2 extends AssignmentToken  {
	
	public Interface_header_SpecializesAssignment_3_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getSpecializesAssignment_3_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("specializes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("specializes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_headerAccess().getSpecializesScopedNameParserRuleCall_3_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Interface_header_CommentsAssignment_3_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Interface_header_CommaKeyword_3_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// comments+=IDLComment*
protected class Interface_header_CommentsAssignment_4 extends AssignmentToken  {
	
	public Interface_header_CommentsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterface_headerAccess().getCommentsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterface_headerAccess().getCommentsIDLCommentParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Interface_header_CommentsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Interface_header_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Interface_header_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Interface_header ****************/


/************ begin Rule InterfaceBody ****************
 *
 * InterfaceBody:
 * 	{InterfaceBody} export+=Export*;
 *
 **/

// {InterfaceBody} export+=Export*
protected class InterfaceBody_Group extends GroupToken {
	
	public InterfaceBody_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceBodyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceBody_ExportAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceBody_InterfaceBodyAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceBodyAccess().getInterfaceBodyAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InterfaceBody}
protected class InterfaceBody_InterfaceBodyAction_0 extends ActionToken  {

	public InterfaceBody_InterfaceBodyAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInterfaceBodyAccess().getInterfaceBodyAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// export+=Export*
protected class InterfaceBody_ExportAssignment_1 extends AssignmentToken  {
	
	public InterfaceBody_ExportAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceBodyAccess().getExportAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("export",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("export");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceBodyAccess().getExportExportParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceBody_ExportAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InterfaceBody_InterfaceBodyAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule InterfaceBody ****************/


/************ begin Rule Export ****************
 *
 * Export:
 * 	AttrDecl ";"
 * 	| OpDecl ";"
 * 	| TypeDecl ";"
 * 	| ConstDecl ";"
 * 	| ExceptDecl ";"
 * 	| Preproc
 * 	| IDLComment;
 *
 **/

// AttrDecl ";" | OpDecl ";" | TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Preproc | IDLComment
protected class Export_Alternatives extends AlternativesToken {

	public Export_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExportAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Export_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Export_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Export_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Export_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Export_PreprocParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Export_IDLCommentParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrDecl ";"
protected class Export_Group_0 extends GroupToken {
	
	public Export_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrDecl
protected class Export_AttrDeclParserRuleCall_0_0 extends RuleCallToken {
	
	public Export_AttrDeclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getAttrDeclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AttrDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Export_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public Export_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_AttrDeclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// OpDecl ";"
protected class Export_Group_1 extends GroupToken {
	
	public Export_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OpDecl
protected class Export_OpDeclParserRuleCall_1_0 extends RuleCallToken {
	
	public Export_OpDeclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getOpDeclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(OpDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Export_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public Export_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_OpDeclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TypeDecl ";"
protected class Export_Group_2 extends GroupToken {
	
	public Export_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl
protected class Export_TypeDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public Export_TypeDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getTypeDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TypeDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Export_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public Export_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_TypeDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConstDecl ";"
protected class Export_Group_3 extends GroupToken {
	
	public Export_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstDecl
protected class Export_ConstDeclParserRuleCall_3_0 extends RuleCallToken {
	
	public Export_ConstDeclParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getConstDeclParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Export_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public Export_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_ConstDeclParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ExceptDecl ";"
protected class Export_Group_4 extends GroupToken {
	
	public Export_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_SemicolonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExceptDecl
protected class Export_ExceptDeclParserRuleCall_4_0 extends RuleCallToken {
	
	public Export_ExceptDeclParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getExceptDeclParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExceptDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class Export_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public Export_SemicolonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_ExceptDeclParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Preproc
protected class Export_PreprocParserRuleCall_5 extends RuleCallToken {
	
	public Export_PreprocParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getPreprocParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IDLComment
protected class Export_IDLCommentParserRuleCall_6 extends RuleCallToken {
	
	public Export_IDLCommentParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExportAccess().getIDLCommentParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Export ****************/


/************ begin Rule AttrDecl ****************
 *
 * AttrDecl:
 * 	AttrSpec | ReadOnlyAttrSpec;
 *
 **/

// AttrSpec | ReadOnlyAttrSpec
protected class AttrDecl_Alternatives extends AlternativesToken {

	public AttrDecl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttrDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrDecl_AttrSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrDecl_ReadOnlyAttrSpecParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrSpec
protected class AttrDecl_AttrSpecParserRuleCall_0 extends RuleCallToken {
	
	public AttrDecl_AttrSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttrDeclAccess().getAttrSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AttrSpec_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReadOnlyAttrSpec
protected class AttrDecl_ReadOnlyAttrSpecParserRuleCall_1 extends RuleCallToken {
	
	public AttrDecl_ReadOnlyAttrSpecParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttrDeclAccess().getReadOnlyAttrSpecParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReadOnlyAttrSpec_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AttrDecl ****************/


/************ begin Rule AttrSpec ****************
 *
 * AttrSpec:
 * 	comments+=IDLComment* "attribute" type=ParamTypeSpec names+=ID (("getraises" getRaises=AttrRaisesExpr | "setraises"
 * 	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? (("getraises" getRaises=AttrRaisesExpr | "setraises"
 * 	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? comments+=IDLComment*;
 *
 **/

// comments+=IDLComment* "attribute" type=ParamTypeSpec names+=ID (("getraises" getRaises=AttrRaisesExpr | "setraises"
// setRaises=AttrRaisesExpr) | ("," names+=ID)*)? (("getraises" getRaises=AttrRaisesExpr | "setraises"
// setRaises=AttrRaisesExpr) | ("," names+=ID)*)? comments+=IDLComment*
protected class AttrSpec_Group extends GroupToken {
	
	public AttrSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_CommentsAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AttrSpec_Alternatives_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class AttrSpec_CommentsAssignment_0 extends AssignmentToken  {
	
	public AttrSpec_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "attribute"
protected class AttrSpec_AttributeKeyword_1 extends KeywordToken  {
	
	public AttrSpec_AttributeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getAttributeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// type=ParamTypeSpec
protected class AttrSpec_TypeAssignment_2 extends AssignmentToken  {
	
	public AttrSpec_TypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getTypeParamTypeSpecParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_AttributeKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// names+=ID
protected class AttrSpec_NamesAssignment_3 extends AssignmentToken  {
	
	public AttrSpec_NamesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getNamesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_TypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// (("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr) | ("," names+=ID)*)?
protected class AttrSpec_Alternatives_4 extends AlternativesToken {

	public AttrSpec_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Alternatives_4_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Group_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr)
protected class AttrSpec_Alternatives_4_0 extends AlternativesToken {

	public AttrSpec_Alternatives_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getAlternatives_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Group_4_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Group_4_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "getraises" getRaises=AttrRaisesExpr
protected class AttrSpec_Group_4_0_0 extends GroupToken {
	
	public AttrSpec_Group_4_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_4_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_GetRaisesAssignment_4_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "getraises"
protected class AttrSpec_GetraisesKeyword_4_0_0_0 extends KeywordToken  {
	
	public AttrSpec_GetraisesKeyword_4_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGetraisesKeyword_4_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// getRaises=AttrRaisesExpr
protected class AttrSpec_GetRaisesAssignment_4_0_0_1 extends AssignmentToken  {
	
	public AttrSpec_GetRaisesAssignment_4_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGetRaisesAssignment_4_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getRaises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getRaises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getGetRaisesAttrRaisesExprParserRuleCall_4_0_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_GetraisesKeyword_4_0_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "setraises" setRaises=AttrRaisesExpr
protected class AttrSpec_Group_4_0_1 extends GroupToken {
	
	public AttrSpec_Group_4_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_4_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_SetRaisesAssignment_4_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "setraises"
protected class AttrSpec_SetraisesKeyword_4_0_1_0 extends KeywordToken  {
	
	public AttrSpec_SetraisesKeyword_4_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getSetraisesKeyword_4_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// setRaises=AttrRaisesExpr
protected class AttrSpec_SetRaisesAssignment_4_0_1_1 extends AssignmentToken  {
	
	public AttrSpec_SetRaisesAssignment_4_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getSetRaisesAssignment_4_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setRaises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setRaises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getSetRaisesAttrRaisesExprParserRuleCall_4_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_SetraisesKeyword_4_0_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ("," names+=ID)*
protected class AttrSpec_Group_4_1 extends GroupToken {
	
	public AttrSpec_Group_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_NamesAssignment_4_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AttrSpec_CommaKeyword_4_1_0 extends KeywordToken  {
	
	public AttrSpec_CommaKeyword_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getCommaKeyword_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// names+=ID
protected class AttrSpec_NamesAssignment_4_1_1 extends AssignmentToken  {
	
	public AttrSpec_NamesAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getNamesAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_CommaKeyword_4_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// (("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr) | ("," names+=ID)*)?
protected class AttrSpec_Alternatives_5 extends AlternativesToken {

	public AttrSpec_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Alternatives_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Group_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr)
protected class AttrSpec_Alternatives_5_0 extends AlternativesToken {

	public AttrSpec_Alternatives_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getAlternatives_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Group_5_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Group_5_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "getraises" getRaises=AttrRaisesExpr
protected class AttrSpec_Group_5_0_0 extends GroupToken {
	
	public AttrSpec_Group_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_GetRaisesAssignment_5_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "getraises"
protected class AttrSpec_GetraisesKeyword_5_0_0_0 extends KeywordToken  {
	
	public AttrSpec_GetraisesKeyword_5_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGetraisesKeyword_5_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Alternatives_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// getRaises=AttrRaisesExpr
protected class AttrSpec_GetRaisesAssignment_5_0_0_1 extends AssignmentToken  {
	
	public AttrSpec_GetRaisesAssignment_5_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGetRaisesAssignment_5_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getRaises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getRaises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getGetRaisesAttrRaisesExprParserRuleCall_5_0_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_GetraisesKeyword_5_0_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "setraises" setRaises=AttrRaisesExpr
protected class AttrSpec_Group_5_0_1 extends GroupToken {
	
	public AttrSpec_Group_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_SetRaisesAssignment_5_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "setraises"
protected class AttrSpec_SetraisesKeyword_5_0_1_0 extends KeywordToken  {
	
	public AttrSpec_SetraisesKeyword_5_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getSetraisesKeyword_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Alternatives_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// setRaises=AttrRaisesExpr
protected class AttrSpec_SetRaisesAssignment_5_0_1_1 extends AssignmentToken  {
	
	public AttrSpec_SetRaisesAssignment_5_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getSetRaisesAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setRaises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setRaises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getSetRaisesAttrRaisesExprParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_SetraisesKeyword_5_0_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ("," names+=ID)*
protected class AttrSpec_Group_5_1 extends GroupToken {
	
	public AttrSpec_Group_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_NamesAssignment_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AttrSpec_CommaKeyword_5_1_0 extends KeywordToken  {
	
	public AttrSpec_CommaKeyword_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getCommaKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_Group_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttrSpec_Alternatives_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// names+=ID
protected class AttrSpec_NamesAssignment_5_1_1 extends AssignmentToken  {
	
	public AttrSpec_NamesAssignment_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getNamesAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrSpec_CommaKeyword_5_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_5_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAttrSpecAccess().getNamesIDTerminalRuleCall_5_1_1_0();
			return obj;
		}
		return null;
	}

}



// comments+=IDLComment*
protected class AttrSpec_CommentsAssignment_6 extends AssignmentToken  {
	
	public AttrSpec_CommentsAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrSpecAccess().getCommentsAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrSpecAccess().getCommentsIDLCommentParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttrSpec_CommentsAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new AttrSpec_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new AttrSpec_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new AttrSpec_NamesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AttrSpec ****************/


/************ begin Rule ReadOnlyAttrSpec ****************
 *
 * ReadOnlyAttrSpec:
 * 	comments+=IDLComment* "readonly" "attribute" type=ParamTypeSpec names+=ID ("raises" raises=AttrRaisesExpr | (","
 * 	names+=ID)*)? ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)? comments+=IDLComment*;
 *
 **/

// comments+=IDLComment* "readonly" "attribute" type=ParamTypeSpec names+=ID ("raises" raises=AttrRaisesExpr | (","
// names+=ID)*)? ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)? comments+=IDLComment*
protected class ReadOnlyAttrSpec_Group extends GroupToken {
	
	public ReadOnlyAttrSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommentsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_Alternatives_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ReadOnlyAttrSpec_Alternatives_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class ReadOnlyAttrSpec_CommentsAssignment_0 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReadOnlyAttrSpecAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "readonly"
protected class ReadOnlyAttrSpec_ReadonlyKeyword_1 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_ReadonlyKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getReadonlyKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// "attribute"
protected class ReadOnlyAttrSpec_AttributeKeyword_2 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_AttributeKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getAttributeKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_ReadonlyKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=ParamTypeSpec
protected class ReadOnlyAttrSpec_TypeAssignment_3 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_TypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReadOnlyAttrSpecAccess().getTypeParamTypeSpecParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_AttributeKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// names+=ID
protected class ReadOnlyAttrSpec_NamesAssignment_4 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_NamesAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getNamesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_TypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)?
protected class ReadOnlyAttrSpec_Alternatives_5 extends AlternativesToken {

	public ReadOnlyAttrSpec_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_Group_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "raises" raises=AttrRaisesExpr
protected class ReadOnlyAttrSpec_Group_5_0 extends GroupToken {
	
	public ReadOnlyAttrSpec_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_RaisesAssignment_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "raises"
protected class ReadOnlyAttrSpec_RaisesKeyword_5_0_0 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_RaisesKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getRaisesKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// raises=AttrRaisesExpr
protected class ReadOnlyAttrSpec_RaisesAssignment_5_0_1 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_RaisesAssignment_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getRaisesAssignment_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("raises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("raises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReadOnlyAttrSpecAccess().getRaisesAttrRaisesExprParserRuleCall_5_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_RaisesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," names+=ID)*
protected class ReadOnlyAttrSpec_Group_5_1 extends GroupToken {
	
	public ReadOnlyAttrSpec_Group_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_NamesAssignment_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ReadOnlyAttrSpec_CommaKeyword_5_1_0 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_CommaKeyword_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getCommaKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Group_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// names+=ID
protected class ReadOnlyAttrSpec_NamesAssignment_5_1_1 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_NamesAssignment_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getNamesAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommaKeyword_5_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_5_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_5_1_1_0();
			return obj;
		}
		return null;
	}

}



// ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)?
protected class ReadOnlyAttrSpec_Alternatives_6 extends AlternativesToken {

	public ReadOnlyAttrSpec_Alternatives_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getAlternatives_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Group_6_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_Group_6_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "raises" raises=AttrRaisesExpr
protected class ReadOnlyAttrSpec_Group_6_0 extends GroupToken {
	
	public ReadOnlyAttrSpec_Group_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getGroup_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_RaisesAssignment_6_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "raises"
protected class ReadOnlyAttrSpec_RaisesKeyword_6_0_0 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_RaisesKeyword_6_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getRaisesKeyword_6_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// raises=AttrRaisesExpr
protected class ReadOnlyAttrSpec_RaisesAssignment_6_0_1 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_RaisesAssignment_6_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getRaisesAssignment_6_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrRaisesExpr_ExceptionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("raises",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("raises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrRaisesExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReadOnlyAttrSpecAccess().getRaisesAttrRaisesExprParserRuleCall_6_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_RaisesKeyword_6_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," names+=ID)*
protected class ReadOnlyAttrSpec_Group_6_1 extends GroupToken {
	
	public ReadOnlyAttrSpec_Group_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getGroup_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_NamesAssignment_6_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ReadOnlyAttrSpec_CommaKeyword_6_1_0 extends KeywordToken  {
	
	public ReadOnlyAttrSpec_CommaKeyword_6_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getCommaKeyword_6_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_Group_6_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReadOnlyAttrSpec_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// names+=ID
protected class ReadOnlyAttrSpec_NamesAssignment_6_1_1 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_NamesAssignment_6_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getNamesAssignment_6_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommaKeyword_6_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_6_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReadOnlyAttrSpecAccess().getNamesIDTerminalRuleCall_6_1_1_0();
			return obj;
		}
		return null;
	}

}



// comments+=IDLComment*
protected class ReadOnlyAttrSpec_CommentsAssignment_7 extends AssignmentToken  {
	
	public ReadOnlyAttrSpec_CommentsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReadOnlyAttrSpecAccess().getCommentsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReadOnlyAttrSpecAccess().getCommentsIDLCommentParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReadOnlyAttrSpec_CommentsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReadOnlyAttrSpec_Alternatives_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ReadOnlyAttrSpec_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ReadOnlyAttrSpec_NamesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ReadOnlyAttrSpec ****************/


/************ begin Rule AttrRaisesExpr ****************
 *
 * AttrRaisesExpr:
 * 	exceptions=ExceptionList;
 *
 **/

// exceptions=ExceptionList
protected class AttrRaisesExpr_ExceptionsAssignment extends AssignmentToken  {
	
	public AttrRaisesExpr_ExceptionsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrRaisesExprAccess().getExceptionsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrRaisesExprRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("exceptions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exceptions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttrRaisesExprAccess().getExceptionsExceptionListParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule AttrRaisesExpr ****************/


/************ begin Rule ExceptionList ****************
 *
 * ExceptionList:
 * 	"(" exception+=ScopedName ("," exception+=ScopedName)* ")";
 *
 **/

// "(" exception+=ScopedName ("," exception+=ScopedName)* ")"
protected class ExceptionList_Group extends GroupToken {
	
	public ExceptionList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptionListRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ExceptionList_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ExceptionList_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// exception+=ScopedName
protected class ExceptionList_ExceptionAssignment_1 extends AssignmentToken  {
	
	public ExceptionList_ExceptionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getExceptionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exception",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exception");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExceptionListAccess().getExceptionScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExceptionList_LeftParenthesisKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," exception+=ScopedName)*
protected class ExceptionList_Group_2 extends GroupToken {
	
	public ExceptionList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_ExceptionAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExceptionList_CommaKeyword_2_0 extends KeywordToken  {
	
	public ExceptionList_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExceptionList_ExceptionAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// exception+=ScopedName
protected class ExceptionList_ExceptionAssignment_2_1 extends AssignmentToken  {
	
	public ExceptionList_ExceptionAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getExceptionAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exception",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exception");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExceptionListAccess().getExceptionScopedNameParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExceptionList_CommaKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class ExceptionList_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ExceptionList_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptionListAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExceptionList_ExceptionAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExceptionList ****************/


/************ begin Rule OpDecl ****************
 *
 * OpDecl:
 * 	comments+=IDLComment*
 * 	isOneway?="oneway"?
 * 	type=OpTypeDecl
 * 	name=ID
 * 	params=ParameterDecls ("raises" raises=ExceptionList)?
 * 	context=ContextExpr?;
 *
 **/

// comments+=IDLComment* isOneway?="oneway"? type=OpTypeDecl name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
// context=ContextExpr?
protected class OpDecl_Group extends GroupToken {
	
	public OpDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_ContextAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpDecl_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OpDecl_ParamsAssignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class OpDecl_CommentsAssignment_0 extends AssignmentToken  {
	
	public OpDecl_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOpDeclAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OpDecl_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// isOneway?="oneway"?
protected class OpDecl_IsOnewayAssignment_1 extends AssignmentToken  {
	
	public OpDecl_IsOnewayAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getIsOnewayAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isOneway",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isOneway");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getOpDeclAccess().getIsOnewayOnewayKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// type=OpTypeDecl
protected class OpDecl_TypeAssignment_2 extends AssignmentToken  {
	
	public OpDecl_TypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOpDeclAccess().getTypeOpTypeDeclParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OpDecl_IsOnewayAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new OpDecl_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}

// name=ID
protected class OpDecl_NameAssignment_3 extends AssignmentToken  {
	
	public OpDecl_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_TypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOpDeclAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOpDeclAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// params=ParameterDecls
protected class OpDecl_ParamsAssignment_4 extends AssignmentToken  {
	
	public OpDecl_ParamsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getParamsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOpDeclAccess().getParamsParameterDeclsParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OpDecl_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("raises" raises=ExceptionList)?
protected class OpDecl_Group_5 extends GroupToken {
	
	public OpDecl_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_RaisesAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "raises"
protected class OpDecl_RaisesKeyword_5_0 extends KeywordToken  {
	
	public OpDecl_RaisesKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getRaisesKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpDecl_ParamsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// raises=ExceptionList
protected class OpDecl_RaisesAssignment_5_1 extends AssignmentToken  {
	
	public OpDecl_RaisesAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getRaisesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("raises",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("raises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOpDeclAccess().getRaisesExceptionListParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OpDecl_RaisesKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// context=ContextExpr?
protected class OpDecl_ContextAssignment_6 extends AssignmentToken  {
	
	public OpDecl_ContextAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpDeclAccess().getContextAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("context",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOpDeclAccess().getContextContextExprParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OpDecl_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new OpDecl_ParamsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule OpDecl ****************/


/************ begin Rule OpTypeDecl ****************
 *
 * OpTypeDecl:
 * 	ParamTypeSpec | "void";
 *
 **/

// ParamTypeSpec | "void"
protected class OpTypeDecl_Alternatives extends AlternativesToken {

	public OpTypeDecl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpTypeDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpTypeDecl_ParamTypeSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpTypeDecl_VoidKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ParamTypeSpec
protected class OpTypeDecl_ParamTypeSpecParserRuleCall_0 extends RuleCallToken {
	
	public OpTypeDecl_ParamTypeSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOpTypeDeclAccess().getParamTypeSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ParamTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "void"
protected class OpTypeDecl_VoidKeyword_1 extends KeywordToken  {
	
	public OpTypeDecl_VoidKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpTypeDeclAccess().getVoidKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


/************ end Rule OpTypeDecl ****************/


/************ begin Rule ParameterDecls ****************
 *
 * ParameterDecls:
 * 	{ParameterDecls}
 * 	"(" comments+=IDLComment* (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)? ")";
 *
 **/

// {ParameterDecls} "(" comments+=IDLComment* (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)? ")"
protected class ParameterDecls_Group extends GroupToken {
	
	public ParameterDecls_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterDeclsAccess().getParameterDeclsAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ParameterDecls}
protected class ParameterDecls_ParameterDeclsAction_0 extends ActionToken  {

	public ParameterDecls_ParameterDeclsAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getParameterDeclsAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class ParameterDecls_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ParameterDecls_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_ParameterDeclsAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class ParameterDecls_CommentsAssignment_2 extends AssignmentToken  {
	
	public ParameterDecls_CommentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getCommentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDeclsAccess().getCommentsIDLCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDecls_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ParameterDecls_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)?
protected class ParameterDecls_Group_3 extends GroupToken {
	
	public ParameterDecls_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterDecls_DeclsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// decls+=ParamDcl
protected class ParameterDecls_DeclsAssignment_3_0 extends AssignmentToken  {
	
	public ParameterDecls_DeclsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getDeclsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decls",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamDclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDeclsAccess().getDeclsParamDclParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDecls_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ParameterDecls_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," comments+=IDLComment* decls+=ParamDcl)*
protected class ParameterDecls_Group_3_1 extends GroupToken {
	
	public ParameterDecls_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_DeclsAssignment_3_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ParameterDecls_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public ParameterDecls_CommaKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getCommaKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterDecls_DeclsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class ParameterDecls_CommentsAssignment_3_1_1 extends AssignmentToken  {
	
	public ParameterDecls_CommentsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getCommentsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDeclsAccess().getCommentsIDLCommentParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDecls_CommentsAssignment_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ParameterDecls_CommaKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// decls+=ParamDcl
protected class ParameterDecls_DeclsAssignment_3_1_2 extends AssignmentToken  {
	
	public ParameterDecls_DeclsAssignment_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getDeclsAssignment_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decls",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamDclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDeclsAccess().getDeclsParamDclParserRuleCall_3_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDecls_CommentsAssignment_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ParameterDecls_CommaKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ParameterDecls_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ParameterDecls_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclsAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterDecls_CommentsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ParameterDecls_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParameterDecls ****************/


/************ begin Rule ParamDcl ****************
 *
 * ParamDcl:
 * 	direction=ParamDirection type=ParamTypeSpec name=ID;
 *
 **/

// direction=ParamDirection type=ParamTypeSpec name=ID
protected class ParamDcl_Group extends GroupToken {
	
	public ParamDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParamDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamDcl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParamDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// direction=ParamDirection
protected class ParamDcl_DirectionAssignment_0 extends AssignmentToken  {
	
	public ParamDcl_DirectionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParamDclAccess().getDirectionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getParamDclAccess().getDirectionParamDirectionEnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getParamDclAccess().getDirectionParamDirectionEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=ParamTypeSpec
protected class ParamDcl_TypeAssignment_1 extends AssignmentToken  {
	
	public ParamDcl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParamDclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParamDclAccess().getTypeParamTypeSpecParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParamDcl_DirectionAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ParamDcl_NameAssignment_2 extends AssignmentToken  {
	
	public ParamDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParamDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamDcl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParamDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getParamDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ParamDcl ****************/


/************ begin Rule ContextExpr ****************
 *
 * ContextExpr:
 * 	"context" "(" literal+=STRING ("," literal+=STRING)* ")";
 *
 **/

// "context" "(" literal+=STRING ("," literal+=STRING)* ")"
protected class ContextExpr_Group extends GroupToken {
	
	public ContextExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContextExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContextExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "context"
protected class ContextExpr_ContextKeyword_0 extends KeywordToken  {
	
	public ContextExpr_ContextKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextExprAccess().getContextKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ContextExpr_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ContextExpr_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextExprAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_ContextKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// literal+=STRING
protected class ContextExpr_LiteralAssignment_2 extends AssignmentToken  {
	
	public ContextExpr_LiteralAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextExprAccess().getLiteralAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getContextExprAccess().getLiteralSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getContextExprAccess().getLiteralSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("," literal+=STRING)*
protected class ContextExpr_Group_3 extends GroupToken {
	
	public ContextExpr_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContextExprAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_LiteralAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ContextExpr_CommaKeyword_3_0 extends KeywordToken  {
	
	public ContextExpr_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextExprAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContextExpr_LiteralAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// literal+=STRING
protected class ContextExpr_LiteralAssignment_3_1 extends AssignmentToken  {
	
	public ContextExpr_LiteralAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextExprAccess().getLiteralAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_CommaKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getContextExprAccess().getLiteralSTRINGTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getContextExprAccess().getLiteralSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class ContextExpr_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ContextExpr_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextExprAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContextExpr_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContextExpr_LiteralAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ContextExpr ****************/


/************ begin Rule ParamTypeSpec ****************
 *
 * ParamTypeSpec:
 * 	BaseTypeSpec
 * 	| StringType
 * 	| WideStringType
 * 	| ScopedName;
 *
 **/

// BaseTypeSpec | StringType | WideStringType | ScopedName
protected class ParamTypeSpec_Alternatives extends AlternativesToken {

	public ParamTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParamTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_BaseTypeSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParamTypeSpec_StringTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ParamTypeSpec_WideStringTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ParamTypeSpec_ScopedNameParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BaseTypeSpec
protected class ParamTypeSpec_BaseTypeSpecParserRuleCall_0 extends RuleCallToken {
	
	public ParamTypeSpec_BaseTypeSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParamTypeSpecAccess().getBaseTypeSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BaseTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BaseTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringType
protected class ParamTypeSpec_StringTypeParserRuleCall_1 extends RuleCallToken {
	
	public ParamTypeSpec_StringTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParamTypeSpecAccess().getStringTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WideStringType
protected class ParamTypeSpec_WideStringTypeParserRuleCall_2 extends RuleCallToken {
	
	public ParamTypeSpec_WideStringTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParamTypeSpecAccess().getWideStringTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WideStringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ScopedName
protected class ParamTypeSpec_ScopedNameParserRuleCall_3 extends RuleCallToken {
	
	public ParamTypeSpec_ScopedNameParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParamTypeSpecAccess().getScopedNameParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ScopedName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ParamTypeSpec ****************/


/************ begin Rule ScopedName ****************
 *
 * ScopedName:
 * 	"::"? name+=ID ("::" name+=ID)*;
 *
 **/

// "::"? name+=ID ("::" name+=ID)*
protected class ScopedName_Group extends GroupToken {
	
	public ScopedName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getScopedNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ScopedName_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name+=ID
protected class ScopedName_NameAssignment_1 extends AssignmentToken  {
	
	public ScopedName_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScopedNameAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScopedNameAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getScopedNameAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("::" name+=ID)*
protected class ScopedName_Group_2 extends GroupToken {
	
	public ScopedName_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getScopedNameAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_NameAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "::"
protected class ScopedName_ColonColonKeyword_2_0 extends KeywordToken  {
	
	public ScopedName_ColonColonKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScopedNameAccess().getColonColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ScopedName_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// name+=ID
protected class ScopedName_NameAssignment_2_1 extends AssignmentToken  {
	
	public ScopedName_NameAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScopedNameAccess().getNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_ColonColonKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScopedNameAccess().getNameIDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getScopedNameAccess().getNameIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ScopedName ****************/


/************ begin Rule BaseTypeSpec ****************
 *
 * BaseTypeSpec:
 * 	FloatingPtType
 * 	| IntegerType
 * 	| CharType
 * 	| WideCharType
 * 	| BooleanType
 * 	| OctetType
 * 	| AnyType
 * 	| ObjectType
 * 	| ValueBaseType;
 *
 **/

// FloatingPtType | IntegerType | CharType | WideCharType | BooleanType | OctetType | AnyType | ObjectType | ValueBaseType
protected class BaseTypeSpec_Alternatives extends AlternativesToken {

	public BaseTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BaseTypeSpec_FloatingPtTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BaseTypeSpec_IntegerTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BaseTypeSpec_CharTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BaseTypeSpec_WideCharTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BaseTypeSpec_BooleanTypeParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BaseTypeSpec_OctetTypeParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new BaseTypeSpec_AnyTypeParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new BaseTypeSpec_ObjectTypeParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new BaseTypeSpec_ValueBaseTypeParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FloatingPtType
protected class BaseTypeSpec_FloatingPtTypeParserRuleCall_0 extends RuleCallToken {
	
	public BaseTypeSpec_FloatingPtTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getFloatingPtTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatingPtType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FloatingPtType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IntegerType
protected class BaseTypeSpec_IntegerTypeParserRuleCall_1 extends RuleCallToken {
	
	public BaseTypeSpec_IntegerTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getIntegerTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntegerType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IntegerType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CharType
protected class BaseTypeSpec_CharTypeParserRuleCall_2 extends RuleCallToken {
	
	public BaseTypeSpec_CharTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getCharTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(CharType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WideCharType
protected class BaseTypeSpec_WideCharTypeParserRuleCall_3 extends RuleCallToken {
	
	public BaseTypeSpec_WideCharTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getWideCharTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideCharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WideCharType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanType
protected class BaseTypeSpec_BooleanTypeParserRuleCall_4 extends RuleCallToken {
	
	public BaseTypeSpec_BooleanTypeParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getBooleanTypeParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OctetType
protected class BaseTypeSpec_OctetTypeParserRuleCall_5 extends RuleCallToken {
	
	public BaseTypeSpec_OctetTypeParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getOctetTypeParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OctetType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OctetType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AnyType
protected class BaseTypeSpec_AnyTypeParserRuleCall_6 extends RuleCallToken {
	
	public BaseTypeSpec_AnyTypeParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getAnyTypeParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnyType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AnyType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ObjectType
protected class BaseTypeSpec_ObjectTypeParserRuleCall_7 extends RuleCallToken {
	
	public BaseTypeSpec_ObjectTypeParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getObjectTypeParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObjectType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ObjectType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ValueBaseType
protected class BaseTypeSpec_ValueBaseTypeParserRuleCall_8 extends RuleCallToken {
	
	public BaseTypeSpec_ValueBaseTypeParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBaseTypeSpecAccess().getValueBaseTypeParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueBaseType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ValueBaseType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BaseTypeSpec ****************/


/************ begin Rule FloatingPtType ****************
 *
 * FloatingPtType:
 * 	FloatType
 * 	| DoubleType
 * 	| LongDoubleType;
 *
 **/

// FloatType | DoubleType | LongDoubleType
protected class FloatingPtType_Alternatives extends AlternativesToken {

	public FloatingPtType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFloatingPtTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatingPtType_FloatTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FloatingPtType_DoubleTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FloatingPtType_LongDoubleTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FloatType
protected class FloatingPtType_FloatTypeParserRuleCall_0 extends RuleCallToken {
	
	public FloatingPtType_FloatTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFloatingPtTypeAccess().getFloatTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FloatType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DoubleType
protected class FloatingPtType_DoubleTypeParserRuleCall_1 extends RuleCallToken {
	
	public FloatingPtType_DoubleTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFloatingPtTypeAccess().getDoubleTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DoubleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LongDoubleType
protected class FloatingPtType_LongDoubleTypeParserRuleCall_2 extends RuleCallToken {
	
	public FloatingPtType_LongDoubleTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFloatingPtTypeAccess().getLongDoubleTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongDoubleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LongDoubleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FloatingPtType ****************/


/************ begin Rule FloatType ****************
 *
 * FloatType:
 * 	{FloatType}
 * 	"float";
 *
 **/

// {FloatType} "float"
protected class FloatType_Group extends GroupToken {
	
	public FloatType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatType_FloatKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FloatType}
protected class FloatType_FloatTypeAction_0 extends ActionToken  {

	public FloatType_FloatTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getFloatTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "float"
protected class FloatType_FloatKeyword_1 extends KeywordToken  {
	
	public FloatType_FloatKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getFloatKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatType_FloatTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FloatType ****************/


/************ begin Rule DoubleType ****************
 *
 * DoubleType:
 * 	{DoubleType}
 * 	"double";
 *
 **/

// {DoubleType} "double"
protected class DoubleType_Group extends GroupToken {
	
	public DoubleType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleType_DoubleKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DoubleType}
protected class DoubleType_DoubleTypeAction_0 extends ActionToken  {

	public DoubleType_DoubleTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "double"
protected class DoubleType_DoubleKeyword_1 extends KeywordToken  {
	
	public DoubleType_DoubleKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getDoubleKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleType_DoubleTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DoubleType ****************/


/************ begin Rule LongDoubleType ****************
 *
 * LongDoubleType:
 * 	{LongDoubleType}
 * 	"long" "double";
 *
 **/

// {LongDoubleType} "long" "double"
protected class LongDoubleType_Group extends GroupToken {
	
	public LongDoubleType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLongDoubleTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongDoubleType_DoubleKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LongDoubleType}
protected class LongDoubleType_LongDoubleTypeAction_0 extends ActionToken  {

	public LongDoubleType_LongDoubleTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "long"
protected class LongDoubleType_LongKeyword_1 extends KeywordToken  {
	
	public LongDoubleType_LongKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLongDoubleTypeAccess().getLongKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongDoubleType_LongDoubleTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "double"
protected class LongDoubleType_DoubleKeyword_2 extends KeywordToken  {
	
	public LongDoubleType_DoubleKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLongDoubleTypeAccess().getDoubleKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongDoubleType_LongKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule LongDoubleType ****************/


/************ begin Rule IntegerType ****************
 *
 * IntegerType:
 * 	UnsignedInt
 * 	| SignedInt;
 *
 **/

// UnsignedInt | SignedInt
protected class IntegerType_Alternatives extends AlternativesToken {

	public IntegerType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntegerTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntegerType_UnsignedIntParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IntegerType_SignedIntParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UnsignedInt
protected class IntegerType_UnsignedIntParserRuleCall_0 extends RuleCallToken {
	
	public IntegerType_UnsignedIntParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntegerTypeAccess().getUnsignedIntParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedInt_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnsignedInt_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SignedInt
protected class IntegerType_SignedIntParserRuleCall_1 extends RuleCallToken {
	
	public IntegerType_SignedIntParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntegerTypeAccess().getSignedIntParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedInt_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SignedInt_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule IntegerType ****************/


/************ begin Rule SignedInt ****************
 *
 * SignedInt:
 * 	SignedShortInt
 * 	| SignedLongLongInt
 * 	| SignedLongInt;
 *
 **/

// SignedShortInt | SignedLongLongInt | SignedLongInt
protected class SignedInt_Alternatives extends AlternativesToken {

	public SignedInt_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignedIntAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedInt_SignedShortIntParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SignedInt_SignedLongLongIntParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SignedInt_SignedLongIntParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SignedShortInt
protected class SignedInt_SignedShortIntParserRuleCall_0 extends RuleCallToken {
	
	public SignedInt_SignedShortIntParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSignedIntAccess().getSignedShortIntParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedShortInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SignedShortInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SignedLongLongInt
protected class SignedInt_SignedLongLongIntParserRuleCall_1 extends RuleCallToken {
	
	public SignedInt_SignedLongLongIntParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSignedIntAccess().getSignedLongLongIntParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongLongInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SignedLongLongInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SignedLongInt
protected class SignedInt_SignedLongIntParserRuleCall_2 extends RuleCallToken {
	
	public SignedInt_SignedLongIntParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSignedIntAccess().getSignedLongIntParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SignedLongInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SignedInt ****************/


/************ begin Rule SignedShortInt ****************
 *
 * SignedShortInt:
 * 	{SignedShortInt}
 * 	"short";
 *
 **/

// {SignedShortInt} "short"
protected class SignedShortInt_Group extends GroupToken {
	
	public SignedShortInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignedShortIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedShortInt_ShortKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SignedShortInt}
protected class SignedShortInt_SignedShortIntAction_0 extends ActionToken  {

	public SignedShortInt_SignedShortIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "short"
protected class SignedShortInt_ShortKeyword_1 extends KeywordToken  {
	
	public SignedShortInt_ShortKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignedShortIntAccess().getShortKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedShortInt_SignedShortIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SignedShortInt ****************/


/************ begin Rule SignedLongInt ****************
 *
 * SignedLongInt:
 * 	{SignedLongInt}
 * 	"long";
 *
 **/

// {SignedLongInt} "long"
protected class SignedLongInt_Group extends GroupToken {
	
	public SignedLongInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignedLongIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongInt_LongKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SignedLongInt}
protected class SignedLongInt_SignedLongIntAction_0 extends ActionToken  {

	public SignedLongInt_SignedLongIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "long"
protected class SignedLongInt_LongKeyword_1 extends KeywordToken  {
	
	public SignedLongInt_LongKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignedLongIntAccess().getLongKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongInt_SignedLongIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SignedLongInt ****************/


/************ begin Rule SignedLongLongInt ****************
 *
 * SignedLongLongInt:
 * 	{SignedLongLongInt}
 * 	"long" "long";
 *
 **/

// {SignedLongLongInt} "long" "long"
protected class SignedLongLongInt_Group extends GroupToken {
	
	public SignedLongLongInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignedLongLongIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongLongInt_LongKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SignedLongLongInt}
protected class SignedLongLongInt_SignedLongLongIntAction_0 extends ActionToken  {

	public SignedLongLongInt_SignedLongLongIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "long"
protected class SignedLongLongInt_LongKeyword_1 extends KeywordToken  {
	
	public SignedLongLongInt_LongKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignedLongLongIntAccess().getLongKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongLongInt_SignedLongLongIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "long"
protected class SignedLongLongInt_LongKeyword_2 extends KeywordToken  {
	
	public SignedLongLongInt_LongKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignedLongLongIntAccess().getLongKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SignedLongLongInt_LongKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SignedLongLongInt ****************/


/************ begin Rule UnsignedInt ****************
 *
 * UnsignedInt:
 * 	UnsignedShortInt
 * 	| UnsignedLongInt
 * 	| UnsignedLongLongInt;
 *
 **/

// UnsignedShortInt | UnsignedLongInt | UnsignedLongLongInt
protected class UnsignedInt_Alternatives extends AlternativesToken {

	public UnsignedInt_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnsignedIntAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedInt_UnsignedShortIntParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnsignedInt_UnsignedLongIntParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UnsignedInt_UnsignedLongLongIntParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UnsignedShortInt
protected class UnsignedInt_UnsignedShortIntParserRuleCall_0 extends RuleCallToken {
	
	public UnsignedInt_UnsignedShortIntParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnsignedIntAccess().getUnsignedShortIntParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedShortInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnsignedShortInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnsignedLongInt
protected class UnsignedInt_UnsignedLongIntParserRuleCall_1 extends RuleCallToken {
	
	public UnsignedInt_UnsignedLongIntParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnsignedIntAccess().getUnsignedLongIntParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnsignedLongInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnsignedLongLongInt
protected class UnsignedInt_UnsignedLongLongIntParserRuleCall_2 extends RuleCallToken {
	
	public UnsignedInt_UnsignedLongLongIntParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnsignedIntAccess().getUnsignedLongLongIntParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongLongInt_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnsignedLongLongInt_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnsignedInt ****************/


/************ begin Rule UnsignedShortInt ****************
 *
 * UnsignedShortInt:
 * 	{UnsignedShortInt}
 * 	"unsigned" "short";
 *
 **/

// {UnsignedShortInt} "unsigned" "short"
protected class UnsignedShortInt_Group extends GroupToken {
	
	public UnsignedShortInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnsignedShortIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedShortInt_ShortKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnsignedShortInt}
protected class UnsignedShortInt_UnsignedShortIntAction_0 extends ActionToken  {

	public UnsignedShortInt_UnsignedShortIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "unsigned"
protected class UnsignedShortInt_UnsignedKeyword_1 extends KeywordToken  {
	
	public UnsignedShortInt_UnsignedKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedShortIntAccess().getUnsignedKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedShortInt_UnsignedShortIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "short"
protected class UnsignedShortInt_ShortKeyword_2 extends KeywordToken  {
	
	public UnsignedShortInt_ShortKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedShortIntAccess().getShortKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedShortInt_UnsignedKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnsignedShortInt ****************/


/************ begin Rule UnsignedLongInt ****************
 *
 * UnsignedLongInt:
 * 	{UnsignedLongInt}
 * 	"unsigned" "long";
 *
 **/

// {UnsignedLongInt} "unsigned" "long"
protected class UnsignedLongInt_Group extends GroupToken {
	
	public UnsignedLongInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnsignedLongIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongInt_LongKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnsignedLongInt}
protected class UnsignedLongInt_UnsignedLongIntAction_0 extends ActionToken  {

	public UnsignedLongInt_UnsignedLongIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "unsigned"
protected class UnsignedLongInt_UnsignedKeyword_1 extends KeywordToken  {
	
	public UnsignedLongInt_UnsignedKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedLongIntAccess().getUnsignedKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongInt_UnsignedLongIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "long"
protected class UnsignedLongInt_LongKeyword_2 extends KeywordToken  {
	
	public UnsignedLongInt_LongKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedLongIntAccess().getLongKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongInt_UnsignedKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnsignedLongInt ****************/


/************ begin Rule UnsignedLongLongInt ****************
 *
 * UnsignedLongLongInt:
 * 	{UnsignedLongLongInt}
 * 	"unsigned" "long" "long";
 *
 **/

// {UnsignedLongLongInt} "unsigned" "long" "long"
protected class UnsignedLongLongInt_Group extends GroupToken {
	
	public UnsignedLongLongInt_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnsignedLongLongIntAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongLongInt_LongKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnsignedLongLongInt}
protected class UnsignedLongLongInt_UnsignedLongLongIntAction_0 extends ActionToken  {

	public UnsignedLongLongInt_UnsignedLongLongIntAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "unsigned"
protected class UnsignedLongLongInt_UnsignedKeyword_1 extends KeywordToken  {
	
	public UnsignedLongLongInt_UnsignedKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedLongLongIntAccess().getUnsignedKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongLongInt_UnsignedLongLongIntAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "long"
protected class UnsignedLongLongInt_LongKeyword_2 extends KeywordToken  {
	
	public UnsignedLongLongInt_LongKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedLongLongIntAccess().getLongKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongLongInt_UnsignedKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "long"
protected class UnsignedLongLongInt_LongKeyword_3 extends KeywordToken  {
	
	public UnsignedLongLongInt_LongKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsignedLongLongIntAccess().getLongKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnsignedLongLongInt_LongKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnsignedLongLongInt ****************/


/************ begin Rule CharType ****************
 *
 * CharType:
 * 	{CharType}
 * 	"char";
 *
 **/

// {CharType} "char"
protected class CharType_Group extends GroupToken {
	
	public CharType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCharTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CharType_CharKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CharType}
protected class CharType_CharTypeAction_0 extends ActionToken  {

	public CharType_CharTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCharTypeAccess().getCharTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "char"
protected class CharType_CharKeyword_1 extends KeywordToken  {
	
	public CharType_CharKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCharTypeAccess().getCharKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CharType_CharTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CharType ****************/


/************ begin Rule WideCharType ****************
 *
 * WideCharType:
 * 	{WideCharType}
 * 	"wchar";
 *
 **/

// {WideCharType} "wchar"
protected class WideCharType_Group extends GroupToken {
	
	public WideCharType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWideCharTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideCharType_WcharKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {WideCharType}
protected class WideCharType_WideCharTypeAction_0 extends ActionToken  {

	public WideCharType_WideCharTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "wchar"
protected class WideCharType_WcharKeyword_1 extends KeywordToken  {
	
	public WideCharType_WcharKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWideCharTypeAccess().getWcharKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideCharType_WideCharTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule WideCharType ****************/


/************ begin Rule BooleanType ****************
 *
 * BooleanType:
 * 	{BooleanType}
 * 	"boolean";
 *
 **/

// {BooleanType} "boolean"
protected class BooleanType_Group extends GroupToken {
	
	public BooleanType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanType_BooleanKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BooleanType}
protected class BooleanType_BooleanTypeAction_0 extends ActionToken  {

	public BooleanType_BooleanTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "boolean"
protected class BooleanType_BooleanKeyword_1 extends KeywordToken  {
	
	public BooleanType_BooleanKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanType_BooleanTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BooleanType ****************/


/************ begin Rule OctetType ****************
 *
 * OctetType:
 * 	{OctetType}
 * 	"octet";
 *
 **/

// {OctetType} "octet"
protected class OctetType_Group extends GroupToken {
	
	public OctetType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOctetTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OctetType_OctetKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OctetType}
protected class OctetType_OctetTypeAction_0 extends ActionToken  {

	public OctetType_OctetTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOctetTypeAccess().getOctetTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "octet"
protected class OctetType_OctetKeyword_1 extends KeywordToken  {
	
	public OctetType_OctetKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOctetTypeAccess().getOctetKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OctetType_OctetTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule OctetType ****************/


/************ begin Rule AnyType ****************
 *
 * AnyType:
 * 	{AnyType}
 * 	"any";
 *
 **/

// {AnyType} "any"
protected class AnyType_Group extends GroupToken {
	
	public AnyType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnyTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnyType_AnyKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AnyType}
protected class AnyType_AnyTypeAction_0 extends ActionToken  {

	public AnyType_AnyTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAnyTypeAccess().getAnyTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "any"
protected class AnyType_AnyKeyword_1 extends KeywordToken  {
	
	public AnyType_AnyKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnyTypeAccess().getAnyKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnyType_AnyTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AnyType ****************/


/************ begin Rule ObjectType ****************
 *
 * ObjectType:
 * 	{ObjectType}
 * 	"Object";
 *
 **/

// {ObjectType} "Object"
protected class ObjectType_Group extends GroupToken {
	
	public ObjectType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObjectType_ObjectKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ObjectType}
protected class ObjectType_ObjectTypeAction_0 extends ActionToken  {

	public ObjectType_ObjectTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getObjectTypeAccess().getObjectTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "Object"
protected class ObjectType_ObjectKeyword_1 extends KeywordToken  {
	
	public ObjectType_ObjectKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectTypeAccess().getObjectKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObjectType_ObjectTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ObjectType ****************/


/************ begin Rule ValueBaseType ****************
 *
 * ValueBaseType:
 * 	{ValueBaseType}
 * 	"ValueBase";
 *
 **/

// {ValueBaseType} "ValueBase"
protected class ValueBaseType_Group extends GroupToken {
	
	public ValueBaseType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueBaseTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueBaseType_ValueBaseKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ValueBaseType}
protected class ValueBaseType_ValueBaseTypeAction_0 extends ActionToken  {

	public ValueBaseType_ValueBaseTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "ValueBase"
protected class ValueBaseType_ValueBaseKeyword_1 extends KeywordToken  {
	
	public ValueBaseType_ValueBaseKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValueBaseTypeAccess().getValueBaseKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueBaseType_ValueBaseTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ValueBaseType ****************/


/************ begin Rule StringType ****************
 *
 * StringType:
 * 	{StringType}
 * 	"string" ("<" size=PositiveIntConst ">")?;
 *
 **/

// {StringType} "string" ("<" size=PositiveIntConst ">")?
protected class StringType_Group extends GroupToken {
	
	public StringType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringType_StringKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StringType}
protected class StringType_StringTypeAction_0 extends ActionToken  {

	public StringType_StringTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getStringTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "string"
protected class StringType_StringKeyword_1 extends KeywordToken  {
	
	public StringType_StringKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getStringKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_StringTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("<" size=PositiveIntConst ">")?
protected class StringType_Group_2 extends GroupToken {
	
	public StringType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_GreaterThanSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class StringType_LessThanSignKeyword_2_0 extends KeywordToken  {
	
	public StringType_LessThanSignKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getLessThanSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_StringKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// size=PositiveIntConst
protected class StringType_SizeAssignment_2_1 extends AssignmentToken  {
	
	public StringType_SizeAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getSizeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PositiveIntConst_ExpAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("size",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("size");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPositiveIntConstRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringTypeAccess().getSizePositiveIntConstParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringType_LessThanSignKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class StringType_GreaterThanSignKeyword_2_2 extends KeywordToken  {
	
	public StringType_GreaterThanSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getGreaterThanSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_SizeAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule StringType ****************/


/************ begin Rule WideStringType ****************
 *
 * WideStringType:
 * 	{WideStringType}
 * 	"wstring" ("<" size=PositiveIntConst ">")?;
 *
 **/

// {WideStringType} "wstring" ("<" size=PositiveIntConst ">")?
protected class WideStringType_Group extends GroupToken {
	
	public WideStringType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WideStringType_WstringKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {WideStringType}
protected class WideStringType_WideStringTypeAction_0 extends ActionToken  {

	public WideStringType_WideStringTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "wstring"
protected class WideStringType_WstringKeyword_1 extends KeywordToken  {
	
	public WideStringType_WstringKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getWstringKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_WideStringTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("<" size=PositiveIntConst ">")?
protected class WideStringType_Group_2 extends GroupToken {
	
	public WideStringType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_GreaterThanSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class WideStringType_LessThanSignKeyword_2_0 extends KeywordToken  {
	
	public WideStringType_LessThanSignKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getLessThanSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_WstringKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// size=PositiveIntConst
protected class WideStringType_SizeAssignment_2_1 extends AssignmentToken  {
	
	public WideStringType_SizeAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getSizeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PositiveIntConst_ExpAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("size",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("size");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPositiveIntConstRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWideStringTypeAccess().getSizePositiveIntConstParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WideStringType_LessThanSignKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class WideStringType_GreaterThanSignKeyword_2_2 extends KeywordToken  {
	
	public WideStringType_GreaterThanSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWideStringTypeAccess().getGreaterThanSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_SizeAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule WideStringType ****************/


/************ begin Rule ExceptDecl ****************
 *
 * ExceptDecl:
 * 	"exception" name=ID comments+=IDLComment* "{" comments+=IDLComment* members+=Member* "}";
 *
 **/

// "exception" name=ID comments+=IDLComment* "{" comments+=IDLComment* members+=Member* "}"
protected class ExceptDecl_Group extends GroupToken {
	
	public ExceptDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "exception"
protected class ExceptDecl_ExceptionKeyword_0 extends KeywordToken  {
	
	public ExceptDecl_ExceptionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getExceptionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ExceptDecl_NameAssignment_1 extends AssignmentToken  {
	
	public ExceptDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_ExceptionKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExceptDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExceptDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class ExceptDecl_CommentsAssignment_2 extends AssignmentToken  {
	
	public ExceptDecl_CommentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getCommentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExceptDeclAccess().getCommentsIDLCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExceptDecl_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExceptDecl_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class ExceptDecl_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ExceptDecl_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_CommentsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExceptDecl_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class ExceptDecl_CommentsAssignment_4 extends AssignmentToken  {
	
	public ExceptDecl_CommentsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getCommentsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExceptDeclAccess().getCommentsIDLCommentParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExceptDecl_CommentsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExceptDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// members+=Member*
protected class ExceptDecl_MembersAssignment_5 extends AssignmentToken  {
	
	public ExceptDecl_MembersAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getMembersAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Member_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("members",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("members");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMemberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExceptDeclAccess().getMembersMemberParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExceptDecl_MembersAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExceptDecl_CommentsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ExceptDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ExceptDecl_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ExceptDecl_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptDeclAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_MembersAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExceptDecl_CommentsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExceptDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExceptDecl ****************/


/************ begin Rule Member ****************
 *
 * Member:
 * 	type=TypeSpec decl=Declarator ";" comment+=IDLComment*;
 *
 **/

// type=TypeSpec decl=Declarator ";" comment+=IDLComment*
protected class Member_Group extends GroupToken {
	
	public Member_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMemberAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Member_CommentAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Member_SemicolonKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMemberRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=TypeSpec
protected class Member_TypeAssignment_0 extends AssignmentToken  {
	
	public Member_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMemberAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMemberAccess().getTypeTypeSpecParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// decl=Declarator
protected class Member_DeclAssignment_1 extends AssignmentToken  {
	
	public Member_DeclAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMemberAccess().getDeclAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaratorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMemberAccess().getDeclDeclaratorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Member_TypeAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Member_SemicolonKeyword_2 extends KeywordToken  {
	
	public Member_SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMemberAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Member_DeclAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comment+=IDLComment*
protected class Member_CommentAssignment_3 extends AssignmentToken  {
	
	public Member_CommentAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMemberAccess().getCommentAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMemberAccess().getCommentIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Member_CommentAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Member_SemicolonKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Member ****************/


/************ begin Rule Declarator ****************
 *
 * Declarator:
 * 	SimpleDeclarator | ArrayDeclarator;
 *
 **/

// SimpleDeclarator | ArrayDeclarator
protected class Declarator_Alternatives extends AlternativesToken {

	public Declarator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDeclaratorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarator_SimpleDeclaratorParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarator_ArrayDeclaratorParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArrayDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleDeclaratorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleDeclarator
protected class Declarator_SimpleDeclaratorParserRuleCall_0 extends RuleCallToken {
	
	public Declarator_SimpleDeclaratorParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaratorAccess().getSimpleDeclaratorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleDeclarator_IdAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleDeclaratorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleDeclarator_IdAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ArrayDeclarator
protected class Declarator_ArrayDeclaratorParserRuleCall_1 extends RuleCallToken {
	
	public Declarator_ArrayDeclaratorParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaratorAccess().getArrayDeclaratorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArrayDeclaratorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ArrayDeclarator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Declarator ****************/


/************ begin Rule SimpleDeclarator ****************
 *
 * SimpleDeclarator:
 * 	id=ID;
 *
 **/

// id=ID
protected class SimpleDeclarator_IdAssignment extends AssignmentToken  {
	
	public SimpleDeclarator_IdAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleDeclaratorAccess().getIdAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleDeclaratorRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleDeclaratorAccess().getIdIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleDeclaratorAccess().getIdIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule SimpleDeclarator ****************/


/************ begin Rule ComplexDeclarator ****************
 *
 * ComplexDeclarator:
 * 	ArrayDeclarator;
 *
 **/

// ArrayDeclarator
protected class ComplexDeclarator_ArrayDeclaratorParserRuleCall extends RuleCallToken {
	
	public ComplexDeclarator_ArrayDeclaratorParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComplexDeclaratorAccess().getArrayDeclaratorParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArrayDeclaratorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ArrayDeclarator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ComplexDeclarator ****************/


/************ begin Rule ArrayDeclarator ****************
 *
 * ArrayDeclarator:
 * 	id=ID ("[" size+=ConstExp "]")+;
 *
 **/

// id=ID ("[" size+=ConstExp "]")+
protected class ArrayDeclarator_Group extends GroupToken {
	
	public ArrayDeclarator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_Group_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArrayDeclaratorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// id=ID
protected class ArrayDeclarator_IdAssignment_0 extends AssignmentToken  {
	
	public ArrayDeclarator_IdAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getIdAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArrayDeclaratorAccess().getIdIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArrayDeclaratorAccess().getIdIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("[" size+=ConstExp "]")+
protected class ArrayDeclarator_Group_1 extends GroupToken {
	
	public ArrayDeclarator_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_RightSquareBracketKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class ArrayDeclarator_LeftSquareBracketKeyword_1_0 extends KeywordToken  {
	
	public ArrayDeclarator_LeftSquareBracketKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getLeftSquareBracketKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArrayDeclarator_IdAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// size+=ConstExp
protected class ArrayDeclarator_SizeAssignment_1_1 extends AssignmentToken  {
	
	public ArrayDeclarator_SizeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getSizeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("size",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("size");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArrayDeclaratorAccess().getSizeConstExpParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArrayDeclarator_LeftSquareBracketKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class ArrayDeclarator_RightSquareBracketKeyword_1_2 extends KeywordToken  {
	
	public ArrayDeclarator_RightSquareBracketKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArrayDeclaratorAccess().getRightSquareBracketKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayDeclarator_SizeAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule ArrayDeclarator ****************/


/************ begin Rule StructType ****************
 *
 * StructType:
 * 	(extensibility="@final" | "@appendable")? "struct" name=ID comments+=IDLComment* "{" comments+=IDLComment*
 * 	members+=Member* "}";
 *
 **/

// (extensibility="@final" | "@appendable")? "struct" name=ID comments+=IDLComment* "{" comments+=IDLComment*
// members+=Member* "}"
protected class StructType_Group extends GroupToken {
	
	public StructType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (extensibility="@final" | "@appendable")?
protected class StructType_Alternatives_0 extends AlternativesToken {

	public StructType_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_ExtensibilityAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extensibility="@final"
protected class StructType_ExtensibilityAssignment_0_0 extends AssignmentToken  {
	
	public StructType_ExtensibilityAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getExtensibilityAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extensibility",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extensibility");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getStructTypeAccess().getExtensibilityFinalKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStructTypeAccess().getExtensibilityFinalKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}


// "struct"
protected class StructType_StructKeyword_1 extends KeywordToken  {
	
	public StructType_StructKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getStructKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class StructType_NameAssignment_2 extends AssignmentToken  {
	
	public StructType_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_StructKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStructTypeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStructTypeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class StructType_CommentsAssignment_3 extends AssignmentToken  {
	
	public StructType_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructTypeAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructType_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StructType_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class StructType_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public StructType_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StructType_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class StructType_CommentsAssignment_5 extends AssignmentToken  {
	
	public StructType_CommentsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getCommentsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructTypeAccess().getCommentsIDLCommentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructType_CommentsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StructType_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// members+=Member*
protected class StructType_MembersAssignment_6 extends AssignmentToken  {
	
	public StructType_MembersAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getMembersAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Member_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("members",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("members");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMemberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructTypeAccess().getMembersMemberParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructType_MembersAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StructType_CommentsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new StructType_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StructType_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public StructType_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_MembersAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StructType_CommentsAssignment_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StructType_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule StructType ****************/


/************ begin Rule TypeDecl ****************
 *
 * TypeDecl:
 * 	"typedef" TypeDeclarator
 * 	| StructType
 * 	| UnionType
 * 	| EnumType
 * 	| ConstrForwardDecl;
 *
 **/

// "typedef" TypeDeclarator | StructType | UnionType | EnumType | ConstrForwardDecl
protected class TypeDecl_Alternatives extends AlternativesToken {

	public TypeDecl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TypeDecl_StructTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TypeDecl_UnionTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TypeDecl_EnumTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new TypeDecl_ConstrForwardDeclParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "typedef" TypeDeclarator
protected class TypeDecl_Group_0 extends GroupToken {
	
	public TypeDecl_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_TypeDeclaratorParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "typedef"
protected class TypeDecl_TypedefKeyword_0_0 extends KeywordToken  {
	
	public TypeDecl_TypedefKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getTypedefKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TypeDeclarator
protected class TypeDecl_TypeDeclaratorParserRuleCall_0_1 extends RuleCallToken {
	
	public TypeDecl_TypeDeclaratorParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getTypeDeclaratorParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDeclarator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TypeDeclarator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_TypedefKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// StructType
protected class TypeDecl_StructTypeParserRuleCall_1 extends RuleCallToken {
	
	public TypeDecl_StructTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getStructTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StructType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnionType
protected class TypeDecl_UnionTypeParserRuleCall_2 extends RuleCallToken {
	
	public TypeDecl_UnionTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getUnionTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UnionType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumType
protected class TypeDecl_EnumTypeParserRuleCall_3 extends RuleCallToken {
	
	public TypeDecl_EnumTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getEnumTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ConstrForwardDecl
protected class TypeDecl_ConstrForwardDeclParserRuleCall_4 extends RuleCallToken {
	
	public TypeDecl_ConstrForwardDeclParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getConstrForwardDeclParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstrForwardDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ConstrForwardDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeDecl ****************/


/************ begin Rule TypeDeclarator ****************
 *
 * TypeDeclarator:
 * 	comments+=IDLComment* type=TypeSpec declarators+=Declarator+;
 *
 **/

// comments+=IDLComment* type=TypeSpec declarators+=Declarator+
protected class TypeDeclarator_Group extends GroupToken {
	
	public TypeDeclarator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeDeclaratorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDeclarator_DeclaratorsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class TypeDeclarator_CommentsAssignment_0 extends AssignmentToken  {
	
	public TypeDeclarator_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeDeclaratorAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTypeDeclaratorAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeDeclarator_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// type=TypeSpec
protected class TypeDeclarator_TypeAssignment_1 extends AssignmentToken  {
	
	public TypeDeclarator_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeDeclaratorAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTypeDeclaratorAccess().getTypeTypeSpecParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeDeclarator_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// declarators+=Declarator+
protected class TypeDeclarator_DeclaratorsAssignment_2 extends AssignmentToken  {
	
	public TypeDeclarator_DeclaratorsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeDeclaratorAccess().getDeclaratorsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declarators",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declarators");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaratorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTypeDeclaratorAccess().getDeclaratorsDeclaratorParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeDeclarator_DeclaratorsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TypeDeclarator_TypeAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TypeDeclarator ****************/


/************ begin Rule TypeSpec ****************
 *
 * TypeSpec:
 * 	SimpleTypeSpec | ConstrTypeSpec;
 *
 **/

// SimpleTypeSpec | ConstrTypeSpec
protected class TypeSpec_Alternatives extends AlternativesToken {

	public TypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeSpec_SimpleTypeSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TypeSpec_ConstrTypeSpecParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleTypeSpec
protected class TypeSpec_SimpleTypeSpecParserRuleCall_0 extends RuleCallToken {
	
	public TypeSpec_SimpleTypeSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeSpecAccess().getSimpleTypeSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ConstrTypeSpec
protected class TypeSpec_ConstrTypeSpecParserRuleCall_1 extends RuleCallToken {
	
	public TypeSpec_ConstrTypeSpecParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeSpecAccess().getConstrTypeSpecParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstrTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ConstrTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeSpec ****************/


/************ begin Rule SimpleTypeSpec ****************
 *
 * SimpleTypeSpec:
 * 	BaseTypeSpec | TemplateTypeSpec | ScopedName;
 *
 **/

// BaseTypeSpec | TemplateTypeSpec | ScopedName
protected class SimpleTypeSpec_Alternatives extends AlternativesToken {

	public SimpleTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleTypeSpec_BaseTypeSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleTypeSpec_TemplateTypeSpecParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleTypeSpec_ScopedNameParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BaseTypeSpec
protected class SimpleTypeSpec_BaseTypeSpecParserRuleCall_0 extends RuleCallToken {
	
	public SimpleTypeSpec_BaseTypeSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeSpecAccess().getBaseTypeSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BaseTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BaseTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TemplateTypeSpec
protected class SimpleTypeSpec_TemplateTypeSpecParserRuleCall_1 extends RuleCallToken {
	
	public SimpleTypeSpec_TemplateTypeSpecParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeSpecAccess().getTemplateTypeSpecParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TemplateTypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ScopedName
protected class SimpleTypeSpec_ScopedNameParserRuleCall_2 extends RuleCallToken {
	
	public SimpleTypeSpec_ScopedNameParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeSpecAccess().getScopedNameParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ScopedName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SimpleTypeSpec ****************/


/************ begin Rule TemplateTypeSpec ****************
 *
 * TemplateTypeSpec:
 * 	SequenceType | StringType | WideStringType | FixedPtType;
 *
 **/

// SequenceType | StringType | WideStringType | FixedPtType
protected class TemplateTypeSpec_Alternatives extends AlternativesToken {

	public TemplateTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemplateTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateTypeSpec_SequenceTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateTypeSpec_StringTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TemplateTypeSpec_WideStringTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TemplateTypeSpec_FixedPtTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SequenceType
protected class TemplateTypeSpec_SequenceTypeParserRuleCall_0 extends RuleCallToken {
	
	public TemplateTypeSpec_SequenceTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateTypeSpecAccess().getSequenceTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SequenceType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringType
protected class TemplateTypeSpec_StringTypeParserRuleCall_1 extends RuleCallToken {
	
	public TemplateTypeSpec_StringTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateTypeSpecAccess().getStringTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WideStringType
protected class TemplateTypeSpec_WideStringTypeParserRuleCall_2 extends RuleCallToken {
	
	public TemplateTypeSpec_WideStringTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateTypeSpecAccess().getWideStringTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WideStringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FixedPtType
protected class TemplateTypeSpec_FixedPtTypeParserRuleCall_3 extends RuleCallToken {
	
	public TemplateTypeSpec_FixedPtTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateTypeSpecAccess().getFixedPtTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FixedPtType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TemplateTypeSpec ****************/


/************ begin Rule ConstrTypeSpec ****************
 *
 * ConstrTypeSpec:
 * 	StructType | UnionType | EnumType;
 *
 **/

// StructType | UnionType | EnumType
protected class ConstrTypeSpec_Alternatives extends AlternativesToken {

	public ConstrTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstrTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstrTypeSpec_StructTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstrTypeSpec_UnionTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ConstrTypeSpec_EnumTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructType
protected class ConstrTypeSpec_StructTypeParserRuleCall_0 extends RuleCallToken {
	
	public ConstrTypeSpec_StructTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstrTypeSpecAccess().getStructTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StructType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnionType
protected class ConstrTypeSpec_UnionTypeParserRuleCall_1 extends RuleCallToken {
	
	public ConstrTypeSpec_UnionTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstrTypeSpecAccess().getUnionTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UnionType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumType
protected class ConstrTypeSpec_EnumTypeParserRuleCall_2 extends RuleCallToken {
	
	public ConstrTypeSpec_EnumTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstrTypeSpecAccess().getEnumTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConstrTypeSpec ****************/


/************ begin Rule UnionType ****************
 *
 * UnionType:
 * 	(extensibility="@final" | "@appendable")? "union" name=ID comments+=IDLComment* "switch" "(" switch=SwitchTypeSpec
 * 	")" "{" body=SwitchBody "}";
 *
 **/

// (extensibility="@final" | "@appendable")? "union" name=ID comments+=IDLComment* "switch" "(" switch=SwitchTypeSpec ")"
// "{" body=SwitchBody "}"
protected class UnionType_Group extends GroupToken {
	
	public UnionType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_RightCurlyBracketKeyword_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (extensibility="@final" | "@appendable")?
protected class UnionType_Alternatives_0 extends AlternativesToken {

	public UnionType_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_ExtensibilityAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extensibility="@final"
protected class UnionType_ExtensibilityAssignment_0_0 extends AssignmentToken  {
	
	public UnionType_ExtensibilityAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getExtensibilityAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extensibility",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extensibility");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getUnionTypeAccess().getExtensibilityFinalKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUnionTypeAccess().getExtensibilityFinalKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}


// "union"
protected class UnionType_UnionKeyword_1 extends KeywordToken  {
	
	public UnionType_UnionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getUnionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class UnionType_NameAssignment_2 extends AssignmentToken  {
	
	public UnionType_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_UnionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnionTypeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUnionTypeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class UnionType_CommentsAssignment_3 extends AssignmentToken  {
	
	public UnionType_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnionTypeAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnionType_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new UnionType_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "switch"
protected class UnionType_SwitchKeyword_4 extends KeywordToken  {
	
	public UnionType_SwitchKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getSwitchKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnionType_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "("
protected class UnionType_LeftParenthesisKeyword_5 extends KeywordToken  {
	
	public UnionType_LeftParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getLeftParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_SwitchKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// switch=SwitchTypeSpec
protected class UnionType_SwitchAssignment_6 extends AssignmentToken  {
	
	public UnionType_SwitchAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getSwitchAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SwitchTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("switch",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("switch");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSwitchTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnionTypeAccess().getSwitchSwitchTypeSpecParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnionType_LeftParenthesisKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class UnionType_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public UnionType_RightParenthesisKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getRightParenthesisKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_SwitchAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class UnionType_LeftCurlyBracketKeyword_8 extends KeywordToken  {
	
	public UnionType_LeftCurlyBracketKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_RightParenthesisKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=SwitchBody
protected class UnionType_BodyAssignment_9 extends AssignmentToken  {
	
	public UnionType_BodyAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getBodyAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SwitchBody_CaseAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSwitchBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnionTypeAccess().getBodySwitchBodyParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnionType_LeftCurlyBracketKeyword_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class UnionType_RightCurlyBracketKeyword_10 extends KeywordToken  {
	
	public UnionType_RightCurlyBracketKeyword_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionType_BodyAssignment_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnionType ****************/


/************ begin Rule SwitchTypeSpec ****************
 *
 * SwitchTypeSpec:
 * 	IntegerType | CharType | BooleanType | EnumType | ScopedName;
 *
 **/

// IntegerType | CharType | BooleanType | EnumType | ScopedName
protected class SwitchTypeSpec_Alternatives extends AlternativesToken {

	public SwitchTypeSpec_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SwitchTypeSpec_IntegerTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SwitchTypeSpec_CharTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SwitchTypeSpec_BooleanTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SwitchTypeSpec_EnumTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SwitchTypeSpec_ScopedNameParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IntegerType
protected class SwitchTypeSpec_IntegerTypeParserRuleCall_0 extends RuleCallToken {
	
	public SwitchTypeSpec_IntegerTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getIntegerTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntegerType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IntegerType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CharType
protected class SwitchTypeSpec_CharTypeParserRuleCall_1 extends RuleCallToken {
	
	public SwitchTypeSpec_CharTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getCharTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(CharType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanType
protected class SwitchTypeSpec_BooleanTypeParserRuleCall_2 extends RuleCallToken {
	
	public SwitchTypeSpec_BooleanTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getBooleanTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumType
protected class SwitchTypeSpec_EnumTypeParserRuleCall_3 extends RuleCallToken {
	
	public SwitchTypeSpec_EnumTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getEnumTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ScopedName
protected class SwitchTypeSpec_ScopedNameParserRuleCall_4 extends RuleCallToken {
	
	public SwitchTypeSpec_ScopedNameParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSwitchTypeSpecAccess().getScopedNameParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ScopedName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SwitchTypeSpec ****************/


/************ begin Rule SwitchBody ****************
 *
 * SwitchBody:
 * 	case+=Case+;
 *
 **/

// case+=Case+
protected class SwitchBody_CaseAssignment extends AssignmentToken  {
	
	public SwitchBody_CaseAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchBodyAccess().getCaseAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("case",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSwitchBodyAccess().getCaseCaseParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchBody_CaseAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule SwitchBody ****************/


/************ begin Rule Case ****************
 *
 * Case:
 * 	comments+=IDLComment* (label+=CaseLabel comments+=IDLComment*)+ comments+=IDLComment* spec=ElementSpec ";"
 * 	comments+=IDLComment*;
 *
 **/

// comments+=IDLComment* (label+=CaseLabel comments+=IDLComment*)+ comments+=IDLComment* spec=ElementSpec ";"
// comments+=IDLComment*
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_CommentsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Case_SemicolonKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class Case_CommentsAssignment_0 extends AssignmentToken  {
	
	public Case_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (label+=CaseLabel comments+=IDLComment*)+
protected class Case_Group_1 extends GroupToken {
	
	public Case_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_CommentsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Case_LabelAssignment_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// label+=CaseLabel
protected class Case_LabelAssignment_1_0 extends AssignmentToken  {
	
	public Case_LabelAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getLabelAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("label",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("label");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getLabelCaseLabelParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_Group_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}

// comments+=IDLComment*
protected class Case_CommentsAssignment_1_1 extends AssignmentToken  {
	
	public Case_CommentsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getCommentsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getCommentsIDLCommentParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommentsAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_LabelAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// comments+=IDLComment*
protected class Case_CommentsAssignment_2 extends AssignmentToken  {
	
	public Case_CommentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getCommentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getCommentsIDLCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_Group_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// spec=ElementSpec
protected class Case_SpecAssignment_3 extends AssignmentToken  {
	
	public Case_SpecAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getSpecAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spec");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getSpecElementSpecParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_Group_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Case_SemicolonKeyword_4 extends KeywordToken  {
	
	public Case_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_SpecAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class Case_CommentsAssignment_5 extends AssignmentToken  {
	
	public Case_CommentsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getCommentsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getCommentsIDLCommentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommentsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_SemicolonKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Case ****************/


/************ begin Rule CaseLabel ****************
 *
 * CaseLabel:
 * 	isCase?="case" constExp=ConstExp ":" | isDefault?="default" ":";
 *
 **/

// isCase?="case" constExp=ConstExp ":" | isDefault?="default" ":"
protected class CaseLabel_Alternatives extends AlternativesToken {

	public CaseLabel_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CaseLabel_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseLabelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// isCase?="case" constExp=ConstExp ":"
protected class CaseLabel_Group_0 extends GroupToken {
	
	public CaseLabel_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_ColonKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// isCase?="case"
protected class CaseLabel_IsCaseAssignment_0_0 extends AssignmentToken  {
	
	public CaseLabel_IsCaseAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getIsCaseAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isCase",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isCase");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCaseLabelAccess().getIsCaseCaseKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// constExp=ConstExp
protected class CaseLabel_ConstExpAssignment_0_1 extends AssignmentToken  {
	
	public CaseLabel_ConstExpAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getConstExpAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constExp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseLabelAccess().getConstExpConstExpParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseLabel_IsCaseAssignment_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class CaseLabel_ColonKeyword_0_2 extends KeywordToken  {
	
	public CaseLabel_ColonKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getColonKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_ConstExpAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// isDefault?="default" ":"
protected class CaseLabel_Group_1 extends GroupToken {
	
	public CaseLabel_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_ColonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// isDefault?="default"
protected class CaseLabel_IsDefaultAssignment_1_0 extends AssignmentToken  {
	
	public CaseLabel_IsDefaultAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getIsDefaultAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isDefault",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCaseLabelAccess().getIsDefaultDefaultKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class CaseLabel_ColonKeyword_1_1 extends KeywordToken  {
	
	public CaseLabel_ColonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseLabelAccess().getColonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseLabel_IsDefaultAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule CaseLabel ****************/


/************ begin Rule ElementSpec ****************
 *
 * ElementSpec:
 * 	type=TypeSpec declarator=Declarator;
 *
 **/

// type=TypeSpec declarator=Declarator
protected class ElementSpec_Group extends GroupToken {
	
	public ElementSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSpec_DeclaratorAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=TypeSpec
protected class ElementSpec_TypeAssignment_0 extends AssignmentToken  {
	
	public ElementSpec_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementSpecAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementSpecAccess().getTypeTypeSpecParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// declarator=Declarator
protected class ElementSpec_DeclaratorAssignment_1 extends AssignmentToken  {
	
	public ElementSpec_DeclaratorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementSpecAccess().getDeclaratorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declarator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declarator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaratorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementSpecAccess().getDeclaratorDeclaratorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementSpec_TypeAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElementSpec ****************/


/************ begin Rule EnumType ****************
 *
 * EnumType:
 * 	"enum" name=ID comments+=IDLComment* "{" comments+=IDLComment* literal+=ID ("," comments+=IDLComment* literal+=ID)*
 * 	comments+=IDLComment* "}";
 *
 **/

// "enum" name=ID comments+=IDLComment* "{" comments+=IDLComment* literal+=ID ("," comments+=IDLComment* literal+=ID)*
// comments+=IDLComment* "}"
protected class EnumType_Group extends GroupToken {
	
	public EnumType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_RightCurlyBracketKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "enum"
protected class EnumType_EnumKeyword_0 extends KeywordToken  {
	
	public EnumType_EnumKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getEnumKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class EnumType_NameAssignment_1 extends AssignmentToken  {
	
	public EnumType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_EnumKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class EnumType_CommentsAssignment_2 extends AssignmentToken  {
	
	public EnumType_CommentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getCommentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumTypeAccess().getCommentsIDLCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class EnumType_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public EnumType_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class EnumType_CommentsAssignment_4 extends AssignmentToken  {
	
	public EnumType_CommentsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getCommentsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumTypeAccess().getCommentsIDLCommentParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumType_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// literal+=ID
protected class EnumType_LiteralAssignment_5 extends AssignmentToken  {
	
	public EnumType_LiteralAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getLiteralAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumType_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumTypeAccess().getLiteralIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumTypeAccess().getLiteralIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("," comments+=IDLComment* literal+=ID)*
protected class EnumType_Group_6 extends GroupToken {
	
	public EnumType_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_LiteralAssignment_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EnumType_CommaKeyword_6_0 extends KeywordToken  {
	
	public EnumType_CommaKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getCommaKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumType_LiteralAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// comments+=IDLComment*
protected class EnumType_CommentsAssignment_6_1 extends AssignmentToken  {
	
	public EnumType_CommentsAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getCommentsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumTypeAccess().getCommentsIDLCommentParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumType_CommaKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// literal+=ID
protected class EnumType_LiteralAssignment_6_2 extends AssignmentToken  {
	
	public EnumType_LiteralAssignment_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getLiteralAssignment_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumType_CommaKeyword_6_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumTypeAccess().getLiteralIDTerminalRuleCall_6_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumTypeAccess().getLiteralIDTerminalRuleCall_6_2_0();
			return obj;
		}
		return null;
	}

}


// comments+=IDLComment*
protected class EnumType_CommentsAssignment_7 extends AssignmentToken  {
	
	public EnumType_CommentsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getCommentsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumTypeAccess().getCommentsIDLCommentParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumType_Group_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new EnumType_LiteralAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EnumType_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public EnumType_RightCurlyBracketKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumType_CommentsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumType_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EnumType_LiteralAssignment_5(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule EnumType ****************/


/************ begin Rule SequenceType ****************
 *
 * SequenceType:
 * 	"sequence" "<" type=SimpleTypeSpec ("," size=PositiveIntConst)? ">";
 *
 **/

// "sequence" "<" type=SimpleTypeSpec ("," size=PositiveIntConst)? ">"
protected class SequenceType_Group extends GroupToken {
	
	public SequenceType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_GreaterThanSignKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "sequence"
protected class SequenceType_SequenceKeyword_0 extends KeywordToken  {
	
	public SequenceType_SequenceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getSequenceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<"
protected class SequenceType_LessThanSignKeyword_1 extends KeywordToken  {
	
	public SequenceType_LessThanSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getLessThanSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_SequenceKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=SimpleTypeSpec
protected class SequenceType_TypeAssignment_2 extends AssignmentToken  {
	
	public SequenceType_TypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSequenceTypeAccess().getTypeSimpleTypeSpecParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SequenceType_LessThanSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," size=PositiveIntConst)?
protected class SequenceType_Group_3 extends GroupToken {
	
	public SequenceType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_SizeAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class SequenceType_CommaKeyword_3_0 extends KeywordToken  {
	
	public SequenceType_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_TypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// size=PositiveIntConst
protected class SequenceType_SizeAssignment_3_1 extends AssignmentToken  {
	
	public SequenceType_SizeAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getSizeAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PositiveIntConst_ExpAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("size",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("size");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPositiveIntConstRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSequenceTypeAccess().getSizePositiveIntConstParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SequenceType_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class SequenceType_GreaterThanSignKeyword_4 extends KeywordToken  {
	
	public SequenceType_GreaterThanSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceTypeAccess().getGreaterThanSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SequenceType_TypeAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SequenceType ****************/


/************ begin Rule NativeType ****************
 *
 * NativeType:
 * 	"native" name=ID;
 *
 **/

// "native" name=ID
protected class NativeType_Group extends GroupToken {
	
	public NativeType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "native"
protected class NativeType_NativeKeyword_0 extends KeywordToken  {
	
	public NativeType_NativeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNativeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class NativeType_NameAssignment_1 extends AssignmentToken  {
	
	public NativeType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NativeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNativeTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNativeTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NativeType ****************/


/************ begin Rule FixedPtType ****************
 *
 * FixedPtType:
 * 	"fixed" "<" lower=PositiveIntConst "," upper=PositiveIntConst ">";
 *
 **/

// "fixed" "<" lower=PositiveIntConst "," upper=PositiveIntConst ">"
protected class FixedPtType_Group extends GroupToken {
	
	public FixedPtType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtType_GreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "fixed"
protected class FixedPtType_FixedKeyword_0 extends KeywordToken  {
	
	public FixedPtType_FixedKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getFixedKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<"
protected class FixedPtType_LessThanSignKeyword_1 extends KeywordToken  {
	
	public FixedPtType_LessThanSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getLessThanSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtType_FixedKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lower=PositiveIntConst
protected class FixedPtType_LowerAssignment_2 extends AssignmentToken  {
	
	public FixedPtType_LowerAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getLowerAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PositiveIntConst_ExpAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lower");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPositiveIntConstRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFixedPtTypeAccess().getLowerPositiveIntConstParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FixedPtType_LessThanSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class FixedPtType_CommaKeyword_3 extends KeywordToken  {
	
	public FixedPtType_CommaKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getCommaKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtType_LowerAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upper=PositiveIntConst
protected class FixedPtType_UpperAssignment_4 extends AssignmentToken  {
	
	public FixedPtType_UpperAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getUpperAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PositiveIntConst_ExpAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upper",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upper");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPositiveIntConstRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFixedPtTypeAccess().getUpperPositiveIntConstParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FixedPtType_CommaKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class FixedPtType_GreaterThanSignKeyword_5 extends KeywordToken  {
	
	public FixedPtType_GreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedPtTypeAccess().getGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtType_UpperAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FixedPtType ****************/


/************ begin Rule ConstrForwardDecl ****************
 *
 * ConstrForwardDecl:
 * 	StructForwardDecl | UnionForwardDecl;
 *
 **/

// StructForwardDecl | UnionForwardDecl
protected class ConstrForwardDecl_Alternatives extends AlternativesToken {

	public ConstrForwardDecl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstrForwardDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstrForwardDecl_StructForwardDeclParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstrForwardDecl_UnionForwardDeclParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructForwardDecl
protected class ConstrForwardDecl_StructForwardDeclParserRuleCall_0 extends RuleCallToken {
	
	public ConstrForwardDecl_StructForwardDeclParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstrForwardDeclAccess().getStructForwardDeclParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructForwardDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StructForwardDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnionForwardDecl
protected class ConstrForwardDecl_UnionForwardDeclParserRuleCall_1 extends RuleCallToken {
	
	public ConstrForwardDecl_UnionForwardDeclParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstrForwardDeclAccess().getUnionForwardDeclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionForwardDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UnionForwardDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConstrForwardDecl ****************/


/************ begin Rule StructForwardDecl ****************
 *
 * StructForwardDecl:
 * 	"struct" name=ID;
 *
 **/

// "struct" name=ID
protected class StructForwardDecl_Group extends GroupToken {
	
	public StructForwardDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructForwardDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructForwardDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "struct"
protected class StructForwardDecl_StructKeyword_0 extends KeywordToken  {
	
	public StructForwardDecl_StructKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructForwardDeclAccess().getStructKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class StructForwardDecl_NameAssignment_1 extends AssignmentToken  {
	
	public StructForwardDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructForwardDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructForwardDecl_StructKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStructForwardDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStructForwardDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StructForwardDecl ****************/


/************ begin Rule UnionForwardDecl ****************
 *
 * UnionForwardDecl:
 * 	"union" name=ID;
 *
 **/

// "union" name=ID
protected class UnionForwardDecl_Group extends GroupToken {
	
	public UnionForwardDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnionForwardDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionForwardDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "union"
protected class UnionForwardDecl_UnionKeyword_0 extends KeywordToken  {
	
	public UnionForwardDecl_UnionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionForwardDeclAccess().getUnionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class UnionForwardDecl_NameAssignment_1 extends AssignmentToken  {
	
	public UnionForwardDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnionForwardDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionForwardDecl_UnionKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnionForwardDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUnionForwardDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnionForwardDecl ****************/


/************ begin Rule PositiveIntConst ****************
 *
 * PositiveIntConst:
 * 	exp=ConstExp;
 *
 **/

// exp=ConstExp
protected class PositiveIntConst_ExpAssignment extends AssignmentToken  {
	
	public PositiveIntConst_ExpAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPositiveIntConstAccess().getExpAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPositiveIntConstRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("exp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPositiveIntConstAccess().getExpConstExpParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule PositiveIntConst ****************/


/************ begin Rule ConstDecl ****************
 *
 * ConstDecl:
 * 	"const" type=ConstType name=ID "=" value=ConstExp comments+=IDLComment*;
 *
 **/

// "const" type=ConstType name=ID "=" value=ConstExp comments+=IDLComment*
protected class ConstDecl_Group extends GroupToken {
	
	public ConstDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_CommentsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstDecl_ValueAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "const"
protected class ConstDecl_ConstKeyword_0 extends KeywordToken  {
	
	public ConstDecl_ConstKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getConstKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ConstType
protected class ConstDecl_TypeAssignment_1 extends AssignmentToken  {
	
	public ConstDecl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstDeclAccess().getTypeConstTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstDecl_ConstKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ConstDecl_NameAssignment_2 extends AssignmentToken  {
	
	public ConstDecl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConstDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConstDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class ConstDecl_EqualsSignKeyword_3 extends KeywordToken  {
	
	public ConstDecl_EqualsSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getEqualsSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=ConstExp
protected class ConstDecl_ValueAssignment_4 extends AssignmentToken  {
	
	public ConstDecl_ValueAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getValueAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstExpRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstDeclAccess().getValueConstExpParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstDecl_EqualsSignKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// comments+=IDLComment*
protected class ConstDecl_CommentsAssignment_5 extends AssignmentToken  {
	
	public ConstDecl_CommentsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstDeclAccess().getCommentsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstDeclAccess().getCommentsIDLCommentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstDecl_CommentsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ConstDecl_ValueAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConstDecl ****************/


/************ begin Rule ConstType ****************
 *
 * ConstType:
 * 	IntegerType | CharType | WideCharType | BooleanType | FloatingPtType | StringType | WideStringType | FixedPtConstType
 * 	| ScopedName | OctetType;
 *
 **/

// IntegerType | CharType | WideCharType | BooleanType | FloatingPtType | StringType | WideStringType | FixedPtConstType |
// ScopedName | OctetType
protected class ConstType_Alternatives extends AlternativesToken {

	public ConstType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstType_IntegerTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstType_CharTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ConstType_WideCharTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ConstType_BooleanTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ConstType_FloatingPtTypeParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ConstType_StringTypeParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new ConstType_WideStringTypeParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new ConstType_FixedPtConstTypeParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new ConstType_ScopedNameParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new ConstType_OctetTypeParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IntegerType
protected class ConstType_IntegerTypeParserRuleCall_0 extends RuleCallToken {
	
	public ConstType_IntegerTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getIntegerTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntegerType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IntegerType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CharType
protected class ConstType_CharTypeParserRuleCall_1 extends RuleCallToken {
	
	public ConstType_CharTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getCharTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(CharType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WideCharType
protected class ConstType_WideCharTypeParserRuleCall_2 extends RuleCallToken {
	
	public ConstType_WideCharTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getWideCharTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideCharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WideCharType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanType
protected class ConstType_BooleanTypeParserRuleCall_3 extends RuleCallToken {
	
	public ConstType_BooleanTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getBooleanTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FloatingPtType
protected class ConstType_FloatingPtTypeParserRuleCall_4 extends RuleCallToken {
	
	public ConstType_FloatingPtTypeParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getFloatingPtTypeParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatingPtType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FloatingPtType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringType
protected class ConstType_StringTypeParserRuleCall_5 extends RuleCallToken {
	
	public ConstType_StringTypeParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getStringTypeParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WideStringType
protected class ConstType_WideStringTypeParserRuleCall_6 extends RuleCallToken {
	
	public ConstType_WideStringTypeParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getWideStringTypeParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WideStringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(WideStringType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FixedPtConstType
protected class ConstType_FixedPtConstTypeParserRuleCall_7 extends RuleCallToken {
	
	public ConstType_FixedPtConstTypeParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getFixedPtConstTypeParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtConstType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FixedPtConstType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ScopedName
protected class ConstType_ScopedNameParserRuleCall_8 extends RuleCallToken {
	
	public ConstType_ScopedNameParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getScopedNameParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ScopedName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OctetType
protected class ConstType_OctetTypeParserRuleCall_9 extends RuleCallToken {
	
	public ConstType_OctetTypeParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstTypeAccess().getOctetTypeParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OctetType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OctetType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConstType ****************/


/************ begin Rule FixedPtConstType ****************
 *
 * FixedPtConstType:
 * 	{FixedPtConstType}
 * 	"fixed";
 *
 **/

// {FixedPtConstType} "fixed"
protected class FixedPtConstType_Group extends GroupToken {
	
	public FixedPtConstType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedPtConstTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtConstType_FixedKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FixedPtConstType}
protected class FixedPtConstType_FixedPtConstTypeAction_0 extends ActionToken  {

	public FixedPtConstType_FixedPtConstTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "fixed"
protected class FixedPtConstType_FixedKeyword_1 extends KeywordToken  {
	
	public FixedPtConstType_FixedKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedPtConstTypeAccess().getFixedKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedPtConstType_FixedPtConstTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FixedPtConstType ****************/


/************ begin Rule ConstExp ****************
 *
 * ConstExp:
 * 	OrExpr;
 *
 **/

// OrExpr
protected class ConstExp_OrExprParserRuleCall extends RuleCallToken {
	
	public ConstExp_OrExprParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstExpAccess().getOrExprParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ConstExp ****************/


/************ begin Rule OrExpr ****************
 *
 * OrExpr:
 * 	lhs=XOrExpr (op="|" rhs=OrExpr)*;
 *
 **/

// lhs=XOrExpr (op="|" rhs=OrExpr)*
protected class OrExpr_Group extends GroupToken {
	
	public OrExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=XOrExpr
protected class OrExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public OrExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new XOrExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOrExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrExprAccess().getLhsXOrExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (op="|" rhs=OrExpr)*
protected class OrExpr_Group_1 extends GroupToken {
	
	public OrExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="|"
protected class OrExpr_OpAssignment_1_0 extends AssignmentToken  {
	
	public OrExpr_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExprAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getOrExprAccess().getOpVerticalLineKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getOrExprAccess().getOpVerticalLineKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// rhs=OrExpr
protected class OrExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public OrExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrExprAccess().getRhsOrExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpr_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpr ****************/


/************ begin Rule XOrExpr ****************
 *
 * XOrExpr:
 * 	lhs=AndExpr (op="^" rhs=XOrExpr)*;
 *
 **/

// lhs=AndExpr (op="^" rhs=XOrExpr)*
protected class XOrExpr_Group extends GroupToken {
	
	public XOrExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOrExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new XOrExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new XOrExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getXOrExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=AndExpr
protected class XOrExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public XOrExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOrExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getXOrExprAccess().getLhsAndExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (op="^" rhs=XOrExpr)*
protected class XOrExpr_Group_1 extends GroupToken {
	
	public XOrExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOrExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new XOrExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="^"
protected class XOrExpr_OpAssignment_1_0 extends AssignmentToken  {
	
	public XOrExpr_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOrExprAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new XOrExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new XOrExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getXOrExprAccess().getOpCircumflexAccentKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getXOrExprAccess().getOpCircumflexAccentKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// rhs=XOrExpr
protected class XOrExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public XOrExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOrExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new XOrExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOrExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getXOrExprAccess().getRhsXOrExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XOrExpr_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule XOrExpr ****************/


/************ begin Rule AndExpr ****************
 *
 * AndExpr:
 * 	lhs=ShiftExpr (op="&" rhs=AndExpr)*;
 *
 **/

// lhs=ShiftExpr (op="&" rhs=AndExpr)*
protected class AndExpr_Group extends GroupToken {
	
	public AndExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=ShiftExpr
protected class AndExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public AndExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShiftExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndExprAccess().getLhsShiftExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (op="&" rhs=AndExpr)*
protected class AndExpr_Group_1 extends GroupToken {
	
	public AndExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="&"
protected class AndExpr_OpAssignment_1_0 extends AssignmentToken  {
	
	public AndExpr_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExprAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAndExprAccess().getOpAmpersandKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAndExprAccess().getOpAmpersandKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// rhs=AndExpr
protected class AndExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public AndExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndExprAccess().getRhsAndExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpr_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpr ****************/


/************ begin Rule ShiftExpr ****************
 *
 * ShiftExpr:
 * 	lhs=AddExpr ((op="<<" | op=">>") rhs=ShiftExpr)*;
 *
 **/

// lhs=AddExpr ((op="<<" | op=">>") rhs=ShiftExpr)*
protected class ShiftExpr_Group extends GroupToken {
	
	public ShiftExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getShiftExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=AddExpr
protected class ShiftExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public ShiftExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAddExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getShiftExprAccess().getLhsAddExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ((op="<<" | op=">>") rhs=ShiftExpr)*
protected class ShiftExpr_Group_1 extends GroupToken {
	
	public ShiftExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="<<" | op=">>"
protected class ShiftExpr_Alternatives_1_0 extends AlternativesToken {

	public ShiftExpr_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_OpAssignment_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpr_OpAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// op="<<"
protected class ShiftExpr_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public ShiftExpr_OpAssignment_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getOpAssignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getShiftExprAccess().getOpLessThanSignLessThanSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getShiftExprAccess().getOpLessThanSignLessThanSignKeyword_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// op=">>"
protected class ShiftExpr_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public ShiftExpr_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getShiftExprAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getShiftExprAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// rhs=ShiftExpr
protected class ShiftExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public ShiftExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShiftExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getShiftExprAccess().getRhsShiftExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ShiftExpr_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ShiftExpr ****************/


/************ begin Rule AddExpr ****************
 *
 * AddExpr:
 * 	lhs=MultExpr ((op="+" | op="-") rhs=AddExpr)*;
 *
 **/

// lhs=MultExpr ((op="+" | op="-") rhs=AddExpr)*
protected class AddExpr_Group extends GroupToken {
	
	public AddExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=MultExpr
protected class AddExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public AddExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAddExprAccess().getLhsMultExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ((op="+" | op="-") rhs=AddExpr)*
protected class AddExpr_Group_1 extends GroupToken {
	
	public AddExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="+" | op="-"
protected class AddExpr_Alternatives_1_0 extends AlternativesToken {

	public AddExpr_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAddExprAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_OpAssignment_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddExpr_OpAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// op="+"
protected class AddExpr_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public AddExpr_OpAssignment_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddExprAccess().getOpAssignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAddExprAccess().getOpPlusSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAddExprAccess().getOpPlusSignKeyword_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// op="-"
protected class AddExpr_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public AddExpr_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddExprAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAddExprAccess().getOpHyphenMinusKeyword_1_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAddExprAccess().getOpHyphenMinusKeyword_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// rhs=AddExpr
protected class AddExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public AddExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAddExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAddExprAccess().getRhsAddExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AddExpr_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AddExpr ****************/


/************ begin Rule MultExpr ****************
 *
 * MultExpr:
 * 	lhs=UnaryExpr ((op="*" | op="/" | op="%") rhs=MultExpr)*;
 *
 **/

// lhs=UnaryExpr ((op="*" | op="/" | op="%") rhs=MultExpr)*
protected class MultExpr_Group extends GroupToken {
	
	public MultExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=UnaryExpr
protected class MultExpr_LhsAssignment_0 extends AssignmentToken  {
	
	public MultExpr_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultExprAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultExprAccess().getLhsUnaryExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ((op="*" | op="/" | op="%") rhs=MultExpr)*
protected class MultExpr_Group_1 extends GroupToken {
	
	public MultExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="*" | op="/" | op="%"
protected class MultExpr_Alternatives_1_0 extends AlternativesToken {

	public MultExpr_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultExprAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_OpAssignment_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultExpr_OpAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MultExpr_OpAssignment_1_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// op="*"
protected class MultExpr_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public MultExpr_OpAssignment_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultExprAccess().getOpAssignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMultExprAccess().getOpAsteriskKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMultExprAccess().getOpAsteriskKeyword_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// op="/"
protected class MultExpr_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public MultExpr_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultExprAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMultExprAccess().getOpSolidusKeyword_1_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMultExprAccess().getOpSolidusKeyword_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// op="%"
protected class MultExpr_OpAssignment_1_0_2 extends AssignmentToken  {
	
	public MultExpr_OpAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultExprAccess().getOpAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultExpr_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMultExprAccess().getOpPercentSignKeyword_1_0_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMultExprAccess().getOpPercentSignKeyword_1_0_2_0();
			return obj;
		}
		return null;
	}

}


// rhs=MultExpr
protected class MultExpr_RhsAssignment_1_1 extends AssignmentToken  {
	
	public MultExpr_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultExprAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultExprAccess().getRhsMultExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultExpr_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultExpr ****************/


/************ begin Rule UnaryExpr ****************
 *
 * UnaryExpr:
 * 	(op="-" | op="+" | op="~")? expr=PrimaryExpr;
 *
 **/

// (op="-" | op="+" | op="~")? expr=PrimaryExpr
protected class UnaryExpr_Group extends GroupToken {
	
	public UnaryExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryExpr_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (op="-" | op="+" | op="~")?
protected class UnaryExpr_Alternatives_0 extends AlternativesToken {

	public UnaryExpr_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryExpr_OpAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnaryExpr_OpAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UnaryExpr_OpAssignment_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// op="-"
protected class UnaryExpr_OpAssignment_0_0 extends AssignmentToken  {
	
	public UnaryExpr_OpAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getOpAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryExprAccess().getOpHyphenMinusKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUnaryExprAccess().getOpHyphenMinusKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// op="+"
protected class UnaryExpr_OpAssignment_0_1 extends AssignmentToken  {
	
	public UnaryExpr_OpAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getOpAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryExprAccess().getOpPlusSignKeyword_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUnaryExprAccess().getOpPlusSignKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}

// op="~"
protected class UnaryExpr_OpAssignment_0_2 extends AssignmentToken  {
	
	public UnaryExpr_OpAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getOpAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryExprAccess().getOpTildeKeyword_0_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUnaryExprAccess().getOpTildeKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}


// expr=PrimaryExpr
protected class UnaryExpr_ExprAssignment_1 extends AssignmentToken  {
	
	public UnaryExpr_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExprAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimaryExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnaryExprAccess().getExprPrimaryExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpr_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule UnaryExpr ****************/


/************ begin Rule PrimaryExpr ****************
 *
 * PrimaryExpr:
 * 	ScopedName
 * 	| Literal
 * 	| "(" ConstExp ")";
 *
 **/

// ScopedName | Literal | "(" ConstExp ")"
protected class PrimaryExpr_Alternatives extends AlternativesToken {

	public PrimaryExpr_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpr_ScopedNameParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrimaryExpr_LiteralParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrimaryExpr_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ScopedName
protected class PrimaryExpr_ScopedNameParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpr_ScopedNameParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getScopedNameParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ScopedName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Literal
protected class PrimaryExpr_LiteralParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpr_LiteralParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Literal_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "(" ConstExp ")"
protected class PrimaryExpr_Group_2 extends GroupToken {
	
	public PrimaryExpr_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpr_RightParenthesisKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class PrimaryExpr_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public PrimaryExpr_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ConstExp
protected class PrimaryExpr_ConstExpParserRuleCall_2_1 extends RuleCallToken {
	
	public PrimaryExpr_ConstExpParserRuleCall_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getConstExpParserRuleCall_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstExp_OrExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpr_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class PrimaryExpr_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public PrimaryExpr_RightParenthesisKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpr_ConstExpParserRuleCall_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule PrimaryExpr ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 * 	value=HEX_LITERAL
 * 	| value=STRING
 * 	| value=CHARACTER_LITERAL
 * 	| value=FLOATING_PT_LITERAL
 * 	| value=INTEGER_LITERAL
 * 	| value=BOOLEAN_LITERAL;
 *
 **/

// value=HEX_LITERAL | value=STRING | value=CHARACTER_LITERAL | value=FLOATING_PT_LITERAL | value=INTEGER_LITERAL |
// value=BOOLEAN_LITERAL
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_ValueAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Literal_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Literal_ValueAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Literal_ValueAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Literal_ValueAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Literal_ValueAssignment_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// value=HEX_LITERAL
protected class Literal_ValueAssignment_0 extends AssignmentToken  {
	
	public Literal_ValueAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueHEX_LITERALTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueHEX_LITERALTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// value=STRING
protected class Literal_ValueAssignment_1 extends AssignmentToken  {
	
	public Literal_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value=CHARACTER_LITERAL
protected class Literal_ValueAssignment_2 extends AssignmentToken  {
	
	public Literal_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueCHARACTER_LITERALTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueCHARACTER_LITERALTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value=FLOATING_PT_LITERAL
protected class Literal_ValueAssignment_3 extends AssignmentToken  {
	
	public Literal_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueFLOATING_PT_LITERALTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueFLOATING_PT_LITERALTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// value=INTEGER_LITERAL
protected class Literal_ValueAssignment_4 extends AssignmentToken  {
	
	public Literal_ValueAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueINTEGER_LITERALTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueINTEGER_LITERALTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// value=BOOLEAN_LITERAL
protected class Literal_ValueAssignment_5 extends AssignmentToken  {
	
	public Literal_ValueAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getValueBOOLEAN_LITERALTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getValueBOOLEAN_LITERALTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Literal ****************/


/************ begin Rule ComponentDecl ****************
 *
 * 
 *  IDL3 Definitions
 *  ComponentDecl:
 * 	comments+=IDLComment* "component" name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
 * 	supports+=ScopedName)*)?
 * 	"{" export+=ComponentExport* "}";
 *
 **/

// comments+=IDLComment* "component" name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
// supports+=ScopedName)*)? "{" export+=ComponentExport* "}"
protected class ComponentDecl_Group extends GroupToken {
	
	public ComponentDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class ComponentDecl_CommentsAssignment_0 extends AssignmentToken  {
	
	public ComponentDecl_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentDeclAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentDecl_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "component"
protected class ComponentDecl_ComponentKeyword_1 extends KeywordToken  {
	
	public ComponentDecl_ComponentKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getComponentKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class ComponentDecl_NameAssignment_2 extends AssignmentToken  {
	
	public ComponentDecl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_ComponentKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getComponentDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getComponentDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" base=ScopedName)?
protected class ComponentDecl_Group_3 extends GroupToken {
	
	public ComponentDecl_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_BaseAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class ComponentDecl_ColonKeyword_3_0 extends KeywordToken  {
	
	public ComponentDecl_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// base=ScopedName
protected class ComponentDecl_BaseAssignment_3_1 extends AssignmentToken  {
	
	public ComponentDecl_BaseAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getBaseAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("base",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentDeclAccess().getBaseScopedNameParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentDecl_ColonKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
protected class ComponentDecl_Group_4 extends GroupToken {
	
	public ComponentDecl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentDecl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "supports"
protected class ComponentDecl_SupportsKeyword_4_0 extends KeywordToken  {
	
	public ComponentDecl_SupportsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getSupportsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentDecl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class ComponentDecl_SupportsAssignment_4_1 extends AssignmentToken  {
	
	public ComponentDecl_SupportsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getSupportsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentDeclAccess().getSupportsScopedNameParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentDecl_SupportsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," supports+=ScopedName)*
protected class ComponentDecl_Group_4_2 extends GroupToken {
	
	public ComponentDecl_Group_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_SupportsAssignment_4_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ComponentDecl_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public ComponentDecl_CommaKeyword_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getCommaKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentDecl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class ComponentDecl_SupportsAssignment_4_2_1 extends AssignmentToken  {
	
	public ComponentDecl_SupportsAssignment_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getSupportsAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentDeclAccess().getSupportsScopedNameParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentDecl_CommaKeyword_4_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "{"
protected class ComponentDecl_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ComponentDecl_LeftCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getLeftCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentDecl_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ComponentDecl_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// export+=ComponentExport*
protected class ComponentDecl_ExportAssignment_6 extends AssignmentToken  {
	
	public ComponentDecl_ExportAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getExportAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("export",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("export");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentDeclAccess().getExportComponentExportParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentDecl_ExportAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ComponentDecl_LeftCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ComponentDecl_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public ComponentDecl_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentDeclAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_ExportAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentDecl_LeftCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ComponentDecl ****************/


/************ begin Rule ComponentExport ****************
 *
 * ComponentExport:
 * 	ProvidesDcl ";" | UsesDcl ";" | EmitDcl ";" | PublishesDcl ";" | ConsumesDcl ";" | AttrDecl ";" | PortDecl ";" |
 * 	Preproc | IDLComment;
 *
 **/

// ProvidesDcl ";" | UsesDcl ";" | EmitDcl ";" | PublishesDcl ";" | ConsumesDcl ";" | AttrDecl ";" | PortDecl ";" | Preproc
// | IDLComment
protected class ComponentExport_Alternatives extends AlternativesToken {

	public ComponentExport_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentExport_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ComponentExport_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ComponentExport_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ComponentExport_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ComponentExport_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new ComponentExport_Group_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new ComponentExport_PreprocParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new ComponentExport_IDLCommentParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConsumesDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEmitDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPortDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPublishesDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl ";"
protected class ComponentExport_Group_0 extends GroupToken {
	
	public ComponentExport_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl
protected class ComponentExport_ProvidesDclParserRuleCall_0_0 extends RuleCallToken {
	
	public ComponentExport_ProvidesDclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getProvidesDclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProvidesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ProvidesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_ProvidesDclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// UsesDcl ";"
protected class ComponentExport_Group_1 extends GroupToken {
	
	public ComponentExport_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UsesDcl
protected class ComponentExport_UsesDclParserRuleCall_1_0 extends RuleCallToken {
	
	public ComponentExport_UsesDclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getUsesDclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(UsesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_UsesDclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// EmitDcl ";"
protected class ComponentExport_Group_2 extends GroupToken {
	
	public ComponentExport_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmitDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EmitDcl
protected class ComponentExport_EmitDclParserRuleCall_2_0 extends RuleCallToken {
	
	public ComponentExport_EmitDclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getEmitDclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmitDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(EmitDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_EmitDclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PublishesDcl ";"
protected class ComponentExport_Group_3 extends GroupToken {
	
	public ComponentExport_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPublishesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PublishesDcl
protected class ComponentExport_PublishesDclParserRuleCall_3_0 extends RuleCallToken {
	
	public ComponentExport_PublishesDclParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getPublishesDclParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublishesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PublishesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_PublishesDclParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConsumesDcl ";"
protected class ComponentExport_Group_4 extends GroupToken {
	
	public ComponentExport_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConsumesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConsumesDcl
protected class ComponentExport_ConsumesDclParserRuleCall_4_0 extends RuleCallToken {
	
	public ComponentExport_ConsumesDclParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getConsumesDclParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConsumesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConsumesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_ConsumesDclParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// AttrDecl ";"
protected class ComponentExport_Group_5 extends GroupToken {
	
	public ComponentExport_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrDecl
protected class ComponentExport_AttrDeclParserRuleCall_5_0 extends RuleCallToken {
	
	public ComponentExport_AttrDeclParserRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getAttrDeclParserRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AttrDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_5_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_AttrDeclParserRuleCall_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PortDecl ";"
protected class ComponentExport_Group_6 extends GroupToken {
	
	public ComponentExport_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_SemicolonKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PortDecl
protected class ComponentExport_PortDeclParserRuleCall_6_0 extends RuleCallToken {
	
	public ComponentExport_PortDeclParserRuleCall_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getPortDeclParserRuleCall_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PortDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ComponentExport_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public ComponentExport_SemicolonKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getSemicolonKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentExport_PortDeclParserRuleCall_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Preproc
protected class ComponentExport_PreprocParserRuleCall_7 extends RuleCallToken {
	
	public ComponentExport_PreprocParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getPreprocParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Preproc_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Preproc_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IDLComment
protected class ComponentExport_IDLCommentParserRuleCall_8 extends RuleCallToken {
	
	public ComponentExport_IDLCommentParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentExportAccess().getIDLCommentParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ComponentExport ****************/


/************ begin Rule ProvidesDcl ****************
 *
 * ProvidesDcl:
 * 	"provides" type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// "provides" type=ScopedName name=ID comments+=IDLComment*
protected class ProvidesDcl_Group extends GroupToken {
	
	public ProvidesDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProvidesDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProvidesDcl_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProvidesDcl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "provides"
protected class ProvidesDcl_ProvidesKeyword_0 extends KeywordToken  {
	
	public ProvidesDcl_ProvidesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidesDclAccess().getProvidesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class ProvidesDcl_TypeAssignment_1 extends AssignmentToken  {
	
	public ProvidesDcl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidesDclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProvidesDclAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidesDcl_ProvidesKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ProvidesDcl_NameAssignment_2 extends AssignmentToken  {
	
	public ProvidesDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidesDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProvidesDcl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProvidesDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProvidesDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class ProvidesDcl_CommentsAssignment_3 extends AssignmentToken  {
	
	public ProvidesDcl_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidesDclAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProvidesDclAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidesDcl_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProvidesDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ProvidesDcl ****************/


/************ begin Rule UsesDcl ****************
 *
 * UsesDcl:
 * 	"uses" isMultiple?="multiple"? type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// "uses" isMultiple?="multiple"? type=ScopedName name=ID comments+=IDLComment*
protected class UsesDcl_Group extends GroupToken {
	
	public UsesDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_CommentsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UsesDcl_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "uses"
protected class UsesDcl_UsesKeyword_0 extends KeywordToken  {
	
	public UsesDcl_UsesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getUsesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// isMultiple?="multiple"?
protected class UsesDcl_IsMultipleAssignment_1 extends AssignmentToken  {
	
	public UsesDcl_IsMultipleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getIsMultipleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_UsesKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isMultiple",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isMultiple");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUsesDclAccess().getIsMultipleMultipleKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// type=ScopedName
protected class UsesDcl_TypeAssignment_2 extends AssignmentToken  {
	
	public UsesDcl_TypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUsesDclAccess().getTypeScopedNameParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UsesDcl_IsMultipleAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new UsesDcl_UsesKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class UsesDcl_NameAssignment_3 extends AssignmentToken  {
	
	public UsesDcl_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_TypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUsesDclAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUsesDclAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class UsesDcl_CommentsAssignment_4 extends AssignmentToken  {
	
	public UsesDcl_CommentsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUsesDclAccess().getCommentsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUsesDclAccess().getCommentsIDLCommentParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UsesDcl_CommentsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new UsesDcl_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UsesDcl ****************/


/************ begin Rule PublishesDcl ****************
 *
 * PublishesDcl:
 * 	"publishes" type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// "publishes" type=ScopedName name=ID comments+=IDLComment*
protected class PublishesDcl_Group extends GroupToken {
	
	public PublishesDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPublishesDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublishesDcl_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublishesDcl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPublishesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "publishes"
protected class PublishesDcl_PublishesKeyword_0 extends KeywordToken  {
	
	public PublishesDcl_PublishesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPublishesDclAccess().getPublishesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class PublishesDcl_TypeAssignment_1 extends AssignmentToken  {
	
	public PublishesDcl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublishesDclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublishesDclAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublishesDcl_PublishesKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class PublishesDcl_NameAssignment_2 extends AssignmentToken  {
	
	public PublishesDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublishesDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublishesDcl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPublishesDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPublishesDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class PublishesDcl_CommentsAssignment_3 extends AssignmentToken  {
	
	public PublishesDcl_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublishesDclAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublishesDclAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublishesDcl_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PublishesDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PublishesDcl ****************/


/************ begin Rule EmitDcl ****************
 *
 * EmitDcl:
 * 	"emits" type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// "emits" type=ScopedName name=ID comments+=IDLComment*
protected class EmitDcl_Group extends GroupToken {
	
	public EmitDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmitDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmitDcl_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmitDcl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmitDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "emits"
protected class EmitDcl_EmitsKeyword_0 extends KeywordToken  {
	
	public EmitDcl_EmitsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmitDclAccess().getEmitsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class EmitDcl_TypeAssignment_1 extends AssignmentToken  {
	
	public EmitDcl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitDclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmitDclAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmitDcl_EmitsKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class EmitDcl_NameAssignment_2 extends AssignmentToken  {
	
	public EmitDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmitDcl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEmitDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEmitDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class EmitDcl_CommentsAssignment_3 extends AssignmentToken  {
	
	public EmitDcl_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitDclAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmitDclAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmitDcl_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EmitDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule EmitDcl ****************/


/************ begin Rule ConsumesDcl ****************
 *
 * ConsumesDcl:
 * 	"consumes" type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// "consumes" type=ScopedName name=ID comments+=IDLComment*
protected class ConsumesDcl_Group extends GroupToken {
	
	public ConsumesDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConsumesDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConsumesDcl_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConsumesDcl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConsumesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "consumes"
protected class ConsumesDcl_ConsumesKeyword_0 extends KeywordToken  {
	
	public ConsumesDcl_ConsumesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConsumesDclAccess().getConsumesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class ConsumesDcl_TypeAssignment_1 extends AssignmentToken  {
	
	public ConsumesDcl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumesDclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConsumesDclAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConsumesDcl_ConsumesKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ConsumesDcl_NameAssignment_2 extends AssignmentToken  {
	
	public ConsumesDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumesDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConsumesDcl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConsumesDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConsumesDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class ConsumesDcl_CommentsAssignment_3 extends AssignmentToken  {
	
	public ConsumesDcl_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumesDclAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConsumesDclAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConsumesDcl_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ConsumesDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConsumesDcl ****************/


/************ begin Rule ComponentForwardDecl ****************
 *
 * ComponentForwardDecl:
 * 	"component" name=ID;
 *
 **/

// "component" name=ID
protected class ComponentForwardDecl_Group extends GroupToken {
	
	public ComponentForwardDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentForwardDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentForwardDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentForwardDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "component"
protected class ComponentForwardDecl_ComponentKeyword_0 extends KeywordToken  {
	
	public ComponentForwardDecl_ComponentKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentForwardDeclAccess().getComponentKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ComponentForwardDecl_NameAssignment_1 extends AssignmentToken  {
	
	public ComponentForwardDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentForwardDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentForwardDecl_ComponentKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getComponentForwardDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getComponentForwardDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ComponentForwardDecl ****************/


/************ begin Rule HomeDecl ****************
 *
 * HomeDecl:
 * 	"home" comments+=IDLComment* name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
 * 	supports+=ScopedName)*)? "manages" manages=ScopedName primary_key=PrimaryKeySpec? "{" export+=HomeExport* "}";
 *
 **/

// "home" comments+=IDLComment* name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
// supports+=ScopedName)*)? "manages" manages=ScopedName primary_key=PrimaryKeySpec? "{" export+=HomeExport* "}"
protected class HomeDecl_Group extends GroupToken {
	
	public HomeDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_RightCurlyBracketKeyword_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "home"
protected class HomeDecl_HomeKeyword_0 extends KeywordToken  {
	
	public HomeDecl_HomeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getHomeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// comments+=IDLComment*
protected class HomeDecl_CommentsAssignment_1 extends AssignmentToken  {
	
	public HomeDecl_CommentsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getCommentsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getCommentsIDLCommentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_CommentsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new HomeDecl_HomeKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class HomeDecl_NameAssignment_2 extends AssignmentToken  {
	
	public HomeDecl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_CommentsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_HomeKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHomeDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getHomeDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" base=ScopedName)?
protected class HomeDecl_Group_3 extends GroupToken {
	
	public HomeDecl_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_BaseAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class HomeDecl_ColonKeyword_3_0 extends KeywordToken  {
	
	public HomeDecl_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// base=ScopedName
protected class HomeDecl_BaseAssignment_3_1 extends AssignmentToken  {
	
	public HomeDecl_BaseAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getBaseAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("base",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getBaseScopedNameParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_ColonKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
protected class HomeDecl_Group_4 extends GroupToken {
	
	public HomeDecl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "supports"
protected class HomeDecl_SupportsKeyword_4_0 extends KeywordToken  {
	
	public HomeDecl_SupportsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getSupportsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class HomeDecl_SupportsAssignment_4_1 extends AssignmentToken  {
	
	public HomeDecl_SupportsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getSupportsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getSupportsScopedNameParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_SupportsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," supports+=ScopedName)*
protected class HomeDecl_Group_4_2 extends GroupToken {
	
	public HomeDecl_Group_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_SupportsAssignment_4_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class HomeDecl_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public HomeDecl_CommaKeyword_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getCommaKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class HomeDecl_SupportsAssignment_4_2_1 extends AssignmentToken  {
	
	public HomeDecl_SupportsAssignment_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getSupportsAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getSupportsScopedNameParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_CommaKeyword_4_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "manages"
protected class HomeDecl_ManagesKeyword_5 extends KeywordToken  {
	
	public HomeDecl_ManagesKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getManagesKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new HomeDecl_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// manages=ScopedName
protected class HomeDecl_ManagesAssignment_6 extends AssignmentToken  {
	
	public HomeDecl_ManagesAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getManagesAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("manages",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("manages");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getManagesScopedNameParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_ManagesKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// primary_key=PrimaryKeySpec?
protected class HomeDecl_Primary_keyAssignment_7 extends AssignmentToken  {
	
	public HomeDecl_Primary_keyAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getPrimary_keyAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryKeySpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("primary_key",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("primary_key");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimaryKeySpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getPrimary_keyPrimaryKeySpecParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_ManagesAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class HomeDecl_LeftCurlyBracketKeyword_8 extends KeywordToken  {
	
	public HomeDecl_LeftCurlyBracketKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getLeftCurlyBracketKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Primary_keyAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_ManagesAssignment_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// export+=HomeExport*
protected class HomeDecl_ExportAssignment_9 extends AssignmentToken  {
	
	public HomeDecl_ExportAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getExportAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("export",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("export");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHomeExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHomeDeclAccess().getExportHomeExportParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HomeDecl_ExportAssignment_9(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new HomeDecl_LeftCurlyBracketKeyword_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class HomeDecl_RightCurlyBracketKeyword_10 extends KeywordToken  {
	
	public HomeDecl_RightCurlyBracketKeyword_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeDeclAccess().getRightCurlyBracketKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_ExportAssignment_9(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeDecl_LeftCurlyBracketKeyword_8(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule HomeDecl ****************/


/************ begin Rule PrimaryKeySpec ****************
 *
 * PrimaryKeySpec:
 * 	"primarykey" key=ScopedName;
 *
 **/

// "primarykey" key=ScopedName
protected class PrimaryKeySpec_Group extends GroupToken {
	
	public PrimaryKeySpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryKeySpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryKeySpec_KeyAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimaryKeySpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "primarykey"
protected class PrimaryKeySpec_PrimarykeyKeyword_0 extends KeywordToken  {
	
	public PrimaryKeySpec_PrimarykeyKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryKeySpecAccess().getPrimarykeyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// key=ScopedName
protected class PrimaryKeySpec_KeyAssignment_1 extends AssignmentToken  {
	
	public PrimaryKeySpec_KeyAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimaryKeySpecAccess().getKeyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("key",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("key");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimaryKeySpecAccess().getKeyScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimaryKeySpec_PrimarykeyKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PrimaryKeySpec ****************/


/************ begin Rule HomeExport ****************
 *
 * HomeExport:
 * 	Export | FactoryDcl ";" | FinderDcl ";";
 *
 **/

// Export | FactoryDcl ";" | FinderDcl ";"
protected class HomeExport_Alternatives extends AlternativesToken {

	public HomeExport_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_ExportParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HomeExport_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new HomeExport_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFactoryDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFinderDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Export
protected class HomeExport_ExportParserRuleCall_0 extends RuleCallToken {
	
	public HomeExport_ExportParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getExportParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExcluded_File_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFile_MarkerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_DefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ElseAccess().getPreproc_ElseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_EndifAccess().getPreproc_EndifAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_ErrorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfdefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IfndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_IncludeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_IdlRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Ciao_LemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_ComponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_Conn_TypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_DDS4CCM_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_HomeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_MiscAccess().getPreproc_Pragma_MiscAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_NddsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_Pragma_PrefixRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPreproc_UndefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Export_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FactoryDcl ";"
protected class HomeExport_Group_1 extends GroupToken {
	
	public HomeExport_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFactoryDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FactoryDcl
protected class HomeExport_FactoryDclParserRuleCall_1_0 extends RuleCallToken {
	
	public HomeExport_FactoryDclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getFactoryDclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FactoryDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class HomeExport_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public HomeExport_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_FactoryDclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// FinderDcl ";"
protected class HomeExport_Group_2 extends GroupToken {
	
	public HomeExport_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFinderDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FinderDcl
protected class HomeExport_FinderDclParserRuleCall_2_0 extends RuleCallToken {
	
	public HomeExport_FinderDclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getFinderDclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FinderDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class HomeExport_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public HomeExport_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHomeExportAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeExport_FinderDclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule HomeExport ****************/


/************ begin Rule FactoryDcl ****************
 *
 * FactoryDcl:
 * 	comments+=IDLComment* "factory" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
 *
 **/

// comments+=IDLComment* "factory" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
protected class FactoryDcl_Group extends GroupToken {
	
	public FactoryDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FactoryDcl_ParamsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFactoryDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class FactoryDcl_CommentsAssignment_0 extends AssignmentToken  {
	
	public FactoryDcl_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFactoryDclAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FactoryDcl_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "factory"
protected class FactoryDcl_FactoryKeyword_1 extends KeywordToken  {
	
	public FactoryDcl_FactoryKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getFactoryKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class FactoryDcl_NameAssignment_2 extends AssignmentToken  {
	
	public FactoryDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_FactoryKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFactoryDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFactoryDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// params=ParameterDecls
protected class FactoryDcl_ParamsAssignment_3 extends AssignmentToken  {
	
	public FactoryDcl_ParamsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getParamsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFactoryDclAccess().getParamsParameterDeclsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FactoryDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("raises" raises=ExceptionList)?
protected class FactoryDcl_Group_4 extends GroupToken {
	
	public FactoryDcl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_RaisesAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "raises"
protected class FactoryDcl_RaisesKeyword_4_0 extends KeywordToken  {
	
	public FactoryDcl_RaisesKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getRaisesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FactoryDcl_ParamsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// raises=ExceptionList
protected class FactoryDcl_RaisesAssignment_4_1 extends AssignmentToken  {
	
	public FactoryDcl_RaisesAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFactoryDclAccess().getRaisesAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("raises",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("raises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFactoryDclAccess().getRaisesExceptionListParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FactoryDcl_RaisesKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule FactoryDcl ****************/


/************ begin Rule FinderDcl ****************
 *
 * FinderDcl:
 * 	comments+=IDLComment* "finder" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
 *
 **/

// comments+=IDLComment* "finder" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
protected class FinderDcl_Group extends GroupToken {
	
	public FinderDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FinderDcl_ParamsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFinderDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comments+=IDLComment*
protected class FinderDcl_CommentsAssignment_0 extends AssignmentToken  {
	
	public FinderDcl_CommentsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getCommentsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFinderDclAccess().getCommentsIDLCommentParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FinderDcl_CommentsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "finder"
protected class FinderDcl_FinderKeyword_1 extends KeywordToken  {
	
	public FinderDcl_FinderKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getFinderKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_CommentsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class FinderDcl_NameAssignment_2 extends AssignmentToken  {
	
	public FinderDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_FinderKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFinderDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFinderDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// params=ParameterDecls
protected class FinderDcl_ParamsAssignment_3 extends AssignmentToken  {
	
	public FinderDcl_ParamsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getParamsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDecls_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFinderDclAccess().getParamsParameterDeclsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FinderDcl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("raises" raises=ExceptionList)?
protected class FinderDcl_Group_4 extends GroupToken {
	
	public FinderDcl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_RaisesAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "raises"
protected class FinderDcl_RaisesKeyword_4_0 extends KeywordToken  {
	
	public FinderDcl_RaisesKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getRaisesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FinderDcl_ParamsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// raises=ExceptionList
protected class FinderDcl_RaisesAssignment_4_1 extends AssignmentToken  {
	
	public FinderDcl_RaisesAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFinderDclAccess().getRaisesAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("raises",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("raises");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFinderDclAccess().getRaisesExceptionListParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FinderDcl_RaisesKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule FinderDcl ****************/


/************ begin Rule Event ****************
 *
 * Event:
 * 	EventDcl
 * 	| EventForwardDcl;
 *
 **/

// EventDcl | EventForwardDcl
protected class Event_Alternatives extends AlternativesToken {

	public Event_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_EventDclParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Event_EventForwardDclParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EventDcl
protected class Event_EventDclParserRuleCall_0 extends RuleCallToken {
	
	public Event_EventDclParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventAccess().getEventDclParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EventDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EventForwardDcl
protected class Event_EventForwardDclParserRuleCall_1 extends RuleCallToken {
	
	public Event_EventForwardDclParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventAccess().getEventForwardDclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventForwardDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EventForwardDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Event ****************/


/************ begin Rule EventDcl ****************
 *
 * EventDcl:
 * 	(isCustom?="custom" | isAbstract?="abstract")? "eventtype" name=ID (":" isTruncatable?="truncatable"?
 * 	base+=ScopedName ("," base+=ScopedName)*)? ("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{"
 * 	(export+=Export | member+=StateMember)* "}";
 *
 **/

// (isCustom?="custom" | isAbstract?="abstract")? "eventtype" name=ID (":" isTruncatable?="truncatable"? base+=ScopedName
// ("," base+=ScopedName)*)? ("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{" (export+=Export |
// member+=StateMember)* "}"
protected class EventDcl_Group extends GroupToken {
	
	public EventDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (isCustom?="custom" | isAbstract?="abstract")?
protected class EventDcl_Alternatives_0 extends AlternativesToken {

	public EventDcl_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventDclAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_IsCustomAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_IsAbstractAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isCustom?="custom"
protected class EventDcl_IsCustomAssignment_0_0 extends AssignmentToken  {
	
	public EventDcl_IsCustomAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getIsCustomAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isCustom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isCustom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEventDclAccess().getIsCustomCustomKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// isAbstract?="abstract"
protected class EventDcl_IsAbstractAssignment_0_1 extends AssignmentToken  {
	
	public EventDcl_IsAbstractAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getIsAbstractAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isAbstract",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEventDclAccess().getIsAbstractAbstractKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "eventtype"
protected class EventDcl_EventtypeKeyword_1 extends KeywordToken  {
	
	public EventDcl_EventtypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getEventtypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class EventDcl_NameAssignment_2 extends AssignmentToken  {
	
	public EventDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_EventtypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" isTruncatable?="truncatable"? base+=ScopedName ("," base+=ScopedName)*)?
protected class EventDcl_Group_3 extends GroupToken {
	
	public EventDcl_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_BaseAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ":"
protected class EventDcl_ColonKeyword_3_0 extends KeywordToken  {
	
	public EventDcl_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// isTruncatable?="truncatable"?
protected class EventDcl_IsTruncatableAssignment_3_1 extends AssignmentToken  {
	
	public EventDcl_IsTruncatableAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getIsTruncatableAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_ColonKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isTruncatable",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isTruncatable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEventDclAccess().getIsTruncatableTruncatableKeyword_3_1_0();
			return obj;
		}
		return null;
	}

}

// base+=ScopedName
protected class EventDcl_BaseAssignment_3_2 extends AssignmentToken  {
	
	public EventDcl_BaseAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getBaseAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("base",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getBaseScopedNameParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_IsTruncatableAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EventDcl_ColonKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," base+=ScopedName)*
protected class EventDcl_Group_3_3 extends GroupToken {
	
	public EventDcl_Group_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDclAccess().getGroup_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_BaseAssignment_3_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EventDcl_CommaKeyword_3_3_0 extends KeywordToken  {
	
	public EventDcl_CommaKeyword_3_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getCommaKeyword_3_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_BaseAssignment_3_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// base+=ScopedName
protected class EventDcl_BaseAssignment_3_3_1 extends AssignmentToken  {
	
	public EventDcl_BaseAssignment_3_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getBaseAssignment_3_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("base",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getBaseScopedNameParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_CommaKeyword_3_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
protected class EventDcl_Group_4 extends GroupToken {
	
	public EventDcl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "supports"
protected class EventDcl_SupportsKeyword_4_0 extends KeywordToken  {
	
	public EventDcl_SupportsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getSupportsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class EventDcl_SupportsAssignment_4_1 extends AssignmentToken  {
	
	public EventDcl_SupportsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getSupportsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getSupportsScopedNameParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_SupportsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," supports+=ScopedName)*
protected class EventDcl_Group_4_2 extends GroupToken {
	
	public EventDcl_Group_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_SupportsAssignment_4_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EventDcl_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public EventDcl_CommaKeyword_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getCommaKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_SupportsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// supports+=ScopedName
protected class EventDcl_SupportsAssignment_4_2_1 extends AssignmentToken  {
	
	public EventDcl_SupportsAssignment_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getSupportsAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getSupportsScopedNameParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_CommaKeyword_4_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "{"
protected class EventDcl_LeftCurlyBracketKeyword_5 extends KeywordToken  {
	
	public EventDcl_LeftCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getLeftCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EventDcl_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// (export+=Export | member+=StateMember)*
protected class EventDcl_Alternatives_6 extends AlternativesToken {

	public EventDcl_Alternatives_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventDclAccess().getAlternatives_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_ExportAssignment_6_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_MemberAssignment_6_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// export+=Export
protected class EventDcl_ExportAssignment_6_0 extends AssignmentToken  {
	
	public EventDcl_ExportAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getExportAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Export_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("export",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("export");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getExportExportParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_Alternatives_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EventDcl_LeftCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// member+=StateMember
protected class EventDcl_MemberAssignment_6_1 extends AssignmentToken  {
	
	public EventDcl_MemberAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDclAccess().getMemberAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMember_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("member",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("member");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateMemberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDclAccess().getMemberStateMemberParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDcl_Alternatives_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EventDcl_LeftCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class EventDcl_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public EventDcl_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDclAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDcl_Alternatives_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDcl_LeftCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EventDcl ****************/


/************ begin Rule StateMember ****************
 *
 * StateMember:
 * 	(isPublic?="public" | "private") type=ParamTypeSpec names+=ID ";";
 *
 **/

// (isPublic?="public" | "private") type=ParamTypeSpec names+=ID ";"
protected class StateMember_Group extends GroupToken {
	
	public StateMember_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMember_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateMemberRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// isPublic?="public" | "private"
protected class StateMember_Alternatives_0 extends AlternativesToken {

	public StateMember_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMember_IsPublicAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateMember_PrivateKeyword_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isPublic?="public"
protected class StateMember_IsPublicAssignment_0_0 extends AssignmentToken  {
	
	public StateMember_IsPublicAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getIsPublicAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isPublic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isPublic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStateMemberAccess().getIsPublicPublicKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// "private"
protected class StateMember_PrivateKeyword_0_1 extends KeywordToken  {
	
	public StateMember_PrivateKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getPrivateKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


// type=ParamTypeSpec
protected class StateMember_TypeAssignment_1 extends AssignmentToken  {
	
	public StateMember_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParamTypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamTypeSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMemberAccess().getTypeParamTypeSpecParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StateMember_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// names+=ID
protected class StateMember_NamesAssignment_2 extends AssignmentToken  {
	
	public StateMember_NamesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getNamesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMember_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStateMemberAccess().getNamesIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStateMemberAccess().getNamesIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class StateMember_SemicolonKeyword_3 extends KeywordToken  {
	
	public StateMember_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateMemberAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMember_NamesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule StateMember ****************/


/************ begin Rule EventForwardDcl ****************
 *
 * //EventAbsDcl :
 * //	"abstract" "eventtype" name=ID (":" (isTruncatable?="truncatable")? base+=ScopedName ("," base+=ScopedName)*)?
 * //	("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{" (export+=Export)* "}";
 * EventForwardDcl:
 * 	isAbstract?="abstract"? "eventtype" name=ID;
 *
 **/

// isAbstract?="abstract"? "eventtype" name=ID
protected class EventForwardDcl_Group extends GroupToken {
	
	public EventForwardDcl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventForwardDclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventForwardDcl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// isAbstract?="abstract"?
protected class EventForwardDcl_IsAbstractAssignment_0 extends AssignmentToken  {
	
	public EventForwardDcl_IsAbstractAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventForwardDclAccess().getIsAbstractAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isAbstract",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEventForwardDclAccess().getIsAbstractAbstractKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "eventtype"
protected class EventForwardDcl_EventtypeKeyword_1 extends KeywordToken  {
	
	public EventForwardDcl_EventtypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventForwardDclAccess().getEventtypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventForwardDcl_IsAbstractAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class EventForwardDcl_NameAssignment_2 extends AssignmentToken  {
	
	public EventForwardDcl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventForwardDclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventForwardDcl_EventtypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventForwardDclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventForwardDclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EventForwardDcl ****************/


/************ begin Rule PortTypeDecl ****************
 *
 * 
 *  DDS4CCM Definitions
 *  PortTypeDecl:
 * 	"porttype" comments+=IDLComment* name=ID "{" exports+=PortExport+ "}";
 *
 **/

// "porttype" comments+=IDLComment* name=ID "{" exports+=PortExport+ "}"
protected class PortTypeDecl_Group extends GroupToken {
	
	public PortTypeDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "porttype"
protected class PortTypeDecl_PorttypeKeyword_0 extends KeywordToken  {
	
	public PortTypeDecl_PorttypeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getPorttypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// comments+=IDLComment*
protected class PortTypeDecl_CommentsAssignment_1 extends AssignmentToken  {
	
	public PortTypeDecl_CommentsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getCommentsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPortTypeDeclAccess().getCommentsIDLCommentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PortTypeDecl_CommentsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PortTypeDecl_PorttypeKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class PortTypeDecl_NameAssignment_2 extends AssignmentToken  {
	
	public PortTypeDecl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_CommentsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortTypeDecl_PorttypeKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPortTypeDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPortTypeDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PortTypeDecl_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PortTypeDecl_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// exports+=PortExport+
protected class PortTypeDecl_ExportsAssignment_4 extends AssignmentToken  {
	
	public PortTypeDecl_ExportsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getExportsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exports",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPortTypeDeclAccess().getExportsPortExportParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PortTypeDecl_ExportsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PortTypeDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PortTypeDecl_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public PortTypeDecl_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortTypeDeclAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_ExportsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PortTypeDecl ****************/


/************ begin Rule PortExport ****************
 *
 * PortExport:
 * 	ProvidesDcl ";" | UsesDcl ";" | AttrDecl ";" | IDLComment;
 *
 **/

// ProvidesDcl ";" | UsesDcl ";" | AttrDecl ";" | IDLComment
protected class PortExport_Alternatives extends AlternativesToken {

	public PortExport_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPortExportAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortExport_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PortExport_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new PortExport_IDLCommentParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl ";"
protected class PortExport_Group_0 extends GroupToken {
	
	public PortExport_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortExportAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl
protected class PortExport_ProvidesDclParserRuleCall_0_0 extends RuleCallToken {
	
	public PortExport_ProvidesDclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortExportAccess().getProvidesDclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProvidesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ProvidesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class PortExport_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public PortExport_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortExportAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_ProvidesDclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// UsesDcl ";"
protected class PortExport_Group_1 extends GroupToken {
	
	public PortExport_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortExportAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UsesDcl
protected class PortExport_UsesDclParserRuleCall_1_0 extends RuleCallToken {
	
	public PortExport_UsesDclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortExportAccess().getUsesDclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(UsesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class PortExport_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public PortExport_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortExportAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_UsesDclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// AttrDecl ";"
protected class PortExport_Group_2 extends GroupToken {
	
	public PortExport_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortExportAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrDecl
protected class PortExport_AttrDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public PortExport_AttrDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortExportAccess().getAttrDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AttrDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class PortExport_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public PortExport_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortExportAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortExport_AttrDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// IDLComment
protected class PortExport_IDLCommentParserRuleCall_3 extends RuleCallToken {
	
	public PortExport_IDLCommentParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortExportAccess().getIDLCommentParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PortExport ****************/


/************ begin Rule PortDecl ****************
 *
 * PortDecl:
 * 	("port" | isMirror?="mirrorport") type=ScopedName name=ID comments+=IDLComment*;
 *
 **/

// ("port" | isMirror?="mirrorport") type=ScopedName name=ID comments+=IDLComment*
protected class PortDecl_Group extends GroupToken {
	
	public PortDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortDecl_CommentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortDecl_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "port" | isMirror?="mirrorport"
protected class PortDecl_Alternatives_0 extends AlternativesToken {

	public PortDecl_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortDecl_PortKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortDecl_IsMirrorAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "port"
protected class PortDecl_PortKeyword_0_0 extends KeywordToken  {
	
	public PortDecl_PortKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getPortKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// isMirror?="mirrorport"
protected class PortDecl_IsMirrorAssignment_0_1 extends AssignmentToken  {
	
	public PortDecl_IsMirrorAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getIsMirrorAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isMirror",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isMirror");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPortDeclAccess().getIsMirrorMirrorportKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=ScopedName
protected class PortDecl_TypeAssignment_1 extends AssignmentToken  {
	
	public PortDecl_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPortDeclAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PortDecl_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class PortDecl_NameAssignment_2 extends AssignmentToken  {
	
	public PortDecl_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortDecl_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPortDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPortDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class PortDecl_CommentsAssignment_3 extends AssignmentToken  {
	
	public PortDecl_CommentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortDeclAccess().getCommentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPortDeclAccess().getCommentsIDLCommentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PortDecl_CommentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PortDecl_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PortDecl ****************/


/************ begin Rule Connector ****************
 *
 * Connector:
 * 	header=ConnectorHeader "{" exports+=ConnectorExport* "}";
 *
 **/

// header=ConnectorHeader "{" exports+=ConnectorExport* "}"
protected class Connector_Group extends GroupToken {
	
	public Connector_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// header=ConnectorHeader
protected class Connector_HeaderAssignment_0 extends AssignmentToken  {
	
	public Connector_HeaderAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConnectorAccess().getHeaderAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorHeader_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("header",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("header");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConnectorHeaderRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConnectorAccess().getHeaderConnectorHeaderParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "{"
protected class Connector_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Connector_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_HeaderAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// exports+=ConnectorExport*
protected class Connector_ExportsAssignment_2 extends AssignmentToken  {
	
	public Connector_ExportsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConnectorAccess().getExportsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConnectorExportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConnectorAccess().getExportsConnectorExportParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Connector_ExportsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Connector_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Connector_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Connector_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_ExportsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Connector_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Connector ****************/


/************ begin Rule ConnectorHeader ****************
 *
 * ConnectorHeader:
 * 	"connector" name=ID (":" base=ScopedName)?;
 *
 **/

// "connector" name=ID (":" base=ScopedName)?
protected class ConnectorHeader_Group extends GroupToken {
	
	public ConnectorHeader_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorHeader_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConnectorHeader_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConnectorHeaderRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "connector"
protected class ConnectorHeader_ConnectorKeyword_0 extends KeywordToken  {
	
	public ConnectorHeader_ConnectorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getConnectorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ConnectorHeader_NameAssignment_1 extends AssignmentToken  {
	
	public ConnectorHeader_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorHeader_ConnectorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConnectorHeaderAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConnectorHeaderAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (":" base=ScopedName)?
protected class ConnectorHeader_Group_2 extends GroupToken {
	
	public ConnectorHeader_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorHeader_BaseAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class ConnectorHeader_ColonKeyword_2_0 extends KeywordToken  {
	
	public ConnectorHeader_ColonKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorHeader_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// base=ScopedName
protected class ConnectorHeader_BaseAssignment_2_1 extends AssignmentToken  {
	
	public ConnectorHeader_BaseAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConnectorHeaderAccess().getBaseAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("base",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConnectorHeaderAccess().getBaseScopedNameParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConnectorHeader_ColonKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ConnectorHeader ****************/


/************ begin Rule ConnectorExport ****************
 *
 * ConnectorExport:
 * 	ProvidesDcl ";" | UsesDcl ";" | PortDecl ";" | AttrDecl ";" | IDLComment;
 *
 **/

// ProvidesDcl ";" | UsesDcl ";" | PortDecl ";" | AttrDecl ";" | IDLComment
protected class ConnectorExport_Alternatives extends AlternativesToken {

	public ConnectorExport_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConnectorExport_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ConnectorExport_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ConnectorExport_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ConnectorExport_IDLCommentParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPortDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl ";"
protected class ConnectorExport_Group_0 extends GroupToken {
	
	public ConnectorExport_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProvidesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProvidesDcl
protected class ConnectorExport_ProvidesDclParserRuleCall_0_0 extends RuleCallToken {
	
	public ConnectorExport_ProvidesDclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getProvidesDclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProvidesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ProvidesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ConnectorExport_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public ConnectorExport_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_ProvidesDclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// UsesDcl ";"
protected class ConnectorExport_Group_1 extends GroupToken {
	
	public ConnectorExport_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUsesDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UsesDcl
protected class ConnectorExport_UsesDclParserRuleCall_1_0 extends RuleCallToken {
	
	public ConnectorExport_UsesDclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getUsesDclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UsesDcl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(UsesDcl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ConnectorExport_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public ConnectorExport_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_UsesDclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PortDecl ";"
protected class ConnectorExport_Group_2 extends GroupToken {
	
	public ConnectorExport_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PortDecl
protected class ConnectorExport_PortDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public ConnectorExport_PortDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getPortDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PortDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ConnectorExport_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public ConnectorExport_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_PortDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// AttrDecl ";"
protected class ConnectorExport_Group_3 extends GroupToken {
	
	public ConnectorExport_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttrSpecRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReadOnlyAttrSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AttrDecl
protected class ConnectorExport_AttrDeclParserRuleCall_3_0 extends RuleCallToken {
	
	public ConnectorExport_AttrDeclParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getAttrDeclParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttrDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AttrDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class ConnectorExport_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public ConnectorExport_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectorExport_AttrDeclParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// IDLComment
protected class ConnectorExport_IDLCommentParserRuleCall_4 extends RuleCallToken {
	
	public ConnectorExport_IDLCommentParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectorExportAccess().getIDLCommentParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConnectorExport ****************/


/************ begin Rule TemplateModule ****************
 *
 * TemplateModule:
 * 	"module" name=ID "<" parameters+=FormalParameter ("," parameters+=FormalParameter)* ">" "{"
 * 	definitions+=TemplateDefinition* "}";
 *
 **/

// "module" name=ID "<" parameters+=FormalParameter ("," parameters+=FormalParameter)* ">" "{"
// definitions+=TemplateDefinition* "}"
protected class TemplateModule_Group extends GroupToken {
	
	public TemplateModule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_RightCurlyBracketKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "module"
protected class TemplateModule_ModuleKeyword_0 extends KeywordToken  {
	
	public TemplateModule_ModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class TemplateModule_NameAssignment_1 extends AssignmentToken  {
	
	public TemplateModule_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_ModuleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemplateModuleAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTemplateModuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class TemplateModule_LessThanSignKeyword_2 extends KeywordToken  {
	
	public TemplateModule_LessThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getLessThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters+=FormalParameter
protected class TemplateModule_ParametersAssignment_3 extends AssignmentToken  {
	
	public TemplateModule_ParametersAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getParametersAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleAccess().getParametersFormalParameterParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModule_LessThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=FormalParameter)*
protected class TemplateModule_Group_4 extends GroupToken {
	
	public TemplateModule_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_ParametersAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class TemplateModule_CommaKeyword_4_0 extends KeywordToken  {
	
	public TemplateModule_CommaKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getCommaKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModule_ParametersAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=FormalParameter
protected class TemplateModule_ParametersAssignment_4_1 extends AssignmentToken  {
	
	public TemplateModule_ParametersAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getParametersAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleAccess().getParametersFormalParameterParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModule_CommaKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class TemplateModule_GreaterThanSignKeyword_5 extends KeywordToken  {
	
	public TemplateModule_GreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModule_ParametersAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "{"
protected class TemplateModule_LeftCurlyBracketKeyword_6 extends KeywordToken  {
	
	public TemplateModule_LeftCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getLeftCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_GreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// definitions+=TemplateDefinition*
protected class TemplateModule_DefinitionsAssignment_7 extends AssignmentToken  {
	
	public TemplateModule_DefinitionsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getDefinitionsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleAccess().getDefinitionsTemplateDefinitionParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModule_DefinitionsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TemplateModule_LeftCurlyBracketKeyword_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class TemplateModule_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public TemplateModule_RightCurlyBracketKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleAccess().getRightCurlyBracketKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModule_DefinitionsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModule_LeftCurlyBracketKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TemplateModule ****************/


/************ begin Rule FormalParameter ****************
 *
 * FormalParameter:
 * 	type=FormalParameterType name=ID;
 *
 **/

// type=FormalParameterType name=ID
protected class FormalParameter_Group extends GroupToken {
	
	public FormalParameter_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFormalParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=FormalParameterType
protected class FormalParameter_TypeAssignment_0 extends AssignmentToken  {
	
	public FormalParameter_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameterType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFormalParameterAccess().getTypeFormalParameterTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class FormalParameter_NameAssignment_1 extends AssignmentToken  {
	
	public FormalParameter_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FormalParameter ****************/


/************ begin Rule FormalParameterType ****************
 *
 * FormalParameterType:
 * 	TypenameParamType
 * 	| InterfaceParamType
 * 	| ValuetypeParamType
 * 	| EventParamType
 * 	| StructParamType
 * 	| UnionParamType
 * 	| ExceptionParamType
 * 	| EnumParamType
 * 	| SequenceParamType
 * 	| ConstParamType
 * 	| SequenceType;
 *
 **/

// TypenameParamType | InterfaceParamType | ValuetypeParamType | EventParamType | StructParamType | UnionParamType |
// ExceptionParamType | EnumParamType | SequenceParamType | ConstParamType | SequenceType
protected class FormalParameterType_Alternatives extends AlternativesToken {

	public FormalParameterType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameterType_TypenameParamTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FormalParameterType_InterfaceParamTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FormalParameterType_ValuetypeParamTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new FormalParameterType_EventParamTypeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new FormalParameterType_StructParamTypeParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new FormalParameterType_UnionParamTypeParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new FormalParameterType_ExceptionParamTypeParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new FormalParameterType_EnumParamTypeParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new FormalParameterType_SequenceParamTypeParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new FormalParameterType_ConstParamTypeParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new FormalParameterType_SequenceTypeParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumParamTypeAccess().getEnumParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventParamTypeAccess().getEventParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptionParamTypeAccess().getExceptionParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceParamTypeAccess().getInterfaceParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceParamTypeAccess().getSequenceParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructParamTypeAccess().getStructParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypenameParamTypeAccess().getTypenameParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionParamTypeAccess().getUnionParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValuetypeParamTypeAccess().getValuetypeParamTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypenameParamType
protected class FormalParameterType_TypenameParamTypeParserRuleCall_0 extends RuleCallToken {
	
	public FormalParameterType_TypenameParamTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getTypenameParamTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypenameParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypenameParamTypeAccess().getTypenameParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TypenameParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// InterfaceParamType
protected class FormalParameterType_InterfaceParamTypeParserRuleCall_1 extends RuleCallToken {
	
	public FormalParameterType_InterfaceParamTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getInterfaceParamTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceParamTypeAccess().getInterfaceParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(InterfaceParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ValuetypeParamType
protected class FormalParameterType_ValuetypeParamTypeParserRuleCall_2 extends RuleCallToken {
	
	public FormalParameterType_ValuetypeParamTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getValuetypeParamTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuetypeParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValuetypeParamTypeAccess().getValuetypeParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ValuetypeParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EventParamType
protected class FormalParameterType_EventParamTypeParserRuleCall_3 extends RuleCallToken {
	
	public FormalParameterType_EventParamTypeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getEventParamTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventParamTypeAccess().getEventParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EventParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StructParamType
protected class FormalParameterType_StructParamTypeParserRuleCall_4 extends RuleCallToken {
	
	public FormalParameterType_StructParamTypeParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getStructParamTypeParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructParamTypeAccess().getStructParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StructParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnionParamType
protected class FormalParameterType_UnionParamTypeParserRuleCall_5 extends RuleCallToken {
	
	public FormalParameterType_UnionParamTypeParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getUnionParamTypeParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionParamTypeAccess().getUnionParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnionParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExceptionParamType
protected class FormalParameterType_ExceptionParamTypeParserRuleCall_6 extends RuleCallToken {
	
	public FormalParameterType_ExceptionParamTypeParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getExceptionParamTypeParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptionParamTypeAccess().getExceptionParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExceptionParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumParamType
protected class FormalParameterType_EnumParamTypeParserRuleCall_7 extends RuleCallToken {
	
	public FormalParameterType_EnumParamTypeParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getEnumParamTypeParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumParamTypeAccess().getEnumParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SequenceParamType
protected class FormalParameterType_SequenceParamTypeParserRuleCall_8 extends RuleCallToken {
	
	public FormalParameterType_SequenceParamTypeParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getSequenceParamTypeParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSequenceParamTypeAccess().getSequenceParamTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SequenceParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ConstParamType
protected class FormalParameterType_ConstParamTypeParserRuleCall_9 extends RuleCallToken {
	
	public FormalParameterType_ConstParamTypeParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getConstParamTypeParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstParamType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ConstParamType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SequenceType
protected class FormalParameterType_SequenceTypeParserRuleCall_10 extends RuleCallToken {
	
	public FormalParameterType_SequenceTypeParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormalParameterTypeAccess().getSequenceTypeParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SequenceType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FormalParameterType ****************/


/************ begin Rule TypenameParamType ****************
 *
 * TypenameParamType:
 * 	{TypenameParamType}
 * 	"typename";
 *
 **/

// {TypenameParamType} "typename"
protected class TypenameParamType_Group extends GroupToken {
	
	public TypenameParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypenameParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypenameParamType_TypenameKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypenameParamTypeAccess().getTypenameParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TypenameParamType}
protected class TypenameParamType_TypenameParamTypeAction_0 extends ActionToken  {

	public TypenameParamType_TypenameParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTypenameParamTypeAccess().getTypenameParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "typename"
protected class TypenameParamType_TypenameKeyword_1 extends KeywordToken  {
	
	public TypenameParamType_TypenameKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypenameParamTypeAccess().getTypenameKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypenameParamType_TypenameParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule TypenameParamType ****************/


/************ begin Rule InterfaceParamType ****************
 *
 * InterfaceParamType:
 * 	{InterfaceParamType}
 * 	"interface";
 *
 **/

// {InterfaceParamType} "interface"
protected class InterfaceParamType_Group extends GroupToken {
	
	public InterfaceParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceParamType_InterfaceKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceParamTypeAccess().getInterfaceParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InterfaceParamType}
protected class InterfaceParamType_InterfaceParamTypeAction_0 extends ActionToken  {

	public InterfaceParamType_InterfaceParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInterfaceParamTypeAccess().getInterfaceParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "interface"
protected class InterfaceParamType_InterfaceKeyword_1 extends KeywordToken  {
	
	public InterfaceParamType_InterfaceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceParamTypeAccess().getInterfaceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceParamType_InterfaceParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule InterfaceParamType ****************/


/************ begin Rule ValuetypeParamType ****************
 *
 * ValuetypeParamType:
 * 	{ValuetypeParamType}
 * 	"valuetype";
 *
 **/

// {ValuetypeParamType} "valuetype"
protected class ValuetypeParamType_Group extends GroupToken {
	
	public ValuetypeParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValuetypeParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuetypeParamType_ValuetypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValuetypeParamTypeAccess().getValuetypeParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ValuetypeParamType}
protected class ValuetypeParamType_ValuetypeParamTypeAction_0 extends ActionToken  {

	public ValuetypeParamType_ValuetypeParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getValuetypeParamTypeAccess().getValuetypeParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "valuetype"
protected class ValuetypeParamType_ValuetypeKeyword_1 extends KeywordToken  {
	
	public ValuetypeParamType_ValuetypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValuetypeParamTypeAccess().getValuetypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuetypeParamType_ValuetypeParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ValuetypeParamType ****************/


/************ begin Rule EventParamType ****************
 *
 * EventParamType:
 * 	{EventParamType}
 * 	"eventtype";
 *
 **/

// {EventParamType} "eventtype"
protected class EventParamType_Group extends GroupToken {
	
	public EventParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventParamType_EventtypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventParamTypeAccess().getEventParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EventParamType}
protected class EventParamType_EventParamTypeAction_0 extends ActionToken  {

	public EventParamType_EventParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEventParamTypeAccess().getEventParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "eventtype"
protected class EventParamType_EventtypeKeyword_1 extends KeywordToken  {
	
	public EventParamType_EventtypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventParamTypeAccess().getEventtypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventParamType_EventParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EventParamType ****************/


/************ begin Rule StructParamType ****************
 *
 * StructParamType:
 * 	{StructParamType}
 * 	"struct";
 *
 **/

// {StructParamType} "struct"
protected class StructParamType_Group extends GroupToken {
	
	public StructParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructParamType_StructKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructParamTypeAccess().getStructParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StructParamType}
protected class StructParamType_StructParamTypeAction_0 extends ActionToken  {

	public StructParamType_StructParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStructParamTypeAccess().getStructParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "struct"
protected class StructParamType_StructKeyword_1 extends KeywordToken  {
	
	public StructParamType_StructKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructParamTypeAccess().getStructKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructParamType_StructParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule StructParamType ****************/


/************ begin Rule UnionParamType ****************
 *
 * UnionParamType:
 * 	{UnionParamType}
 * 	"union";
 *
 **/

// {UnionParamType} "union"
protected class UnionParamType_Group extends GroupToken {
	
	public UnionParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnionParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionParamType_UnionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnionParamTypeAccess().getUnionParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnionParamType}
protected class UnionParamType_UnionParamTypeAction_0 extends ActionToken  {

	public UnionParamType_UnionParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnionParamTypeAccess().getUnionParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "union"
protected class UnionParamType_UnionKeyword_1 extends KeywordToken  {
	
	public UnionParamType_UnionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnionParamTypeAccess().getUnionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnionParamType_UnionParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnionParamType ****************/


/************ begin Rule ExceptionParamType ****************
 *
 * ExceptionParamType:
 * 	{ExceptionParamType}
 * 	"exception";
 *
 **/

// {ExceptionParamType} "exception"
protected class ExceptionParamType_Group extends GroupToken {
	
	public ExceptionParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExceptionParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionParamType_ExceptionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptionParamTypeAccess().getExceptionParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExceptionParamType}
protected class ExceptionParamType_ExceptionParamTypeAction_0 extends ActionToken  {

	public ExceptionParamType_ExceptionParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExceptionParamTypeAccess().getExceptionParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "exception"
protected class ExceptionParamType_ExceptionKeyword_1 extends KeywordToken  {
	
	public ExceptionParamType_ExceptionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptionParamTypeAccess().getExceptionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptionParamType_ExceptionParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExceptionParamType ****************/


/************ begin Rule EnumParamType ****************
 *
 * EnumParamType:
 * 	{EnumParamType}
 * 	"enum";
 *
 **/

// {EnumParamType} "enum"
protected class EnumParamType_Group extends GroupToken {
	
	public EnumParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumParamType_EnumKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumParamTypeAccess().getEnumParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EnumParamType}
protected class EnumParamType_EnumParamTypeAction_0 extends ActionToken  {

	public EnumParamType_EnumParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEnumParamTypeAccess().getEnumParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "enum"
protected class EnumParamType_EnumKeyword_1 extends KeywordToken  {
	
	public EnumParamType_EnumKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumParamTypeAccess().getEnumKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumParamType_EnumParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EnumParamType ****************/


/************ begin Rule SequenceParamType ****************
 *
 * SequenceParamType:
 * 	{SequenceParamType}
 * 	"sequence";
 *
 **/

// {SequenceParamType} "sequence"
protected class SequenceParamType_Group extends GroupToken {
	
	public SequenceParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSequenceParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceParamType_SequenceKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSequenceParamTypeAccess().getSequenceParamTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SequenceParamType}
protected class SequenceParamType_SequenceParamTypeAction_0 extends ActionToken  {

	public SequenceParamType_SequenceParamTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSequenceParamTypeAccess().getSequenceParamTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "sequence"
protected class SequenceParamType_SequenceKeyword_1 extends KeywordToken  {
	
	public SequenceParamType_SequenceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceParamTypeAccess().getSequenceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SequenceParamType_SequenceParamTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SequenceParamType ****************/


/************ begin Rule ConstParamType ****************
 *
 * ConstParamType:
 * 	"const" ConstType;
 *
 **/

// "const" ConstType
protected class ConstParamType_Group extends GroupToken {
	
	public ConstParamType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstParamTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstParamType_ConstTypeParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtConstTypeAccess().getFixedPtConstTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "const"
protected class ConstParamType_ConstKeyword_0 extends KeywordToken  {
	
	public ConstParamType_ConstKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstParamTypeAccess().getConstKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ConstType
protected class ConstParamType_ConstTypeParserRuleCall_1 extends RuleCallToken {
	
	public ConstParamType_ConstTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstParamTypeAccess().getConstTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstParamType_ConstKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule ConstParamType ****************/


/************ begin Rule TemplateDefinition ****************
 *
 * TemplateDefinition:
 * 	TypeDecl ";"
 * 	| ConstDecl ";"
 * 	| ExceptDecl ";"
 * 	| Interface_decl ";"
 * 	| FixedModule ";"
 * 	| StructType ";"
 * 	| NativeType ";"
 * 	| Event ";"
 * 	| ComponentDecl ";"
 * 	| HomeDecl ";"
 * 	| PortTypeDecl ";"
 * 	| Connector ";"
 * 	| TemplateModuleRef ";"
 * 	| IDLComment;
 *
 **/

// TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Interface_decl ";" | FixedModule ";" | StructType ";" | NativeType ";" |
// Event ";" | ComponentDecl ";" | HomeDecl ";" | PortTypeDecl ";" | Connector ";" | TemplateModuleRef ";" | IDLComment
protected class TemplateDefinition_Alternatives extends AlternativesToken {

	public TemplateDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateDefinition_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TemplateDefinition_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TemplateDefinition_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new TemplateDefinition_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new TemplateDefinition_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new TemplateDefinition_Group_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new TemplateDefinition_Group_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new TemplateDefinition_Group_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new TemplateDefinition_Group_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new TemplateDefinition_Group_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new TemplateDefinition_Group_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new TemplateDefinition_Group_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new TemplateDefinition_IDLCommentParserRuleCall_13(lastRuleCallOrigin, this, 13, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedModuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTemplateModuleRefRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl ";"
protected class TemplateDefinition_Group_0 extends GroupToken {
	
	public TemplateDefinition_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl
protected class TemplateDefinition_TypeDeclParserRuleCall_0_0 extends RuleCallToken {
	
	public TemplateDefinition_TypeDeclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getTypeDeclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TypeDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_TypeDeclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConstDecl ";"
protected class TemplateDefinition_Group_1 extends GroupToken {
	
	public TemplateDefinition_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstDecl
protected class TemplateDefinition_ConstDeclParserRuleCall_1_0 extends RuleCallToken {
	
	public TemplateDefinition_ConstDeclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getConstDeclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_ConstDeclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ExceptDecl ";"
protected class TemplateDefinition_Group_2 extends GroupToken {
	
	public TemplateDefinition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExceptDecl
protected class TemplateDefinition_ExceptDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public TemplateDefinition_ExceptDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getExceptDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExceptDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_ExceptDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Interface_decl ";"
protected class TemplateDefinition_Group_3 extends GroupToken {
	
	public TemplateDefinition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Interface_decl
protected class TemplateDefinition_Interface_declParserRuleCall_3_0 extends RuleCallToken {
	
	public TemplateDefinition_Interface_declParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getInterface_declParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Interface_decl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Interface_declParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// FixedModule ";"
protected class TemplateDefinition_Group_4 extends GroupToken {
	
	public TemplateDefinition_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FixedModule
protected class TemplateDefinition_FixedModuleParserRuleCall_4_0 extends RuleCallToken {
	
	public TemplateDefinition_FixedModuleParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getFixedModuleParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FixedModule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_FixedModuleParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// StructType ";"
protected class TemplateDefinition_Group_5 extends GroupToken {
	
	public TemplateDefinition_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructType
protected class TemplateDefinition_StructTypeParserRuleCall_5_0 extends RuleCallToken {
	
	public TemplateDefinition_StructTypeParserRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getStructTypeParserRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(StructType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_5_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_StructTypeParserRuleCall_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// NativeType ";"
protected class TemplateDefinition_Group_6 extends GroupToken {
	
	public TemplateDefinition_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NativeType
protected class TemplateDefinition_NativeTypeParserRuleCall_6_0 extends RuleCallToken {
	
	public TemplateDefinition_NativeTypeParserRuleCall_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getNativeTypeParserRuleCall_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NativeType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_NativeTypeParserRuleCall_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Event ";"
protected class TemplateDefinition_Group_7 extends GroupToken {
	
	public TemplateDefinition_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Event
protected class TemplateDefinition_EventParserRuleCall_7_0 extends RuleCallToken {
	
	public TemplateDefinition_EventParserRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getEventParserRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Event_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_7_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_EventParserRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ComponentDecl ";"
protected class TemplateDefinition_Group_8 extends GroupToken {
	
	public TemplateDefinition_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComponentDecl
protected class TemplateDefinition_ComponentDeclParserRuleCall_8_0 extends RuleCallToken {
	
	public TemplateDefinition_ComponentDeclParserRuleCall_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getComponentDeclParserRuleCall_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComponentDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_8_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_ComponentDeclParserRuleCall_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// HomeDecl ";"
protected class TemplateDefinition_Group_9 extends GroupToken {
	
	public TemplateDefinition_Group_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// HomeDecl
protected class TemplateDefinition_HomeDeclParserRuleCall_9_0 extends RuleCallToken {
	
	public TemplateDefinition_HomeDeclParserRuleCall_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getHomeDeclParserRuleCall_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(HomeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_9_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_HomeDeclParserRuleCall_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PortTypeDecl ";"
protected class TemplateDefinition_Group_10 extends GroupToken {
	
	public TemplateDefinition_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_10_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PortTypeDecl
protected class TemplateDefinition_PortTypeDeclParserRuleCall_10_0 extends RuleCallToken {
	
	public TemplateDefinition_PortTypeDeclParserRuleCall_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getPortTypeDeclParserRuleCall_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PortTypeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_10_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_PortTypeDeclParserRuleCall_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Connector ";"
protected class TemplateDefinition_Group_11 extends GroupToken {
	
	public TemplateDefinition_Group_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_11_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Connector
protected class TemplateDefinition_ConnectorParserRuleCall_11_0 extends RuleCallToken {
	
	public TemplateDefinition_ConnectorParserRuleCall_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getConnectorParserRuleCall_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Connector_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_11_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_ConnectorParserRuleCall_11_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TemplateModuleRef ";"
protected class TemplateDefinition_Group_12 extends GroupToken {
	
	public TemplateDefinition_Group_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_SemicolonKeyword_12_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TemplateModuleRef
protected class TemplateDefinition_TemplateModuleRefParserRuleCall_12_0 extends RuleCallToken {
	
	public TemplateDefinition_TemplateModuleRefParserRuleCall_12_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getTemplateModuleRefParserRuleCall_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TemplateModuleRef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TemplateDefinition_SemicolonKeyword_12_1 extends KeywordToken  {
	
	public TemplateDefinition_SemicolonKeyword_12_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getSemicolonKeyword_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateDefinition_TemplateModuleRefParserRuleCall_12_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// IDLComment
protected class TemplateDefinition_IDLCommentParserRuleCall_13 extends RuleCallToken {
	
	public TemplateDefinition_IDLCommentParserRuleCall_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getIDLCommentParserRuleCall_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TemplateDefinition ****************/


/************ begin Rule FixedModule ****************
 *
 * FixedModule:
 * 	"module" name=ID "{" definitions+=FixedDefinition* "}";
 *
 **/

// "module" name=ID "{" definitions+=FixedDefinition* "}"
protected class FixedModule_Group extends GroupToken {
	
	public FixedModule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "module"
protected class FixedModule_ModuleKeyword_0 extends KeywordToken  {
	
	public FixedModule_ModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class FixedModule_NameAssignment_1 extends AssignmentToken  {
	
	public FixedModule_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_ModuleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFixedModuleAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFixedModuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class FixedModule_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public FixedModule_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// definitions+=FixedDefinition*
protected class FixedModule_DefinitionsAssignment_3 extends AssignmentToken  {
	
	public FixedModule_DefinitionsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getDefinitionsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFixedDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFixedModuleAccess().getDefinitionsFixedDefinitionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FixedModule_DefinitionsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FixedModule_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class FixedModule_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public FixedModule_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedModuleAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_DefinitionsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FixedModule_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule FixedModule ****************/


/************ begin Rule FixedDefinition ****************
 *
 * FixedDefinition:
 * 	TypeDecl ";"
 * 	| ConstDecl ";"
 * 	| ExceptDecl ";"
 * 	| Interface_decl ";"
 * 	| FixedModule ";"
 * 	| StructType ";"
 * 	| NativeType ";"
 * 	| Event ";"
 * 	| ComponentDecl ";"
 * 	| HomeDecl ";"
 * 	| PortTypeDecl ";"
 * 	| Connector ";"
 * 	| IDLComment;
 *
 **/

// TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Interface_decl ";" | FixedModule ";" | StructType ";" | NativeType ";" |
// Event ";" | ComponentDecl ";" | HomeDecl ";" | PortTypeDecl ";" | Connector ";" | IDLComment
protected class FixedDefinition_Alternatives extends AlternativesToken {

	public FixedDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FixedDefinition_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FixedDefinition_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new FixedDefinition_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new FixedDefinition_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new FixedDefinition_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new FixedDefinition_Group_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new FixedDefinition_Group_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new FixedDefinition_Group_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new FixedDefinition_Group_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new FixedDefinition_Group_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new FixedDefinition_Group_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new FixedDefinition_IDLCommentParserRuleCall_12(lastRuleCallOrigin, this, 12, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedModuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl ";"
protected class FixedDefinition_Group_0 extends GroupToken {
	
	public FixedDefinition_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypeDeclaratorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionForwardDeclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDecl
protected class FixedDefinition_TypeDeclParserRuleCall_0_0 extends RuleCallToken {
	
	public FixedDefinition_TypeDeclParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getTypeDeclParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TypeDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_TypeDeclParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConstDecl ";"
protected class FixedDefinition_Group_1 extends GroupToken {
	
	public FixedDefinition_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstDecl
protected class FixedDefinition_ConstDeclParserRuleCall_1_0 extends RuleCallToken {
	
	public FixedDefinition_ConstDeclParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getConstDeclParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConstDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_ConstDeclParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ExceptDecl ";"
protected class FixedDefinition_Group_2 extends GroupToken {
	
	public FixedDefinition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExceptDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExceptDecl
protected class FixedDefinition_ExceptDeclParserRuleCall_2_0 extends RuleCallToken {
	
	public FixedDefinition_ExceptDeclParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getExceptDeclParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExceptDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExceptDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_ExceptDeclParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Interface_decl ";"
protected class FixedDefinition_Group_3 extends GroupToken {
	
	public FixedDefinition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterface_declRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Interface_decl
protected class FixedDefinition_Interface_declParserRuleCall_3_0 extends RuleCallToken {
	
	public FixedDefinition_Interface_declParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getInterface_declParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Interface_decl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Interface_decl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_3_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_Interface_declParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// FixedModule ";"
protected class FixedDefinition_Group_4 extends GroupToken {
	
	public FixedDefinition_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFixedModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FixedModule
protected class FixedDefinition_FixedModuleParserRuleCall_4_0 extends RuleCallToken {
	
	public FixedDefinition_FixedModuleParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getFixedModuleParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedModule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FixedModule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_FixedModuleParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// StructType ";"
protected class FixedDefinition_Group_5 extends GroupToken {
	
	public FixedDefinition_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructType
protected class FixedDefinition_StructTypeParserRuleCall_5_0 extends RuleCallToken {
	
	public FixedDefinition_StructTypeParserRuleCall_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getStructTypeParserRuleCall_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(StructType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_5_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_StructTypeParserRuleCall_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// NativeType ";"
protected class FixedDefinition_Group_6 extends GroupToken {
	
	public FixedDefinition_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NativeType
protected class FixedDefinition_NativeTypeParserRuleCall_6_0 extends RuleCallToken {
	
	public FixedDefinition_NativeTypeParserRuleCall_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getNativeTypeParserRuleCall_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NativeType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_NativeTypeParserRuleCall_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Event ";"
protected class FixedDefinition_Group_7 extends GroupToken {
	
	public FixedDefinition_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDclRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventForwardDclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Event
protected class FixedDefinition_EventParserRuleCall_7_0 extends RuleCallToken {
	
	public FixedDefinition_EventParserRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getEventParserRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Event_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_7_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_EventParserRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ComponentDecl ";"
protected class FixedDefinition_Group_8 extends GroupToken {
	
	public FixedDefinition_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComponentDecl
protected class FixedDefinition_ComponentDeclParserRuleCall_8_0 extends RuleCallToken {
	
	public FixedDefinition_ComponentDeclParserRuleCall_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getComponentDeclParserRuleCall_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComponentDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_8_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_ComponentDeclParserRuleCall_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// HomeDecl ";"
protected class FixedDefinition_Group_9 extends GroupToken {
	
	public FixedDefinition_Group_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHomeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// HomeDecl
protected class FixedDefinition_HomeDeclParserRuleCall_9_0 extends RuleCallToken {
	
	public FixedDefinition_HomeDeclParserRuleCall_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getHomeDeclParserRuleCall_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HomeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(HomeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_9_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_HomeDeclParserRuleCall_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// PortTypeDecl ";"
protected class FixedDefinition_Group_10 extends GroupToken {
	
	public FixedDefinition_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_10_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortTypeDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PortTypeDecl
protected class FixedDefinition_PortTypeDeclParserRuleCall_10_0 extends RuleCallToken {
	
	public FixedDefinition_PortTypeDeclParserRuleCall_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getPortTypeDeclParserRuleCall_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortTypeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PortTypeDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_10_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_PortTypeDeclParserRuleCall_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Connector ";"
protected class FixedDefinition_Group_11 extends GroupToken {
	
	public FixedDefinition_Group_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getGroup_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_SemicolonKeyword_11_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConnectorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Connector
protected class FixedDefinition_ConnectorParserRuleCall_11_0 extends RuleCallToken {
	
	public FixedDefinition_ConnectorParserRuleCall_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getConnectorParserRuleCall_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Connector_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Connector_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class FixedDefinition_SemicolonKeyword_11_1 extends KeywordToken  {
	
	public FixedDefinition_SemicolonKeyword_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getSemicolonKeyword_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FixedDefinition_ConnectorParserRuleCall_11_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// IDLComment
protected class FixedDefinition_IDLCommentParserRuleCall_12 extends RuleCallToken {
	
	public FixedDefinition_IDLCommentParserRuleCall_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFixedDefinitionAccess().getIDLCommentParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IDLComment_BodyAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FixedDefinition ****************/


/************ begin Rule TemplateModuleInst ****************
 *
 * TemplateModuleInst:
 * 	"module" type=ScopedName "<" parameter+=ActualParameter ("," parameter+=ActualParameter)* ">" name=ID
 * 	comments+=IDLComment*;
 *
 **/

// "module" type=ScopedName "<" parameter+=ActualParameter ("," parameter+=ActualParameter)* ">" name=ID
// comments+=IDLComment*
protected class TemplateModuleInst_Group extends GroupToken {
	
	public TemplateModuleInst_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_CommentsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModuleInst_NameAssignment_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleInstRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "module"
protected class TemplateModuleInst_ModuleKeyword_0 extends KeywordToken  {
	
	public TemplateModuleInst_ModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class TemplateModuleInst_TypeAssignment_1 extends AssignmentToken  {
	
	public TemplateModuleInst_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleInstAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModuleInst_ModuleKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "<"
protected class TemplateModuleInst_LessThanSignKeyword_2 extends KeywordToken  {
	
	public TemplateModuleInst_LessThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getLessThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameter+=ActualParameter
protected class TemplateModuleInst_ParameterAssignment_3 extends AssignmentToken  {
	
	public TemplateModuleInst_ParameterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getParameterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActualParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActualParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleInstAccess().getParameterActualParameterParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModuleInst_LessThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameter+=ActualParameter)*
protected class TemplateModuleInst_Group_4 extends GroupToken {
	
	public TemplateModuleInst_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_ParameterAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class TemplateModuleInst_CommaKeyword_4_0 extends KeywordToken  {
	
	public TemplateModuleInst_CommaKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getCommaKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModuleInst_ParameterAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameter+=ActualParameter
protected class TemplateModuleInst_ParameterAssignment_4_1 extends AssignmentToken  {
	
	public TemplateModuleInst_ParameterAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getParameterAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActualParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActualParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleInstAccess().getParameterActualParameterParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModuleInst_CommaKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class TemplateModuleInst_GreaterThanSignKeyword_5 extends KeywordToken  {
	
	public TemplateModuleInst_GreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModuleInst_ParameterAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class TemplateModuleInst_NameAssignment_6 extends AssignmentToken  {
	
	public TemplateModuleInst_NameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleInst_GreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemplateModuleInstAccess().getNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTemplateModuleInstAccess().getNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// comments+=IDLComment*
protected class TemplateModuleInst_CommentsAssignment_7 extends AssignmentToken  {
	
	public TemplateModuleInst_CommentsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleInstAccess().getCommentsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDLComment_BodyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIDLCommentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleInstAccess().getCommentsIDLCommentParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModuleInst_CommentsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TemplateModuleInst_NameAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TemplateModuleInst ****************/


/************ begin Rule ActualParameter ****************
 *
 * ActualParameter:
 * 	ConstExp | TypeSpec;
 *
 **/

// ConstExp | TypeSpec
protected class ActualParameter_Alternatives extends AlternativesToken {

	public ActualParameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getActualParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActualParameter_ConstExpParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActualParameter_TypeSpecParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstExp
protected class ActualParameter_ConstExpParserRuleCall_0 extends RuleCallToken {
	
	public ActualParameter_ConstExpParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActualParameterAccess().getConstExpParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstExp_OrExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExprRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ConstExp_OrExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TypeSpec
protected class ActualParameter_TypeSpecParserRuleCall_1 extends RuleCallToken {
	
	public ActualParameter_TypeSpecParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActualParameterAccess().getTypeSpecParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeSpec_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyTypeAccess().getAnyTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFixedPtTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongDoubleTypeAccess().getLongDoubleTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObjectTypeAccess().getObjectTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOctetTypeAccess().getOctetTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getScopedNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSequenceTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongIntAccess().getSignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedLongLongIntAccess().getSignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSignedShortIntAccess().getSignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnionTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongIntAccess().getUnsignedLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedLongLongIntAccess().getUnsignedLongLongIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnsignedShortIntAccess().getUnsignedShortIntAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueBaseTypeAccess().getValueBaseTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideCharTypeAccess().getWideCharTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWideStringTypeAccess().getWideStringTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TypeSpec_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ActualParameter ****************/


/************ begin Rule TemplateModuleRef ****************
 *
 * TemplateModuleRef:
 * 	"alias" type=ScopedName "<" id+=ID ("," id+=ID)* ">" name=ID;
 *
 **/

// "alias" type=ScopedName "<" id+=ID ("," id+=ID)* ">" name=ID
protected class TemplateModuleRef_Group extends GroupToken {
	
	public TemplateModuleRef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_NameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTemplateModuleRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "alias"
protected class TemplateModuleRef_AliasKeyword_0 extends KeywordToken  {
	
	public TemplateModuleRef_AliasKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getAliasKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ScopedName
protected class TemplateModuleRef_TypeAssignment_1 extends AssignmentToken  {
	
	public TemplateModuleRef_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScopedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTemplateModuleRefAccess().getTypeScopedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateModuleRef_AliasKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "<"
protected class TemplateModuleRef_LessThanSignKeyword_2 extends KeywordToken  {
	
	public TemplateModuleRef_LessThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getLessThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// id+=ID
protected class TemplateModuleRef_IdAssignment_3 extends AssignmentToken  {
	
	public TemplateModuleRef_IdAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getIdAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_LessThanSignKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemplateModuleRefAccess().getIdIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTemplateModuleRefAccess().getIdIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("," id+=ID)*
protected class TemplateModuleRef_Group_4 extends GroupToken {
	
	public TemplateModuleRef_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_IdAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class TemplateModuleRef_CommaKeyword_4_0 extends KeywordToken  {
	
	public TemplateModuleRef_CommaKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getCommaKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModuleRef_IdAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// id+=ID
protected class TemplateModuleRef_IdAssignment_4_1 extends AssignmentToken  {
	
	public TemplateModuleRef_IdAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getIdAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_CommaKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemplateModuleRefAccess().getIdIDTerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTemplateModuleRefAccess().getIdIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ">"
protected class TemplateModuleRef_GreaterThanSignKeyword_5 extends KeywordToken  {
	
	public TemplateModuleRef_GreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemplateModuleRef_IdAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class TemplateModuleRef_NameAssignment_6 extends AssignmentToken  {
	
	public TemplateModuleRef_NameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateModuleRefAccess().getNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemplateModuleRef_GreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTemplateModuleRefAccess().getNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTemplateModuleRefAccess().getNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TemplateModuleRef ****************/


/************ begin Rule IDLComment ****************
 *
 * IDLComment:
 * 	body=SL_COMMENT;
 *
 **/

// body=SL_COMMENT
protected class IDLComment_BodyAssignment extends AssignmentToken  {
	
	public IDLComment_BodyAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIDLCommentAccess().getBodyAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDLCommentRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIDLCommentAccess().getBodySL_COMMENTTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIDLCommentAccess().getBodySL_COMMENTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule IDLComment ****************/

}
