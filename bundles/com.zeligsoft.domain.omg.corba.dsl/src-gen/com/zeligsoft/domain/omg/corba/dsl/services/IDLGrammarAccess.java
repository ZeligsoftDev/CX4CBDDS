/*
 * generated by Xtext
 */
package com.zeligsoft.domain.omg.corba.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class IDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImport_declParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//Specification:
		//	{Specification} imports+=Import_decl*
		//	definitions+=Definition+;
		@Override public ParserRule getRule() { return rule; }

		//{Specification} imports+=Import_decl* definitions+=Definition+
		public Group getGroup() { return cGroup; }

		//{Specification}
		public Action getSpecificationAction_0() { return cSpecificationAction_0; }

		//imports+=Import_decl*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import_decl
		public RuleCall getImportsImport_declParserRuleCall_1_0() { return cImportsImport_declParserRuleCall_1_0; }

		//definitions+=Definition+
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }
	}

	public class PreprocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreproc_IncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreproc_IfdefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreproc_IfndefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPreproc_UndefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreproc_IfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPreproc_ElseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPreproc_ErrorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPreproc_DefineParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPreproc_EndifParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPreproc_PragmaParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFile_MarkerParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cExcluded_File_MarkerParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Preproc:
		//	Preproc_Include | Preproc_Ifdef | Preproc_Ifndef | Preproc_Undef | Preproc_If | Preproc_Else | Preproc_Error |
		//	Preproc_Define | Preproc_Endif | Preproc_Pragma | File_Marker | Excluded_File_Marker;
		@Override public ParserRule getRule() { return rule; }

		//Preproc_Include | Preproc_Ifdef | Preproc_Ifndef | Preproc_Undef | Preproc_If | Preproc_Else | Preproc_Error |
		//Preproc_Define | Preproc_Endif | Preproc_Pragma | File_Marker | Excluded_File_Marker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Preproc_Include
		public RuleCall getPreproc_IncludeParserRuleCall_0() { return cPreproc_IncludeParserRuleCall_0; }

		//Preproc_Ifdef
		public RuleCall getPreproc_IfdefParserRuleCall_1() { return cPreproc_IfdefParserRuleCall_1; }

		//Preproc_Ifndef
		public RuleCall getPreproc_IfndefParserRuleCall_2() { return cPreproc_IfndefParserRuleCall_2; }

		//Preproc_Undef
		public RuleCall getPreproc_UndefParserRuleCall_3() { return cPreproc_UndefParserRuleCall_3; }

		//Preproc_If
		public RuleCall getPreproc_IfParserRuleCall_4() { return cPreproc_IfParserRuleCall_4; }

		//Preproc_Else
		public RuleCall getPreproc_ElseParserRuleCall_5() { return cPreproc_ElseParserRuleCall_5; }

		//Preproc_Error
		public RuleCall getPreproc_ErrorParserRuleCall_6() { return cPreproc_ErrorParserRuleCall_6; }

		//Preproc_Define
		public RuleCall getPreproc_DefineParserRuleCall_7() { return cPreproc_DefineParserRuleCall_7; }

		//Preproc_Endif
		public RuleCall getPreproc_EndifParserRuleCall_8() { return cPreproc_EndifParserRuleCall_8; }

		//Preproc_Pragma
		public RuleCall getPreproc_PragmaParserRuleCall_9() { return cPreproc_PragmaParserRuleCall_9; }

		//File_Marker
		public RuleCall getFile_MarkerParserRuleCall_10() { return cFile_MarkerParserRuleCall_10; }

		//Excluded_File_Marker
		public RuleCall getExcluded_File_MarkerParserRuleCall_11() { return cExcluded_File_MarkerParserRuleCall_11; }
	}

	public class Preproc_IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Include");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueFileNameParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIncludeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStrValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStrValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStrValueAssignment_1_1.eContents().get(0);
		
		//Preproc_Include:
		//	"#include" "<" value=FileName ">" | "#include" strValue=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#include" "<" value=FileName ">" | "#include" strValue=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"#include" "<" value=FileName ">"
		public Group getGroup_0() { return cGroup_0; }

		//"#include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }

		//value=FileName
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//FileName
		public RuleCall getValueFileNameParserRuleCall_0_2_0() { return cValueFileNameParserRuleCall_0_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_3() { return cGreaterThanSignKeyword_0_3; }

		//"#include" strValue=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"#include"
		public Keyword getIncludeKeyword_1_0() { return cIncludeKeyword_1_0; }

		//strValue=STRING
		public Assignment getStrValueAssignment_1_1() { return cStrValueAssignment_1_1; }

		//STRING
		public RuleCall getStrValueSTRINGTerminalRuleCall_1_1_0() { return cStrValueSTRINGTerminalRuleCall_1_1_0; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//FileName:
		//	name+=ID ("." name+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//name+=ID ("." name+=ID)*
		public Group getGroup() { return cGroup; }

		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("." name+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//name+=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class Preproc_IfdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Ifdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfdefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Preproc_Ifdef:
		//	"#ifdef" value=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#ifdef" value=ID
		public Group getGroup() { return cGroup; }

		//"#ifdef"
		public Keyword getIfdefKeyword_0() { return cIfdefKeyword_0; }

		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}

	public class Preproc_IfndefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Ifndef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfndefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Preproc_Ifndef:
		//	"#ifndef" value=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#ifndef" value=ID
		public Group getGroup() { return cGroup; }

		//"#ifndef"
		public Keyword getIfndefKeyword_0() { return cIfndefKeyword_0; }

		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}

	public class Preproc_UndefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Undef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUndefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Preproc_Undef:
		//	"#undef" value=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#undef" value=ID
		public Group getGroup() { return cGroup; }

		//"#undef"
		public Keyword getUndefKeyword_0() { return cUndefKeyword_0; }

		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}

	public class Preproc_IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cElifKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNegationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegationExclamationMarkKeyword_1_0 = (Keyword)cNegationAssignment_1.eContents().get(0);
		private final Keyword cDefinedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePreproc_If_CompareParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_If:
		//	("#if" | "#elif") negation?="!"? "defined"? value+=Preproc_If_Compare+;
		@Override public ParserRule getRule() { return rule; }

		//("#if" | "#elif") negation?="!"? "defined"? value+=Preproc_If_Compare+
		public Group getGroup() { return cGroup; }

		//"#if" | "#elif"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"#if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//"#elif"
		public Keyword getElifKeyword_0_1() { return cElifKeyword_0_1; }

		//negation?="!"?
		public Assignment getNegationAssignment_1() { return cNegationAssignment_1; }

		//"!"
		public Keyword getNegationExclamationMarkKeyword_1_0() { return cNegationExclamationMarkKeyword_1_0; }

		//"defined"?
		public Keyword getDefinedKeyword_2() { return cDefinedKeyword_2; }

		//value+=Preproc_If_Compare+
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Preproc_If_Compare
		public RuleCall getValuePreproc_If_CompareParserRuleCall_3_0() { return cValuePreproc_If_CompareParserRuleCall_3_0; }
	}

	public class Preproc_If_CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_If_Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPreproc_If_ValParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_0_2_0 = (Keyword)cOpAssignment_1_0_2.eContents().get(0);
		private final Assignment cOpAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignKeyword_1_0_3_0 = (Keyword)cOpAssignment_1_0_3.eContents().get(0);
		private final Assignment cOpAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_4_0 = (Keyword)cOpAssignment_1_0_4.eContents().get(0);
		private final Assignment cOpAssignment_1_0_5 = (Assignment)cAlternatives_1_0.eContents().get(5);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_5_0 = (Keyword)cOpAssignment_1_0_5.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsPreproc_If_ValParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Preproc_If_Compare:
		//	lhs=Preproc_If_Val ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=Preproc_If_Val ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*
		public Group getGroup() { return cGroup; }

		//lhs=Preproc_If_Val
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Preproc_If_Val
		public RuleCall getLhsPreproc_If_ValParserRuleCall_0_0() { return cLhsPreproc_If_ValParserRuleCall_0_0; }

		//((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*
		public Group getGroup_1() { return cGroup_1; }

		//op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="=="
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0_0; }

		//op="!="
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0; }

		//op=">"
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_2_0() { return cOpGreaterThanSignKeyword_1_0_2_0; }

		//op="<"
		public Assignment getOpAssignment_1_0_3() { return cOpAssignment_1_0_3; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_3_0() { return cOpLessThanSignKeyword_1_0_3_0; }

		//op=">="
		public Assignment getOpAssignment_1_0_4() { return cOpAssignment_1_0_4; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_4_0() { return cOpGreaterThanSignEqualsSignKeyword_1_0_4_0; }

		//op="<="
		public Assignment getOpAssignment_1_0_5() { return cOpAssignment_1_0_5; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_5_0() { return cOpLessThanSignEqualsSignKeyword_1_0_5_0; }

		//rhs=Preproc_If_Val
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//Preproc_If_Val
		public RuleCall getRhsPreproc_If_ValParserRuleCall_1_1_0() { return cRhsPreproc_If_ValParserRuleCall_1_1_0; }
	}

	public class Preproc_If_ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_If_Val");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstExpParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Preproc_If_Val:
		//	value=ConstExp;
		@Override public ParserRule getRule() { return rule; }

		//value=ConstExp
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstExp
		public RuleCall getValueConstExpParserRuleCall_0() { return cValueConstExpParserRuleCall_0; }
	}

	public class Preproc_ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreproc_ElseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Preproc_Else:
		//	{Preproc_Else}
		//	"#else";
		@Override public ParserRule getRule() { return rule; }

		//{Preproc_Else} "#else"
		public Group getGroup() { return cGroup; }

		//{Preproc_Else}
		public Action getPreproc_ElseAction_0() { return cPreproc_ElseAction_0; }

		//"#else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
	}

	public class Preproc_ErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Error");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Preproc_Error:
		//	"#error" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#error" value=STRING
		public Group getGroup() { return cGroup; }

		//"#error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class Preproc_DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpConstExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Preproc_Define:
		//	"#define " value=ID exp=ConstExp?;
		@Override public ParserRule getRule() { return rule; }

		//"#define " value=ID exp=ConstExp?
		public Group getGroup() { return cGroup; }

		//"#define "
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }

		//exp=ConstExp?
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ConstExp
		public RuleCall getExpConstExpParserRuleCall_2_0() { return cExpConstExpParserRuleCall_2_0; }
	}

	public class Preproc_EndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Endif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreproc_EndifAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Preproc_Endif:
		//	{Preproc_Endif}
		//	"#endif";
		@Override public ParserRule getRule() { return rule; }

		//{Preproc_Endif} "#endif"
		public Group getGroup() { return cGroup; }

		//{Preproc_Endif}
		public Action getPreproc_EndifAction_0() { return cPreproc_EndifAction_0; }

		//"#endif"
		public Keyword getEndifKeyword_1() { return cEndifKeyword_1; }
	}

	public class Preproc_PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreproc_Pragma_PrefixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreproc_Pragma_Conn_TypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreproc_Pragma_Ciao_LemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPreproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPreproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPreproc_Pragma_NddsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPreproc_Pragma_ComponentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPreproc_Pragma_HomeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPreproc_Pragma_DDS4CCM_ImplParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPreproc_Pragma_MiscParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Preproc_Pragma:
		//	Preproc_Pragma_Prefix
		//	| Preproc_Pragma_Conn_Type
		//	| Preproc_Pragma_Ciao_Lem
		//	| Preproc_Pragma_Ciao_Ami4ccm_Interface
		//	| Preproc_Pragma_Ciao_Ami4ccm_Receptacle
		//	| Preproc_Pragma_Ciao_Ami4ccm_Idl
		//	| Preproc_Pragma_Ndds
		//	| Preproc_Pragma_Component
		//	| Preproc_Pragma_Home
		//	| Preproc_Pragma_DDS4CCM_Impl
		//	| Preproc_Pragma_Misc;
		@Override public ParserRule getRule() { return rule; }

		//Preproc_Pragma_Prefix | Preproc_Pragma_Conn_Type | Preproc_Pragma_Ciao_Lem | Preproc_Pragma_Ciao_Ami4ccm_Interface |
		//Preproc_Pragma_Ciao_Ami4ccm_Receptacle | Preproc_Pragma_Ciao_Ami4ccm_Idl | Preproc_Pragma_Ndds |
		//Preproc_Pragma_Component | Preproc_Pragma_Home | Preproc_Pragma_DDS4CCM_Impl | Preproc_Pragma_Misc
		public Alternatives getAlternatives() { return cAlternatives; }

		//Preproc_Pragma_Prefix
		public RuleCall getPreproc_Pragma_PrefixParserRuleCall_0() { return cPreproc_Pragma_PrefixParserRuleCall_0; }

		//Preproc_Pragma_Conn_Type
		public RuleCall getPreproc_Pragma_Conn_TypeParserRuleCall_1() { return cPreproc_Pragma_Conn_TypeParserRuleCall_1; }

		//Preproc_Pragma_Ciao_Lem
		public RuleCall getPreproc_Pragma_Ciao_LemParserRuleCall_2() { return cPreproc_Pragma_Ciao_LemParserRuleCall_2; }

		//Preproc_Pragma_Ciao_Ami4ccm_Interface
		public RuleCall getPreproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3() { return cPreproc_Pragma_Ciao_Ami4ccm_InterfaceParserRuleCall_3; }

		//Preproc_Pragma_Ciao_Ami4ccm_Receptacle
		public RuleCall getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4() { return cPreproc_Pragma_Ciao_Ami4ccm_ReceptacleParserRuleCall_4; }

		//Preproc_Pragma_Ciao_Ami4ccm_Idl
		public RuleCall getPreproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5() { return cPreproc_Pragma_Ciao_Ami4ccm_IdlParserRuleCall_5; }

		//Preproc_Pragma_Ndds
		public RuleCall getPreproc_Pragma_NddsParserRuleCall_6() { return cPreproc_Pragma_NddsParserRuleCall_6; }

		//Preproc_Pragma_Component
		public RuleCall getPreproc_Pragma_ComponentParserRuleCall_7() { return cPreproc_Pragma_ComponentParserRuleCall_7; }

		//Preproc_Pragma_Home
		public RuleCall getPreproc_Pragma_HomeParserRuleCall_8() { return cPreproc_Pragma_HomeParserRuleCall_8; }

		//Preproc_Pragma_DDS4CCM_Impl
		public RuleCall getPreproc_Pragma_DDS4CCM_ImplParserRuleCall_9() { return cPreproc_Pragma_DDS4CCM_ImplParserRuleCall_9; }

		//Preproc_Pragma_Misc
		public RuleCall getPreproc_Pragma_MiscParserRuleCall_10() { return cPreproc_Pragma_MiscParserRuleCall_10; }
	}

	public class Preproc_Pragma_PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPrefixKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Preproc_Pragma_Prefix:
		//	"#pragma" "prefix" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "prefix" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"prefix"
		public Keyword getPrefixKeyword_1() { return cPrefixKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class Preproc_Pragma_Conn_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Conn_Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConntypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuePortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePortIDTerminalRuleCall_2_0 = (RuleCall)cValuePortAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cValueConnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueConnTypeIDTerminalRuleCall_4_0 = (RuleCall)cValueConnTypeAssignment_4.eContents().get(0);
		
		//Preproc_Pragma_Conn_Type:
		//	"#pragma" "conntype" valuePort=ID ("::" ID)* valueConnType=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "conntype" valuePort=ID ("::" ID)* valueConnType=ID
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"conntype"
		public Keyword getConntypeKeyword_1() { return cConntypeKeyword_1; }

		//valuePort=ID
		public Assignment getValuePortAssignment_2() { return cValuePortAssignment_2; }

		//ID
		public RuleCall getValuePortIDTerminalRuleCall_2_0() { return cValuePortIDTerminalRuleCall_2_0; }

		//("::" ID)*
		public Group getGroup_3() { return cGroup_3; }

		//"::"
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }

		//valueConnType=ID
		public Assignment getValueConnTypeAssignment_4() { return cValueConnTypeAssignment_4; }

		//ID
		public RuleCall getValueConnTypeIDTerminalRuleCall_4_0() { return cValueConnTypeIDTerminalRuleCall_4_0; }
	}

	public class Preproc_Pragma_Ciao_LemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Ciao_Lem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCiaoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLemKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_Ciao_Lem:
		//	"#pragma" "ciao" "lem" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "ciao" "lem" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"ciao"
		public Keyword getCiaoKeyword_1() { return cCiaoKeyword_1; }

		//"lem"
		public Keyword getLemKeyword_2() { return cLemKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_Ciao_Ami4ccm_InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Ciao_Ami4ccm_Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCiaoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAmi4ccmInterfaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_Ciao_Ami4ccm_Interface:
		//	"#pragma" "ciao" "ami4ccm interface" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "ciao" "ami4ccm interface" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"ciao"
		public Keyword getCiaoKeyword_1() { return cCiaoKeyword_1; }

		//"ami4ccm interface"
		public Keyword getAmi4ccmInterfaceKeyword_2() { return cAmi4ccmInterfaceKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_Ciao_Ami4ccm_ReceptacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Ciao_Ami4ccm_Receptacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCiaoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAmi4ccmReceptacleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_Ciao_Ami4ccm_Receptacle:
		//	"#pragma" "ciao" "ami4ccm receptacle" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "ciao" "ami4ccm receptacle" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"ciao"
		public Keyword getCiaoKeyword_1() { return cCiaoKeyword_1; }

		//"ami4ccm receptacle"
		public Keyword getAmi4ccmReceptacleKeyword_2() { return cAmi4ccmReceptacleKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_Ciao_Ami4ccm_IdlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Ciao_Ami4ccm_Idl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCiaoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAmi4ccmIdlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_Ciao_Ami4ccm_Idl:
		//	"#pragma" "ciao" "ami4ccm idl" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "ciao" "ami4ccm idl" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"ciao"
		public Keyword getCiaoKeyword_1() { return cCiaoKeyword_1; }

		//"ami4ccm idl"
		public Keyword getAmi4ccmIdlKeyword_2() { return cAmi4ccmIdlKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_NddsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Ndds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNddsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypesupportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_Ndds:
		//	"#pragma" "ndds" "typesupport" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "ndds" "typesupport" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"ndds"
		public Keyword getNddsKeyword_1() { return cNddsKeyword_1; }

		//"typesupport"
		public Keyword getTypesupportKeyword_2() { return cTypesupportKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cComponentInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Preproc_Pragma_Component:
		//	"#pragma" "componentInterface" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "componentInterface" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"componentInterface"
		public Keyword getComponentInterfaceKeyword_1() { return cComponentInterfaceKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class Preproc_Pragma_HomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Home");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cComponentHomeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Preproc_Pragma_Home:
		//	"#pragma" "componentHome" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "componentHome" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"componentHome"
		public Keyword getComponentHomeKeyword_1() { return cComponentHomeKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class Preproc_Pragma_DDS4CCM_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_DDS4CCM_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDds4ccmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cImplKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Preproc_Pragma_DDS4CCM_Impl:
		//	"#pragma" "dds4ccm" "impl" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#pragma" "dds4ccm" "impl" value=STRING
		public Group getGroup() { return cGroup; }

		//"#pragma"
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }

		//"dds4ccm"
		public Keyword getDds4ccmKeyword_1() { return cDds4ccmKeyword_1; }

		//"impl"
		public Keyword getImplKeyword_2() { return cImplKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class Preproc_Pragma_MiscElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Preproc_Pragma_Misc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreproc_Pragma_MiscAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPragmaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTypesupportKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//Preproc_Pragma_Misc:
		//	{Preproc_Pragma_Misc}
		//	"#pragma" ("typesupport" | STRING | ID)*;
		@Override public ParserRule getRule() { return rule; }

		//{Preproc_Pragma_Misc} "#pragma" ("typesupport" | STRING | ID)*
		public Group getGroup() { return cGroup; }

		//{Preproc_Pragma_Misc}
		public Action getPreproc_Pragma_MiscAction_0() { return cPreproc_Pragma_MiscAction_0; }

		//"#pragma"
		public Keyword getPragmaKeyword_1() { return cPragmaKeyword_1; }

		//("typesupport" | STRING | ID)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"typesupport"
		public Keyword getTypesupportKeyword_2_0() { return cTypesupportKeyword_2_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }
	}

	public class File_MarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.File_Marker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		
		//File_Marker:
		//	"#file" file=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#file" file=STRING
		public Group getGroup() { return cGroup; }

		//"#file"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }

		//file=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }
	}

	public class Excluded_File_MarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Excluded_File_Marker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExcluded_fileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		
		//Excluded_File_Marker:
		//	"#excluded_file" file=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"#excluded_file" file=STRING
		public Group getGroup() { return cGroup; }

		//"#excluded_file"
		public Keyword getExcluded_fileKeyword_0() { return cExcluded_fileKeyword_0; }

		//file=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }
	}

	public class Import_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Import_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImported_scopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImported_scopeSTRINGTerminalRuleCall_1_0 = (RuleCall)cImported_scopeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import_decl:
		//	"import" imported_scope=STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" imported_scope=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//imported_scope=STRING
		public Assignment getImported_scopeAssignment_1() { return cImported_scopeAssignment_1; }

		//STRING
		public RuleCall getImported_scopeSTRINGTerminalRuleCall_1_0() { return cImported_scopeSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInterface_or_Forward_DeclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cComponentForwardDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cConstDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cModuleParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cExceptDeclParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cStructTypeParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cTypeDeclParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cNativeTypeParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cPreprocParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cEventParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cComponentDeclParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cHomeDeclParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cPortTypeDeclParserRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final RuleCall cConnectorParserRuleCall_13_0 = (RuleCall)cGroup_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final RuleCall cTemplateModuleParserRuleCall_14_0 = (RuleCall)cGroup_14.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final RuleCall cTemplateModuleInstParserRuleCall_15_0 = (RuleCall)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final RuleCall cIDLCommentParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Definition:
		//	Interface_or_Forward_Decl ";"
		//	| ComponentForwardDecl ";"
		//	| ConstDecl ";"
		//	| Module ";"
		//	| ExceptDecl ";"
		//	| StructType ";"
		//	| TypeDecl ";"
		//	| NativeType ";"
		//	| Preproc
		//	// IDL3
		//	| Event ";"
		//	| ComponentDecl ";"
		//	| HomeDecl ";"
		//	// DDS4CCM
		//	| PortTypeDecl ";"
		//	| Connector ";"
		//	| TemplateModule ";"
		//	| TemplateModuleInst ";"
		//	| IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//Interface_or_Forward_Decl ";" | ComponentForwardDecl ";" | ConstDecl ";" | Module ";" | ExceptDecl ";" | StructType ";"
		//| TypeDecl ";" | NativeType ";" | Preproc // IDL3
		//| Event ";" | ComponentDecl ";" | HomeDecl ";" // DDS4CCM
		//| PortTypeDecl ";" | Connector ";" | TemplateModule ";" | TemplateModuleInst ";" | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface_or_Forward_Decl ";"
		public Group getGroup_0() { return cGroup_0; }

		//Interface_or_Forward_Decl
		public RuleCall getInterface_or_Forward_DeclParserRuleCall_0_0() { return cInterface_or_Forward_DeclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//ComponentForwardDecl ";"
		public Group getGroup_1() { return cGroup_1; }

		//ComponentForwardDecl
		public RuleCall getComponentForwardDeclParserRuleCall_1_0() { return cComponentForwardDeclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//ConstDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_2_0() { return cConstDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//Module ";"
		public Group getGroup_3() { return cGroup_3; }

		//Module
		public RuleCall getModuleParserRuleCall_3_0() { return cModuleParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//ExceptDecl ";"
		public Group getGroup_4() { return cGroup_4; }

		//ExceptDecl
		public RuleCall getExceptDeclParserRuleCall_4_0() { return cExceptDeclParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//StructType ";"
		public Group getGroup_5() { return cGroup_5; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_5_0() { return cStructTypeParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//TypeDecl ";"
		public Group getGroup_6() { return cGroup_6; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_6_0() { return cTypeDeclParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//NativeType ";"
		public Group getGroup_7() { return cGroup_7; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_7_0() { return cNativeTypeParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//Preproc
		public RuleCall getPreprocParserRuleCall_8() { return cPreprocParserRuleCall_8; }

		//Event ";"
		public Group getGroup_9() { return cGroup_9; }

		//Event
		public RuleCall getEventParserRuleCall_9_0() { return cEventParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }

		//ComponentDecl ";"
		public Group getGroup_10() { return cGroup_10; }

		//ComponentDecl
		public RuleCall getComponentDeclParserRuleCall_10_0() { return cComponentDeclParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }

		//HomeDecl ";"
		public Group getGroup_11() { return cGroup_11; }

		//HomeDecl
		public RuleCall getHomeDeclParserRuleCall_11_0() { return cHomeDeclParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }

		//PortTypeDecl ";"
		public Group getGroup_12() { return cGroup_12; }

		//PortTypeDecl
		public RuleCall getPortTypeDeclParserRuleCall_12_0() { return cPortTypeDeclParserRuleCall_12_0; }

		//";"
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }

		//Connector ";"
		public Group getGroup_13() { return cGroup_13; }

		//Connector
		public RuleCall getConnectorParserRuleCall_13_0() { return cConnectorParserRuleCall_13_0; }

		//";"
		public Keyword getSemicolonKeyword_13_1() { return cSemicolonKeyword_13_1; }

		//TemplateModule ";"
		public Group getGroup_14() { return cGroup_14; }

		//TemplateModule
		public RuleCall getTemplateModuleParserRuleCall_14_0() { return cTemplateModuleParserRuleCall_14_0; }

		//";"
		public Keyword getSemicolonKeyword_14_1() { return cSemicolonKeyword_14_1; }

		//TemplateModuleInst ";"
		public Group getGroup_15() { return cGroup_15; }

		//TemplateModuleInst
		public RuleCall getTemplateModuleInstParserRuleCall_15_0() { return cTemplateModuleInstParserRuleCall_15_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_16() { return cIDLCommentParserRuleCall_16; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentsIDLCommentParserRuleCall_2_0 = (RuleCall)cCommentsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Module:
		//	"module" name=ID comments+=IDLComment* "{" definitions+=Definition* "}";
		@Override public ParserRule getRule() { return rule; }

		//"module" name=ID comments+=IDLComment* "{" definitions+=Definition* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_2() { return cCommentsAssignment_2; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_2_0() { return cCommentsIDLCommentParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_4_0() { return cDefinitionsDefinitionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Interface_or_Forward_DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Interface_or_Forward_Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterface_declParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForward_declParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Interface_or_Forward_Decl:
		//	Interface_decl
		//	| Forward_decl;
		@Override public ParserRule getRule() { return rule; }

		//Interface_decl | Forward_decl
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface_decl
		public RuleCall getInterface_declParserRuleCall_0() { return cInterface_declParserRuleCall_0; }

		//Forward_decl
		public RuleCall getForward_declParserRuleCall_1() { return cForward_declParserRuleCall_1; }
	}

	public class Interface_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Interface_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderInterface_headerParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceBodyInterfaceBodyParserRuleCall_2_0 = (RuleCall)cInterfaceBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Interface_decl:
		//	header=Interface_header "{" interfaceBody=InterfaceBody "}";
		@Override public ParserRule getRule() { return rule; }

		//header=Interface_header "{" interfaceBody=InterfaceBody "}"
		public Group getGroup() { return cGroup; }

		//header=Interface_header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }

		//Interface_header
		public RuleCall getHeaderInterface_headerParserRuleCall_0_0() { return cHeaderInterface_headerParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//interfaceBody=InterfaceBody
		public Assignment getInterfaceBodyAssignment_2() { return cInterfaceBodyAssignment_2; }

		//InterfaceBody
		public RuleCall getInterfaceBodyInterfaceBodyParserRuleCall_2_0() { return cInterfaceBodyInterfaceBodyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Forward_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Forward_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAbstractKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLocalKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Forward_decl:
		//	("abstract" | "local")? "interface" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//("abstract" | "local")? "interface" name=ID
		public Group getGroup() { return cGroup; }

		//("abstract" | "local")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"abstract"
		public Keyword getAbstractKeyword_0_0() { return cAbstractKeyword_0_0; }

		//"local"
		public Keyword getLocalKeyword_0_1() { return cLocalKeyword_0_1; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class Interface_headerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Interface_header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsAbstractAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0_0 = (Keyword)cIsAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cIsLocalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsLocalLocalKeyword_0_1_0 = (Keyword)cIsLocalAssignment_0_1.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSpecializesScopedNameParserRuleCall_3_1_0 = (RuleCall)cSpecializesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_2_1_0 = (RuleCall)cCommentsAssignment_3_2_1.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cSpecializesScopedNameParserRuleCall_3_2_2_0 = (RuleCall)cSpecializesAssignment_3_2_2.eContents().get(0);
		private final Assignment cCommentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentsIDLCommentParserRuleCall_4_0 = (RuleCall)cCommentsAssignment_4.eContents().get(0);
		
		//Interface_header:
		//	(isAbstract?="abstract" | isLocal?="local")? "interface" name=ID (":" specializes+=ScopedName (","
		//	comments+=IDLComment* specializes+=ScopedName)*)? comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//(isAbstract?="abstract" | isLocal?="local")? "interface" name=ID (":" specializes+=ScopedName ("," comments+=IDLComment*
		//specializes+=ScopedName)*)? comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//(isAbstract?="abstract" | isLocal?="local")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isAbstract?="abstract"
		public Assignment getIsAbstractAssignment_0_0() { return cIsAbstractAssignment_0_0; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_0_0_0() { return cIsAbstractAbstractKeyword_0_0_0; }

		//isLocal?="local"
		public Assignment getIsLocalAssignment_0_1() { return cIsLocalAssignment_0_1; }

		//"local"
		public Keyword getIsLocalLocalKeyword_0_1_0() { return cIsLocalLocalKeyword_0_1_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" specializes+=ScopedName ("," comments+=IDLComment* specializes+=ScopedName)*)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//specializes+=ScopedName
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }

		//ScopedName
		public RuleCall getSpecializesScopedNameParserRuleCall_3_1_0() { return cSpecializesScopedNameParserRuleCall_3_1_0; }

		//("," comments+=IDLComment* specializes+=ScopedName)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3_2_1() { return cCommentsAssignment_3_2_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_2_1_0() { return cCommentsIDLCommentParserRuleCall_3_2_1_0; }

		//specializes+=ScopedName
		public Assignment getSpecializesAssignment_3_2_2() { return cSpecializesAssignment_3_2_2; }

		//ScopedName
		public RuleCall getSpecializesScopedNameParserRuleCall_3_2_2_0() { return cSpecializesScopedNameParserRuleCall_3_2_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_4() { return cCommentsAssignment_4; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_4_0() { return cCommentsIDLCommentParserRuleCall_4_0; }
	}

	public class InterfaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.InterfaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExportExportParserRuleCall_1_0 = (RuleCall)cExportAssignment_1.eContents().get(0);
		
		//InterfaceBody:
		//	{InterfaceBody} export+=Export*;
		@Override public ParserRule getRule() { return rule; }

		//{InterfaceBody} export+=Export*
		public Group getGroup() { return cGroup; }

		//{InterfaceBody}
		public Action getInterfaceBodyAction_0() { return cInterfaceBodyAction_0; }

		//export+=Export*
		public Assignment getExportAssignment_1() { return cExportAssignment_1; }

		//Export
		public RuleCall getExportExportParserRuleCall_1_0() { return cExportExportParserRuleCall_1_0; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Export");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAttrDeclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOpDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cConstDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cExceptDeclParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cPreprocParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIDLCommentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Export:
		//	AttrDecl ";"
		//	| OpDecl ";"
		//	| TypeDecl ";"
		//	| ConstDecl ";"
		//	| ExceptDecl ";"
		//	| Preproc
		//	| IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//AttrDecl ";" | OpDecl ";" | TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Preproc | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttrDecl ";"
		public Group getGroup_0() { return cGroup_0; }

		//AttrDecl
		public RuleCall getAttrDeclParserRuleCall_0_0() { return cAttrDeclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//OpDecl ";"
		public Group getGroup_1() { return cGroup_1; }

		//OpDecl
		public RuleCall getOpDeclParserRuleCall_1_0() { return cOpDeclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//TypeDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_2_0() { return cTypeDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//ConstDecl ";"
		public Group getGroup_3() { return cGroup_3; }

		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_3_0() { return cConstDeclParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//ExceptDecl ";"
		public Group getGroup_4() { return cGroup_4; }

		//ExceptDecl
		public RuleCall getExceptDeclParserRuleCall_4_0() { return cExceptDeclParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//Preproc
		public RuleCall getPreprocParserRuleCall_5() { return cPreprocParserRuleCall_5; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_6() { return cIDLCommentParserRuleCall_6; }
	}

	public class AttrDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AttrDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadOnlyAttrSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttrDecl:
		//	AttrSpec | ReadOnlyAttrSpec;
		@Override public ParserRule getRule() { return rule; }

		//AttrSpec | ReadOnlyAttrSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttrSpec
		public RuleCall getAttrSpecParserRuleCall_0() { return cAttrSpecParserRuleCall_0; }

		//ReadOnlyAttrSpec
		public RuleCall getReadOnlyAttrSpecParserRuleCall_1() { return cReadOnlyAttrSpecParserRuleCall_1; }
	}

	public class AttrSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AttrSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeParamTypeSpecParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamesIDTerminalRuleCall_3_0 = (RuleCall)cNamesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Keyword cGetraisesKeyword_4_0_0_0 = (Keyword)cGroup_4_0_0.eContents().get(0);
		private final Assignment cGetRaisesAssignment_4_0_0_1 = (Assignment)cGroup_4_0_0.eContents().get(1);
		private final RuleCall cGetRaisesAttrRaisesExprParserRuleCall_4_0_0_1_0 = (RuleCall)cGetRaisesAssignment_4_0_0_1.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cAlternatives_4_0.eContents().get(1);
		private final Keyword cSetraisesKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cSetRaisesAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cSetRaisesAttrRaisesExprParserRuleCall_4_0_1_1_0 = (RuleCall)cSetRaisesAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cNamesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_4_1_1_0 = (RuleCall)cNamesAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Keyword cGetraisesKeyword_5_0_0_0 = (Keyword)cGroup_5_0_0.eContents().get(0);
		private final Assignment cGetRaisesAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cGetRaisesAttrRaisesExprParserRuleCall_5_0_0_1_0 = (RuleCall)cGetRaisesAssignment_5_0_0_1.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cAlternatives_5_0.eContents().get(1);
		private final Keyword cSetraisesKeyword_5_0_1_0 = (Keyword)cGroup_5_0_1.eContents().get(0);
		private final Assignment cSetRaisesAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cSetRaisesAttrRaisesExprParserRuleCall_5_0_1_1_0 = (RuleCall)cSetRaisesAssignment_5_0_1_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cNamesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_5_1_1_0 = (RuleCall)cNamesAssignment_5_1_1.eContents().get(0);
		private final Assignment cCommentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommentsIDLCommentParserRuleCall_6_0 = (RuleCall)cCommentsAssignment_6.eContents().get(0);
		
		//AttrSpec:
		//	comments+=IDLComment* "attribute" type=ParamTypeSpec names+=ID (("getraises" getRaises=AttrRaisesExpr | "setraises"
		//	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? (("getraises" getRaises=AttrRaisesExpr | "setraises"
		//	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* "attribute" type=ParamTypeSpec names+=ID (("getraises" getRaises=AttrRaisesExpr | "setraises"
		//setRaises=AttrRaisesExpr) | ("," names+=ID)*)? (("getraises" getRaises=AttrRaisesExpr | "setraises"
		//setRaises=AttrRaisesExpr) | ("," names+=ID)*)? comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//"attribute"
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }

		//type=ParamTypeSpec
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ParamTypeSpec
		public RuleCall getTypeParamTypeSpecParserRuleCall_2_0() { return cTypeParamTypeSpecParserRuleCall_2_0; }

		//names+=ID
		public Assignment getNamesAssignment_3() { return cNamesAssignment_3; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_3_0() { return cNamesIDTerminalRuleCall_3_0; }

		//(("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr) | ("," names+=ID)*)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"getraises" getRaises=AttrRaisesExpr
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//"getraises"
		public Keyword getGetraisesKeyword_4_0_0_0() { return cGetraisesKeyword_4_0_0_0; }

		//getRaises=AttrRaisesExpr
		public Assignment getGetRaisesAssignment_4_0_0_1() { return cGetRaisesAssignment_4_0_0_1; }

		//AttrRaisesExpr
		public RuleCall getGetRaisesAttrRaisesExprParserRuleCall_4_0_0_1_0() { return cGetRaisesAttrRaisesExprParserRuleCall_4_0_0_1_0; }

		//"setraises" setRaises=AttrRaisesExpr
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//"setraises"
		public Keyword getSetraisesKeyword_4_0_1_0() { return cSetraisesKeyword_4_0_1_0; }

		//setRaises=AttrRaisesExpr
		public Assignment getSetRaisesAssignment_4_0_1_1() { return cSetRaisesAssignment_4_0_1_1; }

		//AttrRaisesExpr
		public RuleCall getSetRaisesAttrRaisesExprParserRuleCall_4_0_1_1_0() { return cSetRaisesAttrRaisesExprParserRuleCall_4_0_1_1_0; }

		//("," names+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_4_1_1() { return cNamesAssignment_4_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_4_1_1_0() { return cNamesIDTerminalRuleCall_4_1_1_0; }

		//(("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr) | ("," names+=ID)*)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//("getraises" getRaises=AttrRaisesExpr | "setraises" setRaises=AttrRaisesExpr)
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//"getraises" getRaises=AttrRaisesExpr
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//"getraises"
		public Keyword getGetraisesKeyword_5_0_0_0() { return cGetraisesKeyword_5_0_0_0; }

		//getRaises=AttrRaisesExpr
		public Assignment getGetRaisesAssignment_5_0_0_1() { return cGetRaisesAssignment_5_0_0_1; }

		//AttrRaisesExpr
		public RuleCall getGetRaisesAttrRaisesExprParserRuleCall_5_0_0_1_0() { return cGetRaisesAttrRaisesExprParserRuleCall_5_0_0_1_0; }

		//"setraises" setRaises=AttrRaisesExpr
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//"setraises"
		public Keyword getSetraisesKeyword_5_0_1_0() { return cSetraisesKeyword_5_0_1_0; }

		//setRaises=AttrRaisesExpr
		public Assignment getSetRaisesAssignment_5_0_1_1() { return cSetRaisesAssignment_5_0_1_1; }

		//AttrRaisesExpr
		public RuleCall getSetRaisesAttrRaisesExprParserRuleCall_5_0_1_1_0() { return cSetRaisesAttrRaisesExprParserRuleCall_5_0_1_1_0; }

		//("," names+=ID)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_5_1_1() { return cNamesAssignment_5_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_5_1_1_0() { return cNamesIDTerminalRuleCall_5_1_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_6() { return cCommentsAssignment_6; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_6_0() { return cCommentsIDLCommentParserRuleCall_6_0; }
	}

	public class ReadOnlyAttrSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ReadOnlyAttrSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cReadonlyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAttributeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeParamTypeSpecParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNamesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamesIDTerminalRuleCall_4_0 = (RuleCall)cNamesAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cRaisesKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cRaisesAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cRaisesAttrRaisesExprParserRuleCall_5_0_1_0 = (RuleCall)cRaisesAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cNamesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_5_1_1_0 = (RuleCall)cNamesAssignment_5_1_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cRaisesKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cRaisesAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cRaisesAttrRaisesExprParserRuleCall_6_0_1_0 = (RuleCall)cRaisesAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cNamesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_6_1_1_0 = (RuleCall)cNamesAssignment_6_1_1.eContents().get(0);
		private final Assignment cCommentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommentsIDLCommentParserRuleCall_7_0 = (RuleCall)cCommentsAssignment_7.eContents().get(0);
		
		//ReadOnlyAttrSpec:
		//	comments+=IDLComment* "readonly" "attribute" type=ParamTypeSpec names+=ID ("raises" raises=AttrRaisesExpr | (","
		//	names+=ID)*)? ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)? comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* "readonly" "attribute" type=ParamTypeSpec names+=ID ("raises" raises=AttrRaisesExpr | (","
		//names+=ID)*)? ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)? comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//"readonly"
		public Keyword getReadonlyKeyword_1() { return cReadonlyKeyword_1; }

		//"attribute"
		public Keyword getAttributeKeyword_2() { return cAttributeKeyword_2; }

		//type=ParamTypeSpec
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ParamTypeSpec
		public RuleCall getTypeParamTypeSpecParserRuleCall_3_0() { return cTypeParamTypeSpecParserRuleCall_3_0; }

		//names+=ID
		public Assignment getNamesAssignment_4() { return cNamesAssignment_4; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_4_0() { return cNamesIDTerminalRuleCall_4_0; }

		//("raises" raises=AttrRaisesExpr | ("," names+=ID)*)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"raises" raises=AttrRaisesExpr
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"raises"
		public Keyword getRaisesKeyword_5_0_0() { return cRaisesKeyword_5_0_0; }

		//raises=AttrRaisesExpr
		public Assignment getRaisesAssignment_5_0_1() { return cRaisesAssignment_5_0_1; }

		//AttrRaisesExpr
		public RuleCall getRaisesAttrRaisesExprParserRuleCall_5_0_1_0() { return cRaisesAttrRaisesExprParserRuleCall_5_0_1_0; }

		//("," names+=ID)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_5_1_1() { return cNamesAssignment_5_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_5_1_1_0() { return cNamesIDTerminalRuleCall_5_1_1_0; }

		//("raises" raises=AttrRaisesExpr | ("," names+=ID)*)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"raises" raises=AttrRaisesExpr
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"raises"
		public Keyword getRaisesKeyword_6_0_0() { return cRaisesKeyword_6_0_0; }

		//raises=AttrRaisesExpr
		public Assignment getRaisesAssignment_6_0_1() { return cRaisesAssignment_6_0_1; }

		//AttrRaisesExpr
		public RuleCall getRaisesAttrRaisesExprParserRuleCall_6_0_1_0() { return cRaisesAttrRaisesExprParserRuleCall_6_0_1_0; }

		//("," names+=ID)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_6_1_1() { return cNamesAssignment_6_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_6_1_1_0() { return cNamesIDTerminalRuleCall_6_1_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_7() { return cCommentsAssignment_7; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_7_0() { return cCommentsIDLCommentParserRuleCall_7_0; }
	}

	public class AttrRaisesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AttrRaisesExpr");
		private final Assignment cExceptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExceptionsExceptionListParserRuleCall_0 = (RuleCall)cExceptionsAssignment.eContents().get(0);
		
		//AttrRaisesExpr:
		//	exceptions=ExceptionList;
		@Override public ParserRule getRule() { return rule; }

		//exceptions=ExceptionList
		public Assignment getExceptionsAssignment() { return cExceptionsAssignment; }

		//ExceptionList
		public RuleCall getExceptionsExceptionListParserRuleCall_0() { return cExceptionsExceptionListParserRuleCall_0; }
	}

	public class ExceptionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ExceptionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptionScopedNameParserRuleCall_1_0 = (RuleCall)cExceptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExceptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExceptionScopedNameParserRuleCall_2_1_0 = (RuleCall)cExceptionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExceptionList:
		//	"(" exception+=ScopedName ("," exception+=ScopedName)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" exception+=ScopedName ("," exception+=ScopedName)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//exception+=ScopedName
		public Assignment getExceptionAssignment_1() { return cExceptionAssignment_1; }

		//ScopedName
		public RuleCall getExceptionScopedNameParserRuleCall_1_0() { return cExceptionScopedNameParserRuleCall_1_0; }

		//("," exception+=ScopedName)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//exception+=ScopedName
		public Assignment getExceptionAssignment_2_1() { return cExceptionAssignment_2_1; }

		//ScopedName
		public RuleCall getExceptionScopedNameParserRuleCall_2_1_0() { return cExceptionScopedNameParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OpDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.OpDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cIsOnewayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsOnewayOnewayKeyword_1_0 = (Keyword)cIsOnewayAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOpTypeDeclParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParameterDeclsParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRaisesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRaisesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRaisesExceptionListParserRuleCall_5_1_0 = (RuleCall)cRaisesAssignment_5_1.eContents().get(0);
		private final Assignment cContextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContextContextExprParserRuleCall_6_0 = (RuleCall)cContextAssignment_6.eContents().get(0);
		
		//OpDecl:
		//	comments+=IDLComment*
		//	isOneway?="oneway"?
		//	type=OpTypeDecl
		//	name=ID
		//	params=ParameterDecls ("raises" raises=ExceptionList)?
		//	context=ContextExpr?;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* isOneway?="oneway"? type=OpTypeDecl name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
		//context=ContextExpr?
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//isOneway?="oneway"?
		public Assignment getIsOnewayAssignment_1() { return cIsOnewayAssignment_1; }

		//"oneway"
		public Keyword getIsOnewayOnewayKeyword_1_0() { return cIsOnewayOnewayKeyword_1_0; }

		//type=OpTypeDecl
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OpTypeDecl
		public RuleCall getTypeOpTypeDeclParserRuleCall_2_0() { return cTypeOpTypeDeclParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//params=ParameterDecls
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//ParameterDecls
		public RuleCall getParamsParameterDeclsParserRuleCall_4_0() { return cParamsParameterDeclsParserRuleCall_4_0; }

		//("raises" raises=ExceptionList)?
		public Group getGroup_5() { return cGroup_5; }

		//"raises"
		public Keyword getRaisesKeyword_5_0() { return cRaisesKeyword_5_0; }

		//raises=ExceptionList
		public Assignment getRaisesAssignment_5_1() { return cRaisesAssignment_5_1; }

		//ExceptionList
		public RuleCall getRaisesExceptionListParserRuleCall_5_1_0() { return cRaisesExceptionListParserRuleCall_5_1_0; }

		//context=ContextExpr?
		public Assignment getContextAssignment_6() { return cContextAssignment_6; }

		//ContextExpr
		public RuleCall getContextContextExprParserRuleCall_6_0() { return cContextContextExprParserRuleCall_6_0; }
	}

	public class OpTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.OpTypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamTypeSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpTypeDecl:
		//	ParamTypeSpec | "void";
		@Override public ParserRule getRule() { return rule; }

		//ParamTypeSpec | "void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParamTypeSpec
		public RuleCall getParamTypeSpecParserRuleCall_0() { return cParamTypeSpecParserRuleCall_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class ParameterDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ParameterDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentsIDLCommentParserRuleCall_2_0 = (RuleCall)cCommentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclsParamDclParserRuleCall_3_0_0 = (RuleCall)cDeclsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCommentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_1_1_0 = (RuleCall)cCommentsAssignment_3_1_1.eContents().get(0);
		private final Assignment cDeclsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDeclsParamDclParserRuleCall_3_1_2_0 = (RuleCall)cDeclsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterDecls:
		//	{ParameterDecls}
		//	"(" comments+=IDLComment* (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{ParameterDecls} "(" comments+=IDLComment* (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ParameterDecls}
		public Action getParameterDeclsAction_0() { return cParameterDeclsAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_2() { return cCommentsAssignment_2; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_2_0() { return cCommentsIDLCommentParserRuleCall_2_0; }

		//(decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)?
		public Group getGroup_3() { return cGroup_3; }

		//decls+=ParamDcl
		public Assignment getDeclsAssignment_3_0() { return cDeclsAssignment_3_0; }

		//ParamDcl
		public RuleCall getDeclsParamDclParserRuleCall_3_0_0() { return cDeclsParamDclParserRuleCall_3_0_0; }

		//("," comments+=IDLComment* decls+=ParamDcl)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3_1_1() { return cCommentsAssignment_3_1_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_1_1_0() { return cCommentsIDLCommentParserRuleCall_3_1_1_0; }

		//decls+=ParamDcl
		public Assignment getDeclsAssignment_3_1_2() { return cDeclsAssignment_3_1_2; }

		//ParamDcl
		public RuleCall getDeclsParamDclParserRuleCall_3_1_2_0() { return cDeclsParamDclParserRuleCall_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParamDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ParamDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParamDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeParamTypeSpecParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParamDcl:
		//	direction=ParamDirection type=ParamTypeSpec name=ID;
		@Override public ParserRule getRule() { return rule; }

		//direction=ParamDirection type=ParamTypeSpec name=ID
		public Group getGroup() { return cGroup; }

		//direction=ParamDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//ParamDirection
		public RuleCall getDirectionParamDirectionEnumRuleCall_0_0() { return cDirectionParamDirectionEnumRuleCall_0_0; }

		//type=ParamTypeSpec
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ParamTypeSpec
		public RuleCall getTypeParamTypeSpecParserRuleCall_1_0() { return cTypeParamTypeSpecParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ContextExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ContextExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContextExpr:
		//	"context" "(" literal+=STRING ("," literal+=STRING)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"context" "(" literal+=STRING ("," literal+=STRING)* ")"
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//literal+=STRING
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_2_0() { return cLiteralSTRINGTerminalRuleCall_2_0; }

		//("," literal+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//literal+=STRING
		public Assignment getLiteralAssignment_3_1() { return cLiteralAssignment_3_1; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_3_1_0() { return cLiteralSTRINGTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParamTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ParamTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseTypeSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWideStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScopedNameParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ParamTypeSpec:
		//	BaseTypeSpec
		//	| StringType
		//	| WideStringType
		//	| ScopedName;
		@Override public ParserRule getRule() { return rule; }

		//BaseTypeSpec | StringType | WideStringType | ScopedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseTypeSpec
		public RuleCall getBaseTypeSpecParserRuleCall_0() { return cBaseTypeSpecParserRuleCall_0; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }

		//WideStringType
		public RuleCall getWideStringTypeParserRuleCall_2() { return cWideStringTypeParserRuleCall_2; }

		//ScopedName
		public RuleCall getScopedNameParserRuleCall_3() { return cScopedNameParserRuleCall_3; }
	}

	public class ScopedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ScopedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//ScopedName:
		//	"::"? name+=ID ("::" name+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//"::"? name+=ID ("::" name+=ID)*
		public Group getGroup() { return cGroup; }

		//"::"?
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }

		//name+=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("::" name+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"::"
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }

		//name+=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}

	public class BaseTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.BaseTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatingPtTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWideCharTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOctetTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAnyTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cObjectTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cValueBaseTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//BaseTypeSpec:
		//	FloatingPtType
		//	| IntegerType
		//	| CharType
		//	| WideCharType
		//	| BooleanType
		//	| OctetType
		//	| AnyType
		//	| ObjectType
		//	| ValueBaseType;
		@Override public ParserRule getRule() { return rule; }

		//FloatingPtType | IntegerType | CharType | WideCharType | BooleanType | OctetType | AnyType | ObjectType | ValueBaseType
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatingPtType
		public RuleCall getFloatingPtTypeParserRuleCall_0() { return cFloatingPtTypeParserRuleCall_0; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_1() { return cIntegerTypeParserRuleCall_1; }

		//CharType
		public RuleCall getCharTypeParserRuleCall_2() { return cCharTypeParserRuleCall_2; }

		//WideCharType
		public RuleCall getWideCharTypeParserRuleCall_3() { return cWideCharTypeParserRuleCall_3; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_4() { return cBooleanTypeParserRuleCall_4; }

		//OctetType
		public RuleCall getOctetTypeParserRuleCall_5() { return cOctetTypeParserRuleCall_5; }

		//AnyType
		public RuleCall getAnyTypeParserRuleCall_6() { return cAnyTypeParserRuleCall_6; }

		//ObjectType
		public RuleCall getObjectTypeParserRuleCall_7() { return cObjectTypeParserRuleCall_7; }

		//ValueBaseType
		public RuleCall getValueBaseTypeParserRuleCall_8() { return cValueBaseTypeParserRuleCall_8; }
	}

	public class FloatingPtTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FloatingPtType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLongDoubleTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FloatingPtType:
		//	FloatType
		//	| DoubleType
		//	| LongDoubleType;
		@Override public ParserRule getRule() { return rule; }

		//FloatType | DoubleType | LongDoubleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_0() { return cFloatTypeParserRuleCall_0; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_1() { return cDoubleTypeParserRuleCall_1; }

		//LongDoubleType
		public RuleCall getLongDoubleTypeParserRuleCall_2() { return cLongDoubleTypeParserRuleCall_2; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType}
		//	"float";
		@Override public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.DoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleType:
		//	{DoubleType}
		//	"double";
		@Override public ParserRule getRule() { return rule; }

		//{DoubleType} "double"
		public Group getGroup() { return cGroup; }

		//{DoubleType}
		public Action getDoubleTypeAction_0() { return cDoubleTypeAction_0; }

		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class LongDoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.LongDoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LongDoubleType:
		//	{LongDoubleType}
		//	"long" "double";
		@Override public ParserRule getRule() { return rule; }

		//{LongDoubleType} "long" "double"
		public Group getGroup() { return cGroup; }

		//{LongDoubleType}
		public Action getLongDoubleTypeAction_0() { return cLongDoubleTypeAction_0; }

		//"long"
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }

		//"double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnsignedIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerType:
		//	UnsignedInt
		//	| SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//UnsignedInt | SignedInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnsignedInt
		public RuleCall getUnsignedIntParserRuleCall_0() { return cUnsignedIntParserRuleCall_0; }

		//SignedInt
		public RuleCall getSignedIntParserRuleCall_1() { return cSignedIntParserRuleCall_1; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SignedInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedShortIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedLongLongIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignedLongIntParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SignedInt:
		//	SignedShortInt
		//	| SignedLongLongInt
		//	| SignedLongInt;
		@Override public ParserRule getRule() { return rule; }

		//SignedShortInt | SignedLongLongInt | SignedLongInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignedShortInt
		public RuleCall getSignedShortIntParserRuleCall_0() { return cSignedShortIntParserRuleCall_0; }

		//SignedLongLongInt
		public RuleCall getSignedLongLongIntParserRuleCall_1() { return cSignedLongLongIntParserRuleCall_1; }

		//SignedLongInt
		public RuleCall getSignedLongIntParserRuleCall_2() { return cSignedLongIntParserRuleCall_2; }
	}

	public class SignedShortIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SignedShortInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignedShortIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SignedShortInt:
		//	{SignedShortInt}
		//	"short";
		@Override public ParserRule getRule() { return rule; }

		//{SignedShortInt} "short"
		public Group getGroup() { return cGroup; }

		//{SignedShortInt}
		public Action getSignedShortIntAction_0() { return cSignedShortIntAction_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
	}

	public class SignedLongIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SignedLongInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignedLongIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SignedLongInt:
		//	{SignedLongInt}
		//	"long";
		@Override public ParserRule getRule() { return rule; }

		//{SignedLongInt} "long"
		public Group getGroup() { return cGroup; }

		//{SignedLongInt}
		public Action getSignedLongIntAction_0() { return cSignedLongIntAction_0; }

		//"long"
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}

	public class SignedLongLongIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SignedLongLongInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignedLongLongIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SignedLongLongInt:
		//	{SignedLongLongInt}
		//	"long" "long";
		@Override public ParserRule getRule() { return rule; }

		//{SignedLongLongInt} "long" "long"
		public Group getGroup() { return cGroup; }

		//{SignedLongLongInt}
		public Action getSignedLongLongIntAction_0() { return cSignedLongLongIntAction_0; }

		//"long"
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }

		//"long"
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnsignedInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnsignedShortIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedLongIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedLongLongIntParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnsignedInt:
		//	UnsignedShortInt
		//	| UnsignedLongInt
		//	| UnsignedLongLongInt;
		@Override public ParserRule getRule() { return rule; }

		//UnsignedShortInt | UnsignedLongInt | UnsignedLongLongInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnsignedShortInt
		public RuleCall getUnsignedShortIntParserRuleCall_0() { return cUnsignedShortIntParserRuleCall_0; }

		//UnsignedLongInt
		public RuleCall getUnsignedLongIntParserRuleCall_1() { return cUnsignedLongIntParserRuleCall_1; }

		//UnsignedLongLongInt
		public RuleCall getUnsignedLongLongIntParserRuleCall_2() { return cUnsignedLongLongIntParserRuleCall_2; }
	}

	public class UnsignedShortIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnsignedShortInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnsignedShortIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnsignedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnsignedShortInt:
		//	{UnsignedShortInt}
		//	"unsigned" "short";
		@Override public ParserRule getRule() { return rule; }

		//{UnsignedShortInt} "unsigned" "short"
		public Group getGroup() { return cGroup; }

		//{UnsignedShortInt}
		public Action getUnsignedShortIntAction_0() { return cUnsignedShortIntAction_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_1() { return cUnsignedKeyword_1; }

		//"short"
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }
	}

	public class UnsignedLongIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnsignedLongInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnsignedLongIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnsignedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnsignedLongInt:
		//	{UnsignedLongInt}
		//	"unsigned" "long";
		@Override public ParserRule getRule() { return rule; }

		//{UnsignedLongInt} "unsigned" "long"
		public Group getGroup() { return cGroup; }

		//{UnsignedLongInt}
		public Action getUnsignedLongIntAction_0() { return cUnsignedLongIntAction_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_1() { return cUnsignedKeyword_1; }

		//"long"
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }
	}

	public class UnsignedLongLongIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnsignedLongLongInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnsignedLongLongIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnsignedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnsignedLongLongInt:
		//	{UnsignedLongLongInt}
		//	"unsigned" "long" "long";
		@Override public ParserRule getRule() { return rule; }

		//{UnsignedLongLongInt} "unsigned" "long" "long"
		public Group getGroup() { return cGroup; }

		//{UnsignedLongLongInt}
		public Action getUnsignedLongLongIntAction_0() { return cUnsignedLongLongIntAction_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_1() { return cUnsignedKeyword_1; }

		//"long"
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }
	}

	public class CharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.CharType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CharType:
		//	{CharType}
		//	"char";
		@Override public ParserRule getRule() { return rule; }

		//{CharType} "char"
		public Group getGroup() { return cGroup; }

		//{CharType}
		public Action getCharTypeAction_0() { return cCharTypeAction_0; }

		//"char"
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }
	}

	public class WideCharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.WideCharType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWideCharTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWcharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WideCharType:
		//	{WideCharType}
		//	"wchar";
		@Override public ParserRule getRule() { return rule; }

		//{WideCharType} "wchar"
		public Group getGroup() { return cGroup; }

		//{WideCharType}
		public Action getWideCharTypeAction_0() { return cWideCharTypeAction_0; }

		//"wchar"
		public Keyword getWcharKeyword_1() { return cWcharKeyword_1; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//	{BooleanType}
		//	"boolean";
		@Override public ParserRule getRule() { return rule; }

		//{BooleanType} "boolean"
		public Group getGroup() { return cGroup; }

		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }

		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class OctetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.OctetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOctetTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOctetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OctetType:
		//	{OctetType}
		//	"octet";
		@Override public ParserRule getRule() { return rule; }

		//{OctetType} "octet"
		public Group getGroup() { return cGroup; }

		//{OctetType}
		public Action getOctetTypeAction_0() { return cOctetTypeAction_0; }

		//"octet"
		public Keyword getOctetKeyword_1() { return cOctetKeyword_1; }
	}

	public class AnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AnyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AnyType:
		//	{AnyType}
		//	"any";
		@Override public ParserRule getRule() { return rule; }

		//{AnyType} "any"
		public Group getGroup() { return cGroup; }

		//{AnyType}
		public Action getAnyTypeAction_0() { return cAnyTypeAction_0; }

		//"any"
		public Keyword getAnyKeyword_1() { return cAnyKeyword_1; }
	}

	public class ObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ObjectType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ObjectType:
		//	{ObjectType}
		//	"Object";
		@Override public ParserRule getRule() { return rule; }

		//{ObjectType} "Object"
		public Group getGroup() { return cGroup; }

		//{ObjectType}
		public Action getObjectTypeAction_0() { return cObjectTypeAction_0; }

		//"Object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }
	}

	public class ValueBaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ValueBaseType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueBaseTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueBaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ValueBaseType:
		//	{ValueBaseType}
		//	"ValueBase";
		@Override public ParserRule getRule() { return rule; }

		//{ValueBaseType} "ValueBase"
		public Group getGroup() { return cGroup; }

		//{ValueBaseType}
		public Action getValueBaseTypeAction_0() { return cValueBaseTypeAction_0; }

		//"ValueBase"
		public Keyword getValueBaseKeyword_1() { return cValueBaseKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizePositiveIntConstParserRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//StringType:
		//	{StringType}
		//	"string" ("<" size=PositiveIntConst ">")?;
		@Override public ParserRule getRule() { return rule; }

		//{StringType} "string" ("<" size=PositiveIntConst ">")?
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//("<" size=PositiveIntConst ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//size=PositiveIntConst
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }

		//PositiveIntConst
		public RuleCall getSizePositiveIntConstParserRuleCall_2_1_0() { return cSizePositiveIntConstParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class WideStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.WideStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWideStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWstringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizePositiveIntConstParserRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//WideStringType:
		//	{WideStringType}
		//	"wstring" ("<" size=PositiveIntConst ">")?;
		@Override public ParserRule getRule() { return rule; }

		//{WideStringType} "wstring" ("<" size=PositiveIntConst ">")?
		public Group getGroup() { return cGroup; }

		//{WideStringType}
		public Action getWideStringTypeAction_0() { return cWideStringTypeAction_0; }

		//"wstring"
		public Keyword getWstringKeyword_1() { return cWstringKeyword_1; }

		//("<" size=PositiveIntConst ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//size=PositiveIntConst
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }

		//PositiveIntConst
		public RuleCall getSizePositiveIntConstParserRuleCall_2_1_0() { return cSizePositiveIntConstParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class ExceptDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ExceptDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentsIDLCommentParserRuleCall_2_0 = (RuleCall)cCommentsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCommentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentsIDLCommentParserRuleCall_4_0 = (RuleCall)cCommentsAssignment_4.eContents().get(0);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExceptDecl:
		//	"exception" name=ID comments+=IDLComment* "{" comments+=IDLComment* members+=Member* "}";
		@Override public ParserRule getRule() { return rule; }

		//"exception" name=ID comments+=IDLComment* "{" comments+=IDLComment* members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"exception"
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_2() { return cCommentsAssignment_2; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_2_0() { return cCommentsIDLCommentParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_4() { return cCommentsAssignment_4; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_4_0() { return cCommentsIDLCommentParserRuleCall_4_0; }

		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeSpecParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//Member:
		//	type=TypeSpec decl=Declarator ";" comment+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//type=TypeSpec decl=Declarator ";" comment+=IDLComment*
		public Group getGroup() { return cGroup; }

		//type=TypeSpec
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeSpec
		public RuleCall getTypeTypeSpecParserRuleCall_0_0() { return cTypeTypeSpecParserRuleCall_0_0; }

		//decl=Declarator
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }

		//Declarator
		public RuleCall getDeclDeclaratorParserRuleCall_1_0() { return cDeclDeclaratorParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//comment+=IDLComment*
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//IDLComment
		public RuleCall getCommentIDLCommentParserRuleCall_3_0() { return cCommentIDLCommentParserRuleCall_3_0; }
	}

	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleDeclaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declarator:
		//	SimpleDeclarator | ArrayDeclarator;
		@Override public ParserRule getRule() { return rule; }

		//SimpleDeclarator | ArrayDeclarator
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleDeclarator
		public RuleCall getSimpleDeclaratorParserRuleCall_0() { return cSimpleDeclaratorParserRuleCall_0; }

		//ArrayDeclarator
		public RuleCall getArrayDeclaratorParserRuleCall_1() { return cArrayDeclaratorParserRuleCall_1; }
	}

	public class SimpleDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SimpleDeclarator");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//SimpleDeclarator:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class ComplexDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ComplexDeclarator");
		private final RuleCall cArrayDeclaratorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexDeclarator:
		//	ArrayDeclarator;
		@Override public ParserRule getRule() { return rule; }

		//ArrayDeclarator
		public RuleCall getArrayDeclaratorParserRuleCall() { return cArrayDeclaratorParserRuleCall; }
	}

	public class ArrayDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ArrayDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeConstExpParserRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ArrayDeclarator:
		//	id=ID ("[" size+=ConstExp "]")+;
		@Override public ParserRule getRule() { return rule; }

		//id=ID ("[" size+=ConstExp "]")+
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//("[" size+=ConstExp "]")+
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//size+=ConstExp
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }

		//ConstExp
		public RuleCall getSizeConstExpParserRuleCall_1_1_0() { return cSizeConstExpParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsAppendableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsAppendableAppendableKeyword_0_0_0 = (Keyword)cIsAppendableAssignment_0_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_1_0 = (Keyword)cIsFinalAssignment_0_1.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentsIDLCommentParserRuleCall_5_0 = (RuleCall)cCommentsAssignment_5.eContents().get(0);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StructType:
		//	(isAppendable?="@appendable" | isFinal?="@final")? "struct" name=ID comments+=IDLComment* "{" comments+=IDLComment*
		//	members+=Member* "}";
		@Override public ParserRule getRule() { return rule; }

		//(isAppendable?="@appendable" | isFinal?="@final")? "struct" name=ID comments+=IDLComment* "{" comments+=IDLComment*
		//members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//(isAppendable?="@appendable" | isFinal?="@final")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isAppendable?="@appendable"
		public Assignment getIsAppendableAssignment_0_0() { return cIsAppendableAssignment_0_0; }

		//"@appendable"
		public Keyword getIsAppendableAppendableKeyword_0_0_0() { return cIsAppendableAppendableKeyword_0_0_0; }

		//isFinal?="@final"
		public Assignment getIsFinalAssignment_0_1() { return cIsFinalAssignment_0_1; }

		//"@final"
		public Keyword getIsFinalFinalKeyword_0_1_0() { return cIsFinalFinalKeyword_0_1_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_5() { return cCommentsAssignment_5; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_5_0() { return cCommentsIDLCommentParserRuleCall_5_0; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypedefKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeDeclaratorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstrForwardDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeDecl:
		//	"typedef" TypeDeclarator
		//	| StructType
		//	| UnionType
		//	| EnumType
		//	| ConstrForwardDecl;
		@Override public ParserRule getRule() { return rule; }

		//"typedef" TypeDeclarator | StructType | UnionType | EnumType | ConstrForwardDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//"typedef" TypeDeclarator
		public Group getGroup_0() { return cGroup_0; }

		//"typedef"
		public Keyword getTypedefKeyword_0_0() { return cTypedefKeyword_0_0; }

		//TypeDeclarator
		public RuleCall getTypeDeclaratorParserRuleCall_0_1() { return cTypeDeclaratorParserRuleCall_0_1; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_1() { return cStructTypeParserRuleCall_1; }

		//UnionType
		public RuleCall getUnionTypeParserRuleCall_2() { return cUnionTypeParserRuleCall_2; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_3() { return cEnumTypeParserRuleCall_3; }

		//ConstrForwardDecl
		public RuleCall getConstrForwardDeclParserRuleCall_4() { return cConstrForwardDeclParserRuleCall_4; }
	}

	public class TypeDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TypeDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeSpecParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cDeclaratorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorsDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorsAssignment_2.eContents().get(0);
		
		//TypeDeclarator:
		//	comments+=IDLComment* type=TypeSpec declarators+=Declarator+;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* type=TypeSpec declarators+=Declarator+
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//type=TypeSpec
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeSpec
		public RuleCall getTypeTypeSpecParserRuleCall_1_0() { return cTypeTypeSpecParserRuleCall_1_0; }

		//declarators+=Declarator+
		public Assignment getDeclaratorsAssignment_2() { return cDeclaratorsAssignment_2; }

		//Declarator
		public RuleCall getDeclaratorsDeclaratorParserRuleCall_2_0() { return cDeclaratorsDeclaratorParserRuleCall_2_0; }
	}

	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstrTypeSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	SimpleTypeSpec | ConstrTypeSpec;
		@Override public ParserRule getRule() { return rule; }

		//SimpleTypeSpec | ConstrTypeSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleTypeSpec
		public RuleCall getSimpleTypeSpecParserRuleCall_0() { return cSimpleTypeSpecParserRuleCall_0; }

		//ConstrTypeSpec
		public RuleCall getConstrTypeSpecParserRuleCall_1() { return cConstrTypeSpecParserRuleCall_1; }
	}

	public class SimpleTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SimpleTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseTypeSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateTypeSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScopedNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleTypeSpec:
		//	BaseTypeSpec | TemplateTypeSpec | ScopedName;
		@Override public ParserRule getRule() { return rule; }

		//BaseTypeSpec | TemplateTypeSpec | ScopedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseTypeSpec
		public RuleCall getBaseTypeSpecParserRuleCall_0() { return cBaseTypeSpecParserRuleCall_0; }

		//TemplateTypeSpec
		public RuleCall getTemplateTypeSpecParserRuleCall_1() { return cTemplateTypeSpecParserRuleCall_1; }

		//ScopedName
		public RuleCall getScopedNameParserRuleCall_2() { return cScopedNameParserRuleCall_2; }
	}

	public class TemplateTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TemplateTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWideStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFixedPtTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TemplateTypeSpec:
		//	SequenceType | StringType | WideStringType | FixedPtType;
		@Override public ParserRule getRule() { return rule; }

		//SequenceType | StringType | WideStringType | FixedPtType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_0() { return cSequenceTypeParserRuleCall_0; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }

		//WideStringType
		public RuleCall getWideStringTypeParserRuleCall_2() { return cWideStringTypeParserRuleCall_2; }

		//FixedPtType
		public RuleCall getFixedPtTypeParserRuleCall_3() { return cFixedPtTypeParserRuleCall_3; }
	}

	public class ConstrTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstrTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnionTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstrTypeSpec:
		//	StructType | UnionType | EnumType;
		@Override public ParserRule getRule() { return rule; }

		//StructType | UnionType | EnumType
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_0() { return cStructTypeParserRuleCall_0; }

		//UnionType
		public RuleCall getUnionTypeParserRuleCall_1() { return cUnionTypeParserRuleCall_1; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_2() { return cEnumTypeParserRuleCall_2; }
	}

	public class UnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cExtensibilityAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cExtensibilityFinalKeyword_0_0_0 = (Keyword)cExtensibilityAssignment_0_0.eContents().get(0);
		private final Keyword cAppendableKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cUnionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		private final Keyword cSwitchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSwitchAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSwitchSwitchTypeSpecParserRuleCall_6_0 = (RuleCall)cSwitchAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodySwitchBodyParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UnionType:
		//	(extensibility="@final" | "@appendable")? "union" name=ID comments+=IDLComment* "switch" "(" switch=SwitchTypeSpec
		//	")" "{" body=SwitchBody "}";
		@Override public ParserRule getRule() { return rule; }

		//(extensibility="@final" | "@appendable")? "union" name=ID comments+=IDLComment* "switch" "(" switch=SwitchTypeSpec ")"
		//"{" body=SwitchBody "}"
		public Group getGroup() { return cGroup; }

		//(extensibility="@final" | "@appendable")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//extensibility="@final"
		public Assignment getExtensibilityAssignment_0_0() { return cExtensibilityAssignment_0_0; }

		//"@final"
		public Keyword getExtensibilityFinalKeyword_0_0_0() { return cExtensibilityFinalKeyword_0_0_0; }

		//"@appendable"
		public Keyword getAppendableKeyword_0_1() { return cAppendableKeyword_0_1; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }

		//"switch"
		public Keyword getSwitchKeyword_4() { return cSwitchKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//switch=SwitchTypeSpec
		public Assignment getSwitchAssignment_6() { return cSwitchAssignment_6; }

		//SwitchTypeSpec
		public RuleCall getSwitchSwitchTypeSpecParserRuleCall_6_0() { return cSwitchSwitchTypeSpecParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//body=SwitchBody
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }

		//SwitchBody
		public RuleCall getBodySwitchBodyParserRuleCall_9_0() { return cBodySwitchBodyParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class SwitchTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SwitchTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScopedNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SwitchTypeSpec:
		//	IntegerType | CharType | BooleanType | EnumType | ScopedName;
		@Override public ParserRule getRule() { return rule; }

		//IntegerType | CharType | BooleanType | EnumType | ScopedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//CharType
		public RuleCall getCharTypeParserRuleCall_1() { return cCharTypeParserRuleCall_1; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_3() { return cEnumTypeParserRuleCall_3; }

		//ScopedName
		public RuleCall getScopedNameParserRuleCall_4() { return cScopedNameParserRuleCall_4; }
	}

	public class SwitchBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SwitchBody");
		private final Assignment cCaseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCaseCaseParserRuleCall_0 = (RuleCall)cCaseAssignment.eContents().get(0);
		
		//SwitchBody:
		//	case+=Case+;
		@Override public ParserRule getRule() { return rule; }

		//case+=Case+
		public Assignment getCaseAssignment() { return cCaseAssignment; }

		//Case
		public RuleCall getCaseCaseParserRuleCall_0() { return cCaseCaseParserRuleCall_0; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelCaseLabelParserRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Assignment cCommentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_1_1_0 = (RuleCall)cCommentsAssignment_1_1.eContents().get(0);
		private final Assignment cCommentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentsIDLCommentParserRuleCall_2_0 = (RuleCall)cCommentsAssignment_2.eContents().get(0);
		private final Assignment cSpecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecElementSpecParserRuleCall_3_0 = (RuleCall)cSpecAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentsIDLCommentParserRuleCall_5_0 = (RuleCall)cCommentsAssignment_5.eContents().get(0);
		
		//Case:
		//	comments+=IDLComment* (label+=CaseLabel comments+=IDLComment*)+ comments+=IDLComment* spec=ElementSpec ";"
		//	comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* (label+=CaseLabel comments+=IDLComment*)+ comments+=IDLComment* spec=ElementSpec ";"
		//comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//(label+=CaseLabel comments+=IDLComment*)+
		public Group getGroup_1() { return cGroup_1; }

		//label+=CaseLabel
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }

		//CaseLabel
		public RuleCall getLabelCaseLabelParserRuleCall_1_0_0() { return cLabelCaseLabelParserRuleCall_1_0_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_1_1() { return cCommentsAssignment_1_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_1_1_0() { return cCommentsIDLCommentParserRuleCall_1_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_2() { return cCommentsAssignment_2; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_2_0() { return cCommentsIDLCommentParserRuleCall_2_0; }

		//spec=ElementSpec
		public Assignment getSpecAssignment_3() { return cSpecAssignment_3; }

		//ElementSpec
		public RuleCall getSpecElementSpecParserRuleCall_3_0() { return cSpecElementSpecParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_5() { return cCommentsAssignment_5; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_5_0() { return cCommentsIDLCommentParserRuleCall_5_0; }
	}

	public class CaseLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.CaseLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIsCaseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIsCaseCaseKeyword_0_0_0 = (Keyword)cIsCaseAssignment_0_0.eContents().get(0);
		private final Assignment cConstExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstExpConstExpParserRuleCall_0_1_0 = (RuleCall)cConstExpAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsDefaultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsDefaultDefaultKeyword_1_0_0 = (Keyword)cIsDefaultAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//CaseLabel:
		//	isCase?="case" constExp=ConstExp ":" | isDefault?="default" ":";
		@Override public ParserRule getRule() { return rule; }

		//isCase?="case" constExp=ConstExp ":" | isDefault?="default" ":"
		public Alternatives getAlternatives() { return cAlternatives; }

		//isCase?="case" constExp=ConstExp ":"
		public Group getGroup_0() { return cGroup_0; }

		//isCase?="case"
		public Assignment getIsCaseAssignment_0_0() { return cIsCaseAssignment_0_0; }

		//"case"
		public Keyword getIsCaseCaseKeyword_0_0_0() { return cIsCaseCaseKeyword_0_0_0; }

		//constExp=ConstExp
		public Assignment getConstExpAssignment_0_1() { return cConstExpAssignment_0_1; }

		//ConstExp
		public RuleCall getConstExpConstExpParserRuleCall_0_1_0() { return cConstExpConstExpParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//isDefault?="default" ":"
		public Group getGroup_1() { return cGroup_1; }

		//isDefault?="default"
		public Assignment getIsDefaultAssignment_1_0() { return cIsDefaultAssignment_1_0; }

		//"default"
		public Keyword getIsDefaultDefaultKeyword_1_0_0() { return cIsDefaultDefaultKeyword_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
	}

	public class ElementSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ElementSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeSpecParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		
		//ElementSpec:
		//	type=TypeSpec declarator=Declarator;
		@Override public ParserRule getRule() { return rule; }

		//type=TypeSpec declarator=Declarator
		public Group getGroup() { return cGroup; }

		//type=TypeSpec
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeSpec
		public RuleCall getTypeTypeSpecParserRuleCall_0_0() { return cTypeTypeSpecParserRuleCall_0_0; }

		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }

		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentsIDLCommentParserRuleCall_2_0 = (RuleCall)cCommentsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCommentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentsIDLCommentParserRuleCall_4_0 = (RuleCall)cCommentsAssignment_4.eContents().get(0);
		private final Assignment cLiteralAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLiteralIDTerminalRuleCall_5_0 = (RuleCall)cLiteralAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCommentsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_6_1_0 = (RuleCall)cCommentsAssignment_6_1.eContents().get(0);
		private final Assignment cLiteralAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cLiteralIDTerminalRuleCall_6_2_0 = (RuleCall)cLiteralAssignment_6_2.eContents().get(0);
		private final Assignment cCommentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommentsIDLCommentParserRuleCall_7_0 = (RuleCall)cCommentsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EnumType:
		//	"enum" name=ID comments+=IDLComment* "{" comments+=IDLComment* literal+=ID ("," comments+=IDLComment* literal+=ID)*
		//	comments+=IDLComment* "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=ID comments+=IDLComment* "{" comments+=IDLComment* literal+=ID ("," comments+=IDLComment* literal+=ID)*
		//comments+=IDLComment* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_2() { return cCommentsAssignment_2; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_2_0() { return cCommentsIDLCommentParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_4() { return cCommentsAssignment_4; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_4_0() { return cCommentsIDLCommentParserRuleCall_4_0; }

		//literal+=ID
		public Assignment getLiteralAssignment_5() { return cLiteralAssignment_5; }

		//ID
		public RuleCall getLiteralIDTerminalRuleCall_5_0() { return cLiteralIDTerminalRuleCall_5_0; }

		//("," comments+=IDLComment* literal+=ID)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_6_1() { return cCommentsAssignment_6_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_6_1_0() { return cCommentsIDLCommentParserRuleCall_6_1_0; }

		//literal+=ID
		public Assignment getLiteralAssignment_6_2() { return cLiteralAssignment_6_2; }

		//ID
		public RuleCall getLiteralIDTerminalRuleCall_6_2_0() { return cLiteralIDTerminalRuleCall_6_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_7() { return cCommentsAssignment_7; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_7_0() { return cCommentsIDLCommentParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSimpleTypeSpecParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizePositiveIntConstParserRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceType:
		//	"sequence" "<" type=SimpleTypeSpec ("," size=PositiveIntConst)? ">";
		@Override public ParserRule getRule() { return rule; }

		//"sequence" "<" type=SimpleTypeSpec ("," size=PositiveIntConst)? ">"
		public Group getGroup() { return cGroup; }

		//"sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//type=SimpleTypeSpec
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//SimpleTypeSpec
		public RuleCall getTypeSimpleTypeSpecParserRuleCall_2_0() { return cTypeSimpleTypeSpecParserRuleCall_2_0; }

		//("," size=PositiveIntConst)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//size=PositiveIntConst
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }

		//PositiveIntConst
		public RuleCall getSizePositiveIntConstParserRuleCall_3_1_0() { return cSizePositiveIntConstParserRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class NativeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.NativeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NativeType:
		//	"native" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"native" name=ID
		public Group getGroup() { return cGroup; }

		//"native"
		public Keyword getNativeKeyword_0() { return cNativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FixedPtTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FixedPtType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerPositiveIntConstParserRuleCall_2_0 = (RuleCall)cLowerAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperPositiveIntConstParserRuleCall_4_0 = (RuleCall)cUpperAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FixedPtType:
		//	"fixed" "<" lower=PositiveIntConst "," upper=PositiveIntConst ">";
		@Override public ParserRule getRule() { return rule; }

		//"fixed" "<" lower=PositiveIntConst "," upper=PositiveIntConst ">"
		public Group getGroup() { return cGroup; }

		//"fixed"
		public Keyword getFixedKeyword_0() { return cFixedKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//lower=PositiveIntConst
		public Assignment getLowerAssignment_2() { return cLowerAssignment_2; }

		//PositiveIntConst
		public RuleCall getLowerPositiveIntConstParserRuleCall_2_0() { return cLowerPositiveIntConstParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//upper=PositiveIntConst
		public Assignment getUpperAssignment_4() { return cUpperAssignment_4; }

		//PositiveIntConst
		public RuleCall getUpperPositiveIntConstParserRuleCall_4_0() { return cUpperPositiveIntConstParserRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class ConstrForwardDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstrForwardDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructForwardDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnionForwardDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstrForwardDecl:
		//	StructForwardDecl | UnionForwardDecl;
		@Override public ParserRule getRule() { return rule; }

		//StructForwardDecl | UnionForwardDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructForwardDecl
		public RuleCall getStructForwardDeclParserRuleCall_0() { return cStructForwardDeclParserRuleCall_0; }

		//UnionForwardDecl
		public RuleCall getUnionForwardDeclParserRuleCall_1() { return cUnionForwardDeclParserRuleCall_1; }
	}

	public class StructForwardDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.StructForwardDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StructForwardDecl:
		//	"struct" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"struct" name=ID
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class UnionForwardDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnionForwardDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UnionForwardDecl:
		//	"union" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"union" name=ID
		public Group getGroup() { return cGroup; }

		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PositiveIntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PositiveIntConst");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpConstExpParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//PositiveIntConst:
		//	exp=ConstExp;
		@Override public ParserRule getRule() { return rule; }

		//exp=ConstExp
		public Assignment getExpAssignment() { return cExpAssignment; }

		//ConstExp
		public RuleCall getExpConstExpParserRuleCall_0() { return cExpConstExpParserRuleCall_0; }
	}

	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeConstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueConstExpParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cCommentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentsIDLCommentParserRuleCall_5_0 = (RuleCall)cCommentsAssignment_5.eContents().get(0);
		
		//ConstDecl:
		//	"const" type=ConstType name=ID "=" value=ConstExp comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"const" type=ConstType name=ID "=" value=ConstExp comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//type=ConstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ConstType
		public RuleCall getTypeConstTypeParserRuleCall_1_0() { return cTypeConstTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=ConstExp
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ConstExp
		public RuleCall getValueConstExpParserRuleCall_4_0() { return cValueConstExpParserRuleCall_4_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_5() { return cCommentsAssignment_5; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_5_0() { return cCommentsIDLCommentParserRuleCall_5_0; }
	}

	public class ConstTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWideCharTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFloatingPtTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWideStringTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFixedPtConstTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cScopedNameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOctetTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//ConstType:
		//	IntegerType | CharType | WideCharType | BooleanType | FloatingPtType | StringType | WideStringType | FixedPtConstType
		//	| ScopedName | OctetType;
		@Override public ParserRule getRule() { return rule; }

		//IntegerType | CharType | WideCharType | BooleanType | FloatingPtType | StringType | WideStringType | FixedPtConstType |
		//ScopedName | OctetType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//CharType
		public RuleCall getCharTypeParserRuleCall_1() { return cCharTypeParserRuleCall_1; }

		//WideCharType
		public RuleCall getWideCharTypeParserRuleCall_2() { return cWideCharTypeParserRuleCall_2; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_3() { return cBooleanTypeParserRuleCall_3; }

		//FloatingPtType
		public RuleCall getFloatingPtTypeParserRuleCall_4() { return cFloatingPtTypeParserRuleCall_4; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_5() { return cStringTypeParserRuleCall_5; }

		//WideStringType
		public RuleCall getWideStringTypeParserRuleCall_6() { return cWideStringTypeParserRuleCall_6; }

		//FixedPtConstType
		public RuleCall getFixedPtConstTypeParserRuleCall_7() { return cFixedPtConstTypeParserRuleCall_7; }

		//ScopedName
		public RuleCall getScopedNameParserRuleCall_8() { return cScopedNameParserRuleCall_8; }

		//OctetType
		public RuleCall getOctetTypeParserRuleCall_9() { return cOctetTypeParserRuleCall_9; }
	}

	public class FixedPtConstTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FixedPtConstType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFixedPtConstTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFixedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FixedPtConstType:
		//	{FixedPtConstType}
		//	"fixed";
		@Override public ParserRule getRule() { return rule; }

		//{FixedPtConstType} "fixed"
		public Group getGroup() { return cGroup; }

		//{FixedPtConstType}
		public Action getFixedPtConstTypeAction_0() { return cFixedPtConstTypeAction_0; }

		//"fixed"
		public Keyword getFixedKeyword_1() { return cFixedKeyword_1; }
	}

	public class ConstExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstExp");
		private final RuleCall cOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstExp:
		//	OrExpr;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall() { return cOrExprParserRuleCall; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsXOrExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsOrExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//OrExpr:
		//	lhs=XOrExpr (op="|" rhs=OrExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=XOrExpr (op="|" rhs=OrExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=XOrExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//XOrExpr
		public RuleCall getLhsXOrExprParserRuleCall_0_0() { return cLhsXOrExprParserRuleCall_0_0; }

		//(op="|" rhs=OrExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="|"
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"|"
		public Keyword getOpVerticalLineKeyword_1_0_0() { return cOpVerticalLineKeyword_1_0_0; }

		//rhs=OrExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//OrExpr
		public RuleCall getRhsOrExprParserRuleCall_1_1_0() { return cRhsOrExprParserRuleCall_1_1_0; }
	}

	public class XOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.XOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsAndExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpCircumflexAccentKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsXOrExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//XOrExpr:
		//	lhs=AndExpr (op="^" rhs=XOrExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=AndExpr (op="^" rhs=XOrExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=AndExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//AndExpr
		public RuleCall getLhsAndExprParserRuleCall_0_0() { return cLhsAndExprParserRuleCall_0_0; }

		//(op="^" rhs=XOrExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="^"
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_0_0() { return cOpCircumflexAccentKeyword_1_0_0; }

		//rhs=XOrExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//XOrExpr
		public RuleCall getRhsXOrExprParserRuleCall_1_1_0() { return cRhsXOrExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsShiftExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAndExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//AndExpr:
		//	lhs=ShiftExpr (op="&" rhs=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=ShiftExpr (op="&" rhs=AndExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=ShiftExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//ShiftExpr
		public RuleCall getLhsShiftExprParserRuleCall_0_0() { return cLhsShiftExprParserRuleCall_0_0; }

		//(op="&" rhs=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="&"
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"&"
		public Keyword getOpAmpersandKeyword_1_0_0() { return cOpAmpersandKeyword_1_0_0; }

		//rhs=AndExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//AndExpr
		public RuleCall getRhsAndExprParserRuleCall_1_1_0() { return cRhsAndExprParserRuleCall_1_1_0; }
	}

	public class ShiftExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ShiftExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsAddExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsShiftExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ShiftExpr:
		//	lhs=AddExpr ((op="<<" | op=">>") rhs=ShiftExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=AddExpr ((op="<<" | op=">>") rhs=ShiftExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=AddExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//AddExpr
		public RuleCall getLhsAddExprParserRuleCall_0_0() { return cLhsAddExprParserRuleCall_0_0; }

		//((op="<<" | op=">>") rhs=ShiftExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="<<" | op=">>"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="<<"
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"<<"
		public Keyword getOpLessThanSignLessThanSignKeyword_1_0_0_0() { return cOpLessThanSignLessThanSignKeyword_1_0_0_0; }

		//op=">>"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//">>"
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0() { return cOpGreaterThanSignGreaterThanSignKeyword_1_0_1_0; }

		//rhs=ShiftExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//ShiftExpr
		public RuleCall getRhsShiftExprParserRuleCall_1_1_0() { return cRhsShiftExprParserRuleCall_1_1_0; }
	}

	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.AddExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsMultExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAddExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//AddExpr:
		//	lhs=MultExpr ((op="+" | op="-") rhs=AddExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=MultExpr ((op="+" | op="-") rhs=AddExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=MultExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//MultExpr
		public RuleCall getLhsMultExprParserRuleCall_0_0() { return cLhsMultExprParserRuleCall_0_0; }

		//((op="+" | op="-") rhs=AddExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="+" | op="-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="+"
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_0() { return cOpPlusSignKeyword_1_0_0_0; }

		//op="-"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1_0() { return cOpHyphenMinusKeyword_1_0_1_0; }

		//rhs=AddExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//AddExpr
		public RuleCall getRhsAddExprParserRuleCall_1_1_0() { return cRhsAddExprParserRuleCall_1_1_0; }
	}

	public class MultExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.MultExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsUnaryExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpSolidusKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cOpPercentSignKeyword_1_0_2_0 = (Keyword)cOpAssignment_1_0_2.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsMultExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//MultExpr:
		//	lhs=UnaryExpr ((op="*" | op="/" | op="%") rhs=MultExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=UnaryExpr ((op="*" | op="/" | op="%") rhs=MultExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=UnaryExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//UnaryExpr
		public RuleCall getLhsUnaryExprParserRuleCall_0_0() { return cLhsUnaryExprParserRuleCall_0_0; }

		//((op="*" | op="/" | op="%") rhs=MultExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op="*" | op="/" | op="%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="*"
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_0() { return cOpAsteriskKeyword_1_0_0_0; }

		//op="/"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0() { return cOpSolidusKeyword_1_0_1_0; }

		//op="%"
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_0_2_0() { return cOpPercentSignKeyword_1_0_2_0; }

		//rhs=MultExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//MultExpr
		public RuleCall getRhsMultExprParserRuleCall_1_1_0() { return cRhsMultExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_0_0 = (Keyword)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cOpTildeKeyword_0_2_0 = (Keyword)cOpAssignment_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprPrimaryExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//UnaryExpr:
		//	(op="-" | op="+" | op="~")? expr=PrimaryExpr;
		@Override public ParserRule getRule() { return rule; }

		//(op="-" | op="+" | op="~")? expr=PrimaryExpr
		public Group getGroup() { return cGroup; }

		//(op="-" | op="+" | op="~")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//op="-"
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_0_0() { return cOpHyphenMinusKeyword_0_0_0; }

		//op="+"
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"+"
		public Keyword getOpPlusSignKeyword_0_1_0() { return cOpPlusSignKeyword_0_1_0; }

		//op="~"
		public Assignment getOpAssignment_0_2() { return cOpAssignment_0_2; }

		//"~"
		public Keyword getOpTildeKeyword_0_2_0() { return cOpTildeKeyword_0_2_0; }

		//expr=PrimaryExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//PrimaryExpr
		public RuleCall getExprPrimaryExprParserRuleCall_1_0() { return cExprPrimaryExprParserRuleCall_1_0; }
	}

	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScopedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cConstExpParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryExpr:
		//	ScopedName
		//	| Literal
		//	| "(" ConstExp ")";
		@Override public ParserRule getRule() { return rule; }

		//ScopedName | Literal | "(" ConstExp ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScopedName
		public RuleCall getScopedNameParserRuleCall_0() { return cScopedNameParserRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }

		//"(" ConstExp ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ConstExp
		public RuleCall getConstExpParserRuleCall_2_1() { return cConstExpParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueHEX_LITERALTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueCHARACTER_LITERALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueFLOATING_PT_LITERALTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueINTEGER_LITERALTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cValueBOOLEAN_LITERALTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//Literal:
		//	value=HEX_LITERAL
		//	| value=STRING
		//	| value=CHARACTER_LITERAL
		//	| value=FLOATING_PT_LITERAL
		//	| value=INTEGER_LITERAL
		//	| value=BOOLEAN_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//value=HEX_LITERAL | value=STRING | value=CHARACTER_LITERAL | value=FLOATING_PT_LITERAL | value=INTEGER_LITERAL |
		//value=BOOLEAN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=HEX_LITERAL
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//HEX_LITERAL
		public RuleCall getValueHEX_LITERALTerminalRuleCall_0_0() { return cValueHEX_LITERALTerminalRuleCall_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//value=CHARACTER_LITERAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//CHARACTER_LITERAL
		public RuleCall getValueCHARACTER_LITERALTerminalRuleCall_2_0() { return cValueCHARACTER_LITERALTerminalRuleCall_2_0; }

		//value=FLOATING_PT_LITERAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//FLOATING_PT_LITERAL
		public RuleCall getValueFLOATING_PT_LITERALTerminalRuleCall_3_0() { return cValueFLOATING_PT_LITERALTerminalRuleCall_3_0; }

		//value=INTEGER_LITERAL
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//INTEGER_LITERAL
		public RuleCall getValueINTEGER_LITERALTerminalRuleCall_4_0() { return cValueINTEGER_LITERALTerminalRuleCall_4_0; }

		//value=BOOLEAN_LITERAL
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//BOOLEAN_LITERAL
		public RuleCall getValueBOOLEAN_LITERALTerminalRuleCall_5_0() { return cValueBOOLEAN_LITERALTerminalRuleCall_5_0; }
	}

	public class ComponentDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ComponentDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBaseScopedNameParserRuleCall_3_1_0 = (RuleCall)cBaseAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSupportsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSupportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_1_0 = (RuleCall)cSupportsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSupportsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_2_1_0 = (RuleCall)cSupportsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExportAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExportComponentExportParserRuleCall_6_0 = (RuleCall)cExportAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///*
		// * IDL3 Definitions
		// */ ComponentDecl:
		//	comments+=IDLComment* "component" name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
		//	supports+=ScopedName)*)?
		//	"{" export+=ComponentExport* "}";
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* "component" name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
		//supports+=ScopedName)*)? "{" export+=ComponentExport* "}"
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//"component"
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" base=ScopedName)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//base=ScopedName
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }

		//ScopedName
		public RuleCall getBaseScopedNameParserRuleCall_3_1_0() { return cBaseScopedNameParserRuleCall_3_1_0; }

		//("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"supports"
		public Keyword getSupportsKeyword_4_0() { return cSupportsKeyword_4_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_1() { return cSupportsAssignment_4_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_1_0() { return cSupportsScopedNameParserRuleCall_4_1_0; }

		//("," supports+=ScopedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_2_1() { return cSupportsAssignment_4_2_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_2_1_0() { return cSupportsScopedNameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//export+=ComponentExport*
		public Assignment getExportAssignment_6() { return cExportAssignment_6; }

		//ComponentExport
		public RuleCall getExportComponentExportParserRuleCall_6_0() { return cExportComponentExportParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ComponentExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ComponentExport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cProvidesDclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUsesDclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cEmitDclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cPublishesDclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cConsumesDclParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cAttrDeclParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cPortDeclParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cPreprocParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIDLCommentParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ComponentExport:
		//	ProvidesDcl ";" | UsesDcl ";" | EmitDcl ";" | PublishesDcl ";" | ConsumesDcl ";" | AttrDecl ";" | PortDecl ";" |
		//	Preproc | IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//ProvidesDcl ";" | UsesDcl ";" | EmitDcl ";" | PublishesDcl ";" | ConsumesDcl ";" | AttrDecl ";" | PortDecl ";" | Preproc
		//| IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidesDcl ";"
		public Group getGroup_0() { return cGroup_0; }

		//ProvidesDcl
		public RuleCall getProvidesDclParserRuleCall_0_0() { return cProvidesDclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//UsesDcl ";"
		public Group getGroup_1() { return cGroup_1; }

		//UsesDcl
		public RuleCall getUsesDclParserRuleCall_1_0() { return cUsesDclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//EmitDcl ";"
		public Group getGroup_2() { return cGroup_2; }

		//EmitDcl
		public RuleCall getEmitDclParserRuleCall_2_0() { return cEmitDclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//PublishesDcl ";"
		public Group getGroup_3() { return cGroup_3; }

		//PublishesDcl
		public RuleCall getPublishesDclParserRuleCall_3_0() { return cPublishesDclParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//ConsumesDcl ";"
		public Group getGroup_4() { return cGroup_4; }

		//ConsumesDcl
		public RuleCall getConsumesDclParserRuleCall_4_0() { return cConsumesDclParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//AttrDecl ";"
		public Group getGroup_5() { return cGroup_5; }

		//AttrDecl
		public RuleCall getAttrDeclParserRuleCall_5_0() { return cAttrDeclParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//PortDecl ";"
		public Group getGroup_6() { return cGroup_6; }

		//PortDecl
		public RuleCall getPortDeclParserRuleCall_6_0() { return cPortDeclParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//Preproc
		public RuleCall getPreprocParserRuleCall_7() { return cPreprocParserRuleCall_7; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_8() { return cIDLCommentParserRuleCall_8; }
	}

	public class ProvidesDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ProvidesDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		
		//ProvidesDcl:
		//	"provides" type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"provides" type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"provides"
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }
	}

	public class UsesDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UsesDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMultipleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMultipleMultipleKeyword_1_0 = (Keyword)cIsMultipleAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeScopedNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cCommentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentsIDLCommentParserRuleCall_4_0 = (RuleCall)cCommentsAssignment_4.eContents().get(0);
		
		//UsesDcl:
		//	"uses" isMultiple?="multiple"? type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"uses" isMultiple?="multiple"? type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//isMultiple?="multiple"?
		public Assignment getIsMultipleAssignment_1() { return cIsMultipleAssignment_1; }

		//"multiple"
		public Keyword getIsMultipleMultipleKeyword_1_0() { return cIsMultipleMultipleKeyword_1_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_2_0() { return cTypeScopedNameParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_4() { return cCommentsAssignment_4; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_4_0() { return cCommentsIDLCommentParserRuleCall_4_0; }
	}

	public class PublishesDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PublishesDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublishesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		
		//PublishesDcl:
		//	"publishes" type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"publishes" type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"publishes"
		public Keyword getPublishesKeyword_0() { return cPublishesKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }
	}

	public class EmitDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EmitDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		
		//EmitDcl:
		//	"emits" type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"emits" type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"emits"
		public Keyword getEmitsKeyword_0() { return cEmitsKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }
	}

	public class ConsumesDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConsumesDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsumesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		
		//ConsumesDcl:
		//	"consumes" type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"consumes" type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"consumes"
		public Keyword getConsumesKeyword_0() { return cConsumesKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }
	}

	public class ComponentForwardDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ComponentForwardDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ComponentForwardDecl:
		//	"component" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"component" name=ID
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class HomeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.HomeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHomeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_1_0 = (RuleCall)cCommentsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBaseScopedNameParserRuleCall_3_1_0 = (RuleCall)cBaseAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSupportsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSupportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_1_0 = (RuleCall)cSupportsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSupportsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_2_1_0 = (RuleCall)cSupportsAssignment_4_2_1.eContents().get(0);
		private final Keyword cManagesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cManagesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cManagesScopedNameParserRuleCall_6_0 = (RuleCall)cManagesAssignment_6.eContents().get(0);
		private final Assignment cPrimary_keyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrimary_keyPrimaryKeySpecParserRuleCall_7_0 = (RuleCall)cPrimary_keyAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cExportAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cExportHomeExportParserRuleCall_9_0 = (RuleCall)cExportAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//HomeDecl:
		//	"home" comments+=IDLComment* name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
		//	supports+=ScopedName)*)? "manages" manages=ScopedName primary_key=PrimaryKeySpec? "{" export+=HomeExport* "}";
		@Override public ParserRule getRule() { return rule; }

		//"home" comments+=IDLComment* name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
		//supports+=ScopedName)*)? "manages" manages=ScopedName primary_key=PrimaryKeySpec? "{" export+=HomeExport* "}"
		public Group getGroup() { return cGroup; }

		//"home"
		public Keyword getHomeKeyword_0() { return cHomeKeyword_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_1() { return cCommentsAssignment_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_1_0() { return cCommentsIDLCommentParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" base=ScopedName)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//base=ScopedName
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }

		//ScopedName
		public RuleCall getBaseScopedNameParserRuleCall_3_1_0() { return cBaseScopedNameParserRuleCall_3_1_0; }

		//("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"supports"
		public Keyword getSupportsKeyword_4_0() { return cSupportsKeyword_4_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_1() { return cSupportsAssignment_4_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_1_0() { return cSupportsScopedNameParserRuleCall_4_1_0; }

		//("," supports+=ScopedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_2_1() { return cSupportsAssignment_4_2_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_2_1_0() { return cSupportsScopedNameParserRuleCall_4_2_1_0; }

		//"manages"
		public Keyword getManagesKeyword_5() { return cManagesKeyword_5; }

		//manages=ScopedName
		public Assignment getManagesAssignment_6() { return cManagesAssignment_6; }

		//ScopedName
		public RuleCall getManagesScopedNameParserRuleCall_6_0() { return cManagesScopedNameParserRuleCall_6_0; }

		//primary_key=PrimaryKeySpec?
		public Assignment getPrimary_keyAssignment_7() { return cPrimary_keyAssignment_7; }

		//PrimaryKeySpec
		public RuleCall getPrimary_keyPrimaryKeySpecParserRuleCall_7_0() { return cPrimary_keyPrimaryKeySpecParserRuleCall_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//export+=HomeExport*
		public Assignment getExportAssignment_9() { return cExportAssignment_9; }

		//HomeExport
		public RuleCall getExportHomeExportParserRuleCall_9_0() { return cExportHomeExportParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class PrimaryKeySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PrimaryKeySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimarykeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyScopedNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//PrimaryKeySpec:
		//	"primarykey" key=ScopedName;
		@Override public ParserRule getRule() { return rule; }

		//"primarykey" key=ScopedName
		public Group getGroup() { return cGroup; }

		//"primarykey"
		public Keyword getPrimarykeyKeyword_0() { return cPrimarykeyKeyword_0; }

		//key=ScopedName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//ScopedName
		public RuleCall getKeyScopedNameParserRuleCall_1_0() { return cKeyScopedNameParserRuleCall_1_0; }
	}

	public class HomeExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.HomeExport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFactoryDclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cFinderDclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//HomeExport:
		//	Export | FactoryDcl ";" | FinderDcl ";";
		@Override public ParserRule getRule() { return rule; }

		//Export | FactoryDcl ";" | FinderDcl ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Export
		public RuleCall getExportParserRuleCall_0() { return cExportParserRuleCall_0; }

		//FactoryDcl ";"
		public Group getGroup_1() { return cGroup_1; }

		//FactoryDcl
		public RuleCall getFactoryDclParserRuleCall_1_0() { return cFactoryDclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//FinderDcl ";"
		public Group getGroup_2() { return cGroup_2; }

		//FinderDcl
		public RuleCall getFinderDclParserRuleCall_2_0() { return cFinderDclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class FactoryDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FactoryDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cFactoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterDeclsParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRaisesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRaisesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRaisesExceptionListParserRuleCall_4_1_0 = (RuleCall)cRaisesAssignment_4_1.eContents().get(0);
		
		//FactoryDcl:
		//	comments+=IDLComment* "factory" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* "factory" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//"factory"
		public Keyword getFactoryKeyword_1() { return cFactoryKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//params=ParameterDecls
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//ParameterDecls
		public RuleCall getParamsParameterDeclsParserRuleCall_3_0() { return cParamsParameterDeclsParserRuleCall_3_0; }

		//("raises" raises=ExceptionList)?
		public Group getGroup_4() { return cGroup_4; }

		//"raises"
		public Keyword getRaisesKeyword_4_0() { return cRaisesKeyword_4_0; }

		//raises=ExceptionList
		public Assignment getRaisesAssignment_4_1() { return cRaisesAssignment_4_1; }

		//ExceptionList
		public RuleCall getRaisesExceptionListParserRuleCall_4_1_0() { return cRaisesExceptionListParserRuleCall_4_1_0; }
	}

	public class FinderDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FinderDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsIDLCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cFinderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterDeclsParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRaisesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRaisesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRaisesExceptionListParserRuleCall_4_1_0 = (RuleCall)cRaisesAssignment_4_1.eContents().get(0);
		
		//FinderDcl:
		//	comments+=IDLComment* "finder" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
		@Override public ParserRule getRule() { return rule; }

		//comments+=IDLComment* "finder" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?
		public Group getGroup() { return cGroup; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_0_0() { return cCommentsIDLCommentParserRuleCall_0_0; }

		//"finder"
		public Keyword getFinderKeyword_1() { return cFinderKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//params=ParameterDecls
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//ParameterDecls
		public RuleCall getParamsParameterDeclsParserRuleCall_3_0() { return cParamsParameterDeclsParserRuleCall_3_0; }

		//("raises" raises=ExceptionList)?
		public Group getGroup_4() { return cGroup_4; }

		//"raises"
		public Keyword getRaisesKeyword_4_0() { return cRaisesKeyword_4_0; }

		//raises=ExceptionList
		public Assignment getRaisesAssignment_4_1() { return cRaisesAssignment_4_1; }

		//ExceptionList
		public RuleCall getRaisesExceptionListParserRuleCall_4_1_0() { return cRaisesExceptionListParserRuleCall_4_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventForwardDclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//	EventDcl
		//	| EventForwardDcl;
		@Override public ParserRule getRule() { return rule; }

		//EventDcl | EventForwardDcl
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDcl
		public RuleCall getEventDclParserRuleCall_0() { return cEventDclParserRuleCall_0; }

		//EventForwardDcl
		public RuleCall getEventForwardDclParserRuleCall_1() { return cEventForwardDclParserRuleCall_1; }
	}

	public class EventDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EventDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsCustomAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsCustomCustomKeyword_0_0_0 = (Keyword)cIsCustomAssignment_0_0.eContents().get(0);
		private final Assignment cIsAbstractAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsAbstractAbstractKeyword_0_1_0 = (Keyword)cIsAbstractAssignment_0_1.eContents().get(0);
		private final Keyword cEventtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsTruncatableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cIsTruncatableTruncatableKeyword_3_1_0 = (Keyword)cIsTruncatableAssignment_3_1.eContents().get(0);
		private final Assignment cBaseAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBaseScopedNameParserRuleCall_3_2_0 = (RuleCall)cBaseAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cBaseScopedNameParserRuleCall_3_3_1_0 = (RuleCall)cBaseAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSupportsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSupportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_1_0 = (RuleCall)cSupportsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSupportsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSupportsScopedNameParserRuleCall_4_2_1_0 = (RuleCall)cSupportsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cExportAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cExportExportParserRuleCall_6_0_0 = (RuleCall)cExportAssignment_6_0.eContents().get(0);
		private final Assignment cMemberAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cMemberStateMemberParserRuleCall_6_1_0 = (RuleCall)cMemberAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EventDcl:
		//	(isCustom?="custom" | isAbstract?="abstract")? "eventtype" name=ID (":" isTruncatable?="truncatable"?
		//	base+=ScopedName ("," base+=ScopedName)*)? ("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{"
		//	(export+=Export | member+=StateMember)* "}";
		@Override public ParserRule getRule() { return rule; }

		//(isCustom?="custom" | isAbstract?="abstract")? "eventtype" name=ID (":" isTruncatable?="truncatable"? base+=ScopedName
		//("," base+=ScopedName)*)? ("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{" (export+=Export |
		//member+=StateMember)* "}"
		public Group getGroup() { return cGroup; }

		//(isCustom?="custom" | isAbstract?="abstract")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isCustom?="custom"
		public Assignment getIsCustomAssignment_0_0() { return cIsCustomAssignment_0_0; }

		//"custom"
		public Keyword getIsCustomCustomKeyword_0_0_0() { return cIsCustomCustomKeyword_0_0_0; }

		//isAbstract?="abstract"
		public Assignment getIsAbstractAssignment_0_1() { return cIsAbstractAssignment_0_1; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_0_1_0() { return cIsAbstractAbstractKeyword_0_1_0; }

		//"eventtype"
		public Keyword getEventtypeKeyword_1() { return cEventtypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" isTruncatable?="truncatable"? base+=ScopedName ("," base+=ScopedName)*)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//isTruncatable?="truncatable"?
		public Assignment getIsTruncatableAssignment_3_1() { return cIsTruncatableAssignment_3_1; }

		//"truncatable"
		public Keyword getIsTruncatableTruncatableKeyword_3_1_0() { return cIsTruncatableTruncatableKeyword_3_1_0; }

		//base+=ScopedName
		public Assignment getBaseAssignment_3_2() { return cBaseAssignment_3_2; }

		//ScopedName
		public RuleCall getBaseScopedNameParserRuleCall_3_2_0() { return cBaseScopedNameParserRuleCall_3_2_0; }

		//("," base+=ScopedName)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//base+=ScopedName
		public Assignment getBaseAssignment_3_3_1() { return cBaseAssignment_3_3_1; }

		//ScopedName
		public RuleCall getBaseScopedNameParserRuleCall_3_3_1_0() { return cBaseScopedNameParserRuleCall_3_3_1_0; }

		//("supports" supports+=ScopedName ("," supports+=ScopedName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"supports"
		public Keyword getSupportsKeyword_4_0() { return cSupportsKeyword_4_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_1() { return cSupportsAssignment_4_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_1_0() { return cSupportsScopedNameParserRuleCall_4_1_0; }

		//("," supports+=ScopedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//supports+=ScopedName
		public Assignment getSupportsAssignment_4_2_1() { return cSupportsAssignment_4_2_1; }

		//ScopedName
		public RuleCall getSupportsScopedNameParserRuleCall_4_2_1_0() { return cSupportsScopedNameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(export+=Export | member+=StateMember)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//export+=Export
		public Assignment getExportAssignment_6_0() { return cExportAssignment_6_0; }

		//Export
		public RuleCall getExportExportParserRuleCall_6_0_0() { return cExportExportParserRuleCall_6_0_0; }

		//member+=StateMember
		public Assignment getMemberAssignment_6_1() { return cMemberAssignment_6_1; }

		//StateMember
		public RuleCall getMemberStateMemberParserRuleCall_6_1_0() { return cMemberStateMemberParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class StateMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.StateMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsPublicAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsPublicPublicKeyword_0_0_0 = (Keyword)cIsPublicAssignment_0_0.eContents().get(0);
		private final Keyword cPrivateKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeParamTypeSpecParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamesIDTerminalRuleCall_2_0 = (RuleCall)cNamesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StateMember:
		//	(isPublic?="public" | "private") type=ParamTypeSpec names+=ID ";";
		@Override public ParserRule getRule() { return rule; }

		//(isPublic?="public" | "private") type=ParamTypeSpec names+=ID ";"
		public Group getGroup() { return cGroup; }

		//isPublic?="public" | "private"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isPublic?="public"
		public Assignment getIsPublicAssignment_0_0() { return cIsPublicAssignment_0_0; }

		//"public"
		public Keyword getIsPublicPublicKeyword_0_0_0() { return cIsPublicPublicKeyword_0_0_0; }

		//"private"
		public Keyword getPrivateKeyword_0_1() { return cPrivateKeyword_0_1; }

		//type=ParamTypeSpec
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ParamTypeSpec
		public RuleCall getTypeParamTypeSpecParserRuleCall_1_0() { return cTypeParamTypeSpecParserRuleCall_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_2_0() { return cNamesIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EventForwardDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EventForwardDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cEventtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////EventAbsDcl :
		////	"abstract" "eventtype" name=ID (":" (isTruncatable?="truncatable")? base+=ScopedName ("," base+=ScopedName)*)?
		////	("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{" (export+=Export)* "}";
		//EventForwardDcl:
		//	isAbstract?="abstract"? "eventtype" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?="abstract"? "eventtype" name=ID
		public Group getGroup() { return cGroup; }

		//isAbstract?="abstract"?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//"eventtype"
		public Keyword getEventtypeKeyword_1() { return cEventtypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class PortTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PortTypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPorttypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentsIDLCommentParserRuleCall_1_0 = (RuleCall)cCommentsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExportsPortExportParserRuleCall_4_0 = (RuleCall)cExportsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * DDS4CCM Definitions
		// */ PortTypeDecl:
		//	"porttype" comments+=IDLComment* name=ID "{" exports+=PortExport+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"porttype" comments+=IDLComment* name=ID "{" exports+=PortExport+ "}"
		public Group getGroup() { return cGroup; }

		//"porttype"
		public Keyword getPorttypeKeyword_0() { return cPorttypeKeyword_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_1() { return cCommentsAssignment_1; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_1_0() { return cCommentsIDLCommentParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//exports+=PortExport+
		public Assignment getExportsAssignment_4() { return cExportsAssignment_4; }

		//PortExport
		public RuleCall getExportsPortExportParserRuleCall_4_0() { return cExportsPortExportParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PortExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PortExport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cProvidesDclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUsesDclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAttrDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cIDLCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PortExport:
		//	ProvidesDcl ";" | UsesDcl ";" | AttrDecl ";" | IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//ProvidesDcl ";" | UsesDcl ";" | AttrDecl ";" | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidesDcl ";"
		public Group getGroup_0() { return cGroup_0; }

		//ProvidesDcl
		public RuleCall getProvidesDclParserRuleCall_0_0() { return cProvidesDclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//UsesDcl ";"
		public Group getGroup_1() { return cGroup_1; }

		//UsesDcl
		public RuleCall getUsesDclParserRuleCall_1_0() { return cUsesDclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//AttrDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//AttrDecl
		public RuleCall getAttrDeclParserRuleCall_2_0() { return cAttrDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_3() { return cIDLCommentParserRuleCall_3; }
	}

	public class PortDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.PortDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cIsMirrorAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsMirrorMirrorportKeyword_0_1_0 = (Keyword)cIsMirrorAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentsIDLCommentParserRuleCall_3_0 = (RuleCall)cCommentsAssignment_3.eContents().get(0);
		
		//PortDecl:
		//	("port" | isMirror?="mirrorport") type=ScopedName name=ID comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//("port" | isMirror?="mirrorport") type=ScopedName name=ID comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"port" | isMirror?="mirrorport"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"port"
		public Keyword getPortKeyword_0_0() { return cPortKeyword_0_0; }

		//isMirror?="mirrorport"
		public Assignment getIsMirrorAssignment_0_1() { return cIsMirrorAssignment_0_1; }

		//"mirrorport"
		public Keyword getIsMirrorMirrorportKeyword_0_1_0() { return cIsMirrorMirrorportKeyword_0_1_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_3() { return cCommentsAssignment_3; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_3_0() { return cCommentsIDLCommentParserRuleCall_3_0; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderConnectorHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExportsConnectorExportParserRuleCall_2_0 = (RuleCall)cExportsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Connector:
		//	header=ConnectorHeader "{" exports+=ConnectorExport* "}";
		@Override public ParserRule getRule() { return rule; }

		//header=ConnectorHeader "{" exports+=ConnectorExport* "}"
		public Group getGroup() { return cGroup; }

		//header=ConnectorHeader
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }

		//ConnectorHeader
		public RuleCall getHeaderConnectorHeaderParserRuleCall_0_0() { return cHeaderConnectorHeaderParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//exports+=ConnectorExport*
		public Assignment getExportsAssignment_2() { return cExportsAssignment_2; }

		//ConnectorExport
		public RuleCall getExportsConnectorExportParserRuleCall_2_0() { return cExportsConnectorExportParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConnectorHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConnectorHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseScopedNameParserRuleCall_2_1_0 = (RuleCall)cBaseAssignment_2_1.eContents().get(0);
		
		//ConnectorHeader:
		//	"connector" name=ID (":" base=ScopedName)?;
		@Override public ParserRule getRule() { return rule; }

		//"connector" name=ID (":" base=ScopedName)?
		public Group getGroup() { return cGroup; }

		//"connector"
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" base=ScopedName)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//base=ScopedName
		public Assignment getBaseAssignment_2_1() { return cBaseAssignment_2_1; }

		//ScopedName
		public RuleCall getBaseScopedNameParserRuleCall_2_1_0() { return cBaseScopedNameParserRuleCall_2_1_0; }
	}

	public class ConnectorExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConnectorExport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cProvidesDclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUsesDclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPortDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cAttrDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cIDLCommentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ConnectorExport:
		//	ProvidesDcl ";" | UsesDcl ";" | PortDecl ";" | AttrDecl ";" | IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//ProvidesDcl ";" | UsesDcl ";" | PortDecl ";" | AttrDecl ";" | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidesDcl ";"
		public Group getGroup_0() { return cGroup_0; }

		//ProvidesDcl
		public RuleCall getProvidesDclParserRuleCall_0_0() { return cProvidesDclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//UsesDcl ";"
		public Group getGroup_1() { return cGroup_1; }

		//UsesDcl
		public RuleCall getUsesDclParserRuleCall_1_0() { return cUsesDclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//PortDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//PortDecl
		public RuleCall getPortDeclParserRuleCall_2_0() { return cPortDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//AttrDecl ";"
		public Group getGroup_3() { return cGroup_3; }

		//AttrDecl
		public RuleCall getAttrDeclParserRuleCall_3_0() { return cAttrDeclParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_4() { return cIDLCommentParserRuleCall_4; }
	}

	public class TemplateModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TemplateModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersFormalParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefinitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefinitionsTemplateDefinitionParserRuleCall_7_0 = (RuleCall)cDefinitionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TemplateModule:
		//	"module" name=ID "<" parameters+=FormalParameter ("," parameters+=FormalParameter)* ">" "{"
		//	definitions+=TemplateDefinition* "}";
		@Override public ParserRule getRule() { return rule; }

		//"module" name=ID "<" parameters+=FormalParameter ("," parameters+=FormalParameter)* ">" "{"
		//definitions+=TemplateDefinition* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_3_0() { return cParametersFormalParameterParserRuleCall_3_0; }

		//("," parameters+=FormalParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_4_1_0() { return cParametersFormalParameterParserRuleCall_4_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//definitions+=TemplateDefinition*
		public Assignment getDefinitionsAssignment_7() { return cDefinitionsAssignment_7; }

		//TemplateDefinition
		public RuleCall getDefinitionsTemplateDefinitionParserRuleCall_7_0() { return cDefinitionsTemplateDefinitionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFormalParameterTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FormalParameter:
		//	type=FormalParameterType name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=FormalParameterType name=ID
		public Group getGroup() { return cGroup; }

		//type=FormalParameterType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//FormalParameterType
		public RuleCall getTypeFormalParameterTypeParserRuleCall_0_0() { return cTypeFormalParameterTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FormalParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FormalParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypenameParamTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParamTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValuetypeParamTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEventParamTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStructParamTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnionParamTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExceptionParamTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEnumParamTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSequenceParamTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cConstParamTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSequenceTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//FormalParameterType:
		//	TypenameParamType
		//	| InterfaceParamType
		//	| ValuetypeParamType
		//	| EventParamType
		//	| StructParamType
		//	| UnionParamType
		//	| ExceptionParamType
		//	| EnumParamType
		//	| SequenceParamType
		//	| ConstParamType
		//	| SequenceType;
		@Override public ParserRule getRule() { return rule; }

		//TypenameParamType | InterfaceParamType | ValuetypeParamType | EventParamType | StructParamType | UnionParamType |
		//ExceptionParamType | EnumParamType | SequenceParamType | ConstParamType | SequenceType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypenameParamType
		public RuleCall getTypenameParamTypeParserRuleCall_0() { return cTypenameParamTypeParserRuleCall_0; }

		//InterfaceParamType
		public RuleCall getInterfaceParamTypeParserRuleCall_1() { return cInterfaceParamTypeParserRuleCall_1; }

		//ValuetypeParamType
		public RuleCall getValuetypeParamTypeParserRuleCall_2() { return cValuetypeParamTypeParserRuleCall_2; }

		//EventParamType
		public RuleCall getEventParamTypeParserRuleCall_3() { return cEventParamTypeParserRuleCall_3; }

		//StructParamType
		public RuleCall getStructParamTypeParserRuleCall_4() { return cStructParamTypeParserRuleCall_4; }

		//UnionParamType
		public RuleCall getUnionParamTypeParserRuleCall_5() { return cUnionParamTypeParserRuleCall_5; }

		//ExceptionParamType
		public RuleCall getExceptionParamTypeParserRuleCall_6() { return cExceptionParamTypeParserRuleCall_6; }

		//EnumParamType
		public RuleCall getEnumParamTypeParserRuleCall_7() { return cEnumParamTypeParserRuleCall_7; }

		//SequenceParamType
		public RuleCall getSequenceParamTypeParserRuleCall_8() { return cSequenceParamTypeParserRuleCall_8; }

		//ConstParamType
		public RuleCall getConstParamTypeParserRuleCall_9() { return cConstParamTypeParserRuleCall_9; }

		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_10() { return cSequenceTypeParserRuleCall_10; }
	}

	public class TypenameParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TypenameParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypenameParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypenameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypenameParamType:
		//	{TypenameParamType}
		//	"typename";
		@Override public ParserRule getRule() { return rule; }

		//{TypenameParamType} "typename"
		public Group getGroup() { return cGroup; }

		//{TypenameParamType}
		public Action getTypenameParamTypeAction_0() { return cTypenameParamTypeAction_0; }

		//"typename"
		public Keyword getTypenameKeyword_1() { return cTypenameKeyword_1; }
	}

	public class InterfaceParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.InterfaceParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfaceParamType:
		//	{InterfaceParamType}
		//	"interface";
		@Override public ParserRule getRule() { return rule; }

		//{InterfaceParamType} "interface"
		public Group getGroup() { return cGroup; }

		//{InterfaceParamType}
		public Action getInterfaceParamTypeAction_0() { return cInterfaceParamTypeAction_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
	}

	public class ValuetypeParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ValuetypeParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuetypeParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValuetypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ValuetypeParamType:
		//	{ValuetypeParamType}
		//	"valuetype";
		@Override public ParserRule getRule() { return rule; }

		//{ValuetypeParamType} "valuetype"
		public Group getGroup() { return cGroup; }

		//{ValuetypeParamType}
		public Action getValuetypeParamTypeAction_0() { return cValuetypeParamTypeAction_0; }

		//"valuetype"
		public Keyword getValuetypeKeyword_1() { return cValuetypeKeyword_1; }
	}

	public class EventParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EventParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EventParamType:
		//	{EventParamType}
		//	"eventtype";
		@Override public ParserRule getRule() { return rule; }

		//{EventParamType} "eventtype"
		public Group getGroup() { return cGroup; }

		//{EventParamType}
		public Action getEventParamTypeAction_0() { return cEventParamTypeAction_0; }

		//"eventtype"
		public Keyword getEventtypeKeyword_1() { return cEventtypeKeyword_1; }
	}

	public class StructParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.StructParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StructParamType:
		//	{StructParamType}
		//	"struct";
		@Override public ParserRule getRule() { return rule; }

		//{StructParamType} "struct"
		public Group getGroup() { return cGroup; }

		//{StructParamType}
		public Action getStructParamTypeAction_0() { return cStructParamTypeAction_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
	}

	public class UnionParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UnionParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnionParamType:
		//	{UnionParamType}
		//	"union";
		@Override public ParserRule getRule() { return rule; }

		//{UnionParamType} "union"
		public Group getGroup() { return cGroup; }

		//{UnionParamType}
		public Action getUnionParamTypeAction_0() { return cUnionParamTypeAction_0; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
	}

	public class ExceptionParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ExceptionParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExceptionParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExceptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExceptionParamType:
		//	{ExceptionParamType}
		//	"exception";
		@Override public ParserRule getRule() { return rule; }

		//{ExceptionParamType} "exception"
		public Group getGroup() { return cGroup; }

		//{ExceptionParamType}
		public Action getExceptionParamTypeAction_0() { return cExceptionParamTypeAction_0; }

		//"exception"
		public Keyword getExceptionKeyword_1() { return cExceptionKeyword_1; }
	}

	public class EnumParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.EnumParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EnumParamType:
		//	{EnumParamType}
		//	"enum";
		@Override public ParserRule getRule() { return rule; }

		//{EnumParamType} "enum"
		public Group getGroup() { return cGroup; }

		//{EnumParamType}
		public Action getEnumParamTypeAction_0() { return cEnumParamTypeAction_0; }

		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
	}

	public class SequenceParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SequenceParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceParamTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SequenceParamType:
		//	{SequenceParamType}
		//	"sequence";
		@Override public ParserRule getRule() { return rule; }

		//{SequenceParamType} "sequence"
		public Group getGroup() { return cGroup; }

		//{SequenceParamType}
		public Action getSequenceParamTypeAction_0() { return cSequenceParamTypeAction_0; }

		//"sequence"
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
	}

	public class ConstParamTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ConstParamType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConstTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ConstParamType:
		//	"const" ConstType;
		@Override public ParserRule getRule() { return rule; }

		//"const" ConstType
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//ConstType
		public RuleCall getConstTypeParserRuleCall_1() { return cConstTypeParserRuleCall_1; }
	}

	public class TemplateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TemplateDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cExceptDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cInterface_declParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cFixedModuleParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cStructTypeParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cNativeTypeParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cEventParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cComponentDeclParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cHomeDeclParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cPortTypeDeclParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cConnectorParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cTemplateModuleRefParserRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final RuleCall cIDLCommentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//TemplateDefinition:
		//	TypeDecl ";"
		//	| ConstDecl ";"
		//	| ExceptDecl ";"
		//	| Interface_decl ";"
		//	| FixedModule ";"
		//	| StructType ";"
		//	| NativeType ";"
		//	| Event ";"
		//	| ComponentDecl ";"
		//	| HomeDecl ";"
		//	| PortTypeDecl ";"
		//	| Connector ";"
		//	| TemplateModuleRef ";"
		//	| IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Interface_decl ";" | FixedModule ";" | StructType ";" | NativeType ";" |
		//Event ";" | ComponentDecl ";" | HomeDecl ";" | PortTypeDecl ";" | Connector ";" | TemplateModuleRef ";" | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDecl ";"
		public Group getGroup_0() { return cGroup_0; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_0_0() { return cTypeDeclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//ConstDecl ";"
		public Group getGroup_1() { return cGroup_1; }

		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_1_0() { return cConstDeclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//ExceptDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//ExceptDecl
		public RuleCall getExceptDeclParserRuleCall_2_0() { return cExceptDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//Interface_decl ";"
		public Group getGroup_3() { return cGroup_3; }

		//Interface_decl
		public RuleCall getInterface_declParserRuleCall_3_0() { return cInterface_declParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//FixedModule ";"
		public Group getGroup_4() { return cGroup_4; }

		//FixedModule
		public RuleCall getFixedModuleParserRuleCall_4_0() { return cFixedModuleParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//StructType ";"
		public Group getGroup_5() { return cGroup_5; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_5_0() { return cStructTypeParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//NativeType ";"
		public Group getGroup_6() { return cGroup_6; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_6_0() { return cNativeTypeParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//Event ";"
		public Group getGroup_7() { return cGroup_7; }

		//Event
		public RuleCall getEventParserRuleCall_7_0() { return cEventParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//ComponentDecl ";"
		public Group getGroup_8() { return cGroup_8; }

		//ComponentDecl
		public RuleCall getComponentDeclParserRuleCall_8_0() { return cComponentDeclParserRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }

		//HomeDecl ";"
		public Group getGroup_9() { return cGroup_9; }

		//HomeDecl
		public RuleCall getHomeDeclParserRuleCall_9_0() { return cHomeDeclParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }

		//PortTypeDecl ";"
		public Group getGroup_10() { return cGroup_10; }

		//PortTypeDecl
		public RuleCall getPortTypeDeclParserRuleCall_10_0() { return cPortTypeDeclParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }

		//Connector ";"
		public Group getGroup_11() { return cGroup_11; }

		//Connector
		public RuleCall getConnectorParserRuleCall_11_0() { return cConnectorParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }

		//TemplateModuleRef ";"
		public Group getGroup_12() { return cGroup_12; }

		//TemplateModuleRef
		public RuleCall getTemplateModuleRefParserRuleCall_12_0() { return cTemplateModuleRefParserRuleCall_12_0; }

		//";"
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_13() { return cIDLCommentParserRuleCall_13; }
	}

	public class FixedModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FixedModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionsFixedDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FixedModule:
		//	"module" name=ID "{" definitions+=FixedDefinition* "}";
		@Override public ParserRule getRule() { return rule; }

		//"module" name=ID "{" definitions+=FixedDefinition* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//definitions+=FixedDefinition*
		public Assignment getDefinitionsAssignment_3() { return cDefinitionsAssignment_3; }

		//FixedDefinition
		public RuleCall getDefinitionsFixedDefinitionParserRuleCall_3_0() { return cDefinitionsFixedDefinitionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FixedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FixedDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cExceptDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cInterface_declParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cFixedModuleParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cStructTypeParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cNativeTypeParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cEventParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cComponentDeclParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cHomeDeclParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cPortTypeDeclParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cConnectorParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final RuleCall cIDLCommentParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//FixedDefinition:
		//	TypeDecl ";"
		//	| ConstDecl ";"
		//	| ExceptDecl ";"
		//	| Interface_decl ";"
		//	| FixedModule ";"
		//	| StructType ";"
		//	| NativeType ";"
		//	| Event ";"
		//	| ComponentDecl ";"
		//	| HomeDecl ";"
		//	| PortTypeDecl ";"
		//	| Connector ";"
		//	| IDLComment;
		@Override public ParserRule getRule() { return rule; }

		//TypeDecl ";" | ConstDecl ";" | ExceptDecl ";" | Interface_decl ";" | FixedModule ";" | StructType ";" | NativeType ";" |
		//Event ";" | ComponentDecl ";" | HomeDecl ";" | PortTypeDecl ";" | Connector ";" | IDLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDecl ";"
		public Group getGroup_0() { return cGroup_0; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_0_0() { return cTypeDeclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//ConstDecl ";"
		public Group getGroup_1() { return cGroup_1; }

		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_1_0() { return cConstDeclParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//ExceptDecl ";"
		public Group getGroup_2() { return cGroup_2; }

		//ExceptDecl
		public RuleCall getExceptDeclParserRuleCall_2_0() { return cExceptDeclParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//Interface_decl ";"
		public Group getGroup_3() { return cGroup_3; }

		//Interface_decl
		public RuleCall getInterface_declParserRuleCall_3_0() { return cInterface_declParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//FixedModule ";"
		public Group getGroup_4() { return cGroup_4; }

		//FixedModule
		public RuleCall getFixedModuleParserRuleCall_4_0() { return cFixedModuleParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//StructType ";"
		public Group getGroup_5() { return cGroup_5; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_5_0() { return cStructTypeParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//NativeType ";"
		public Group getGroup_6() { return cGroup_6; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_6_0() { return cNativeTypeParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//Event ";"
		public Group getGroup_7() { return cGroup_7; }

		//Event
		public RuleCall getEventParserRuleCall_7_0() { return cEventParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//ComponentDecl ";"
		public Group getGroup_8() { return cGroup_8; }

		//ComponentDecl
		public RuleCall getComponentDeclParserRuleCall_8_0() { return cComponentDeclParserRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }

		//HomeDecl ";"
		public Group getGroup_9() { return cGroup_9; }

		//HomeDecl
		public RuleCall getHomeDeclParserRuleCall_9_0() { return cHomeDeclParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }

		//PortTypeDecl ";"
		public Group getGroup_10() { return cGroup_10; }

		//PortTypeDecl
		public RuleCall getPortTypeDeclParserRuleCall_10_0() { return cPortTypeDeclParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }

		//Connector ";"
		public Group getGroup_11() { return cGroup_11; }

		//Connector
		public RuleCall getConnectorParserRuleCall_11_0() { return cConnectorParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }

		//IDLComment
		public RuleCall getIDLCommentParserRuleCall_12() { return cIDLCommentParserRuleCall_12; }
	}

	public class TemplateModuleInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TemplateModuleInst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterActualParameterParserRuleCall_3_0 = (RuleCall)cParameterAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterActualParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cCommentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommentsIDLCommentParserRuleCall_7_0 = (RuleCall)cCommentsAssignment_7.eContents().get(0);
		
		//TemplateModuleInst:
		//	"module" type=ScopedName "<" parameter+=ActualParameter ("," parameter+=ActualParameter)* ">" name=ID
		//	comments+=IDLComment*;
		@Override public ParserRule getRule() { return rule; }

		//"module" type=ScopedName "<" parameter+=ActualParameter ("," parameter+=ActualParameter)* ">" name=ID
		//comments+=IDLComment*
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//parameter+=ActualParameter
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }

		//ActualParameter
		public RuleCall getParameterActualParameterParserRuleCall_3_0() { return cParameterActualParameterParserRuleCall_3_0; }

		//("," parameter+=ActualParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameter+=ActualParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }

		//ActualParameter
		public RuleCall getParameterActualParameterParserRuleCall_4_1_0() { return cParameterActualParameterParserRuleCall_4_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//comments+=IDLComment*
		public Assignment getCommentsAssignment_7() { return cCommentsAssignment_7; }

		//IDLComment
		public RuleCall getCommentsIDLCommentParserRuleCall_7_0() { return cCommentsIDLCommentParserRuleCall_7_0; }
	}

	public class ActualParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ActualParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActualParameter:
		//	ConstExp | TypeSpec;
		@Override public ParserRule getRule() { return rule; }

		//ConstExp | TypeSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstExp
		public RuleCall getConstExpParserRuleCall_0() { return cConstExpParserRuleCall_0; }

		//TypeSpec
		public RuleCall getTypeSpecParserRuleCall_1() { return cTypeSpecParserRuleCall_1; }
	}

	public class TemplateModuleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.TemplateModuleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_4_1_0 = (RuleCall)cIdAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//TemplateModuleRef:
		//	"alias" type=ScopedName "<" id+=ID ("," id+=ID)* ">" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"alias" type=ScopedName "<" id+=ID ("," id+=ID)* ">" name=ID
		public Group getGroup() { return cGroup; }

		//"alias"
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }

		//type=ScopedName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ScopedName
		public RuleCall getTypeScopedNameParserRuleCall_1_0() { return cTypeScopedNameParserRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//id+=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//("," id+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//id+=ID
		public Assignment getIdAssignment_4_1() { return cIdAssignment_4_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_1_0() { return cIdIDTerminalRuleCall_4_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
	}

	public class IDLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.IDLComment");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodySL_COMMENTTerminalRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//IDLComment:
		//	body=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//body=SL_COMMENT
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//SL_COMMENT
		public RuleCall getBodySL_COMMENTTerminalRuleCall_0() { return cBodySL_COMMENTTerminalRuleCall_0; }
	}
	
	
	public class ParamDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ParamDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInOutInoutKeyword_2_0 = (Keyword)cInOutEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReturnReturnKeyword_3_0 = (Keyword)cReturnEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ParamDirection:
		//	In="in" | Out="out" | InOut="inout" | Return="return";
		public EnumRule getRule() { return rule; }

		//In="in" | Out="out" | InOut="inout" | Return="return"
		public Alternatives getAlternatives() { return cAlternatives; }

		//In="in"
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//Out="out"
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }

		//InOut="inout"
		public EnumLiteralDeclaration getInOutEnumLiteralDeclaration_2() { return cInOutEnumLiteralDeclaration_2; }

		//"inout"
		public Keyword getInOutInoutKeyword_2_0() { return cInOutInoutKeyword_2_0; }

		//Return="return"
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_3() { return cReturnEnumLiteralDeclaration_3; }

		//"return"
		public Keyword getReturnReturnKeyword_3_0() { return cReturnReturnKeyword_3_0; }
	}
	
	private final SpecificationElements pSpecification;
	private final PreprocElements pPreproc;
	private final Preproc_IncludeElements pPreproc_Include;
	private final FileNameElements pFileName;
	private final Preproc_IfdefElements pPreproc_Ifdef;
	private final Preproc_IfndefElements pPreproc_Ifndef;
	private final Preproc_UndefElements pPreproc_Undef;
	private final Preproc_IfElements pPreproc_If;
	private final Preproc_If_CompareElements pPreproc_If_Compare;
	private final Preproc_If_ValElements pPreproc_If_Val;
	private final Preproc_ElseElements pPreproc_Else;
	private final Preproc_ErrorElements pPreproc_Error;
	private final Preproc_DefineElements pPreproc_Define;
	private final Preproc_EndifElements pPreproc_Endif;
	private final Preproc_PragmaElements pPreproc_Pragma;
	private final Preproc_Pragma_PrefixElements pPreproc_Pragma_Prefix;
	private final Preproc_Pragma_Conn_TypeElements pPreproc_Pragma_Conn_Type;
	private final Preproc_Pragma_Ciao_LemElements pPreproc_Pragma_Ciao_Lem;
	private final Preproc_Pragma_Ciao_Ami4ccm_InterfaceElements pPreproc_Pragma_Ciao_Ami4ccm_Interface;
	private final Preproc_Pragma_Ciao_Ami4ccm_ReceptacleElements pPreproc_Pragma_Ciao_Ami4ccm_Receptacle;
	private final Preproc_Pragma_Ciao_Ami4ccm_IdlElements pPreproc_Pragma_Ciao_Ami4ccm_Idl;
	private final Preproc_Pragma_NddsElements pPreproc_Pragma_Ndds;
	private final Preproc_Pragma_ComponentElements pPreproc_Pragma_Component;
	private final Preproc_Pragma_HomeElements pPreproc_Pragma_Home;
	private final Preproc_Pragma_DDS4CCM_ImplElements pPreproc_Pragma_DDS4CCM_Impl;
	private final Preproc_Pragma_MiscElements pPreproc_Pragma_Misc;
	private final File_MarkerElements pFile_Marker;
	private final Excluded_File_MarkerElements pExcluded_File_Marker;
	private final Import_declElements pImport_decl;
	private final DefinitionElements pDefinition;
	private final ModuleElements pModule;
	private final Interface_or_Forward_DeclElements pInterface_or_Forward_Decl;
	private final Interface_declElements pInterface_decl;
	private final Forward_declElements pForward_decl;
	private final Interface_headerElements pInterface_header;
	private final InterfaceBodyElements pInterfaceBody;
	private final ExportElements pExport;
	private final AttrDeclElements pAttrDecl;
	private final AttrSpecElements pAttrSpec;
	private final ReadOnlyAttrSpecElements pReadOnlyAttrSpec;
	private final AttrRaisesExprElements pAttrRaisesExpr;
	private final ExceptionListElements pExceptionList;
	private final OpDeclElements pOpDecl;
	private final OpTypeDeclElements pOpTypeDecl;
	private final ParameterDeclsElements pParameterDecls;
	private final ParamDclElements pParamDcl;
	private final ParamDirectionElements eParamDirection;
	private final ContextExprElements pContextExpr;
	private final ParamTypeSpecElements pParamTypeSpec;
	private final ScopedNameElements pScopedName;
	private final BaseTypeSpecElements pBaseTypeSpec;
	private final FloatingPtTypeElements pFloatingPtType;
	private final FloatTypeElements pFloatType;
	private final DoubleTypeElements pDoubleType;
	private final LongDoubleTypeElements pLongDoubleType;
	private final IntegerTypeElements pIntegerType;
	private final SignedIntElements pSignedInt;
	private final SignedShortIntElements pSignedShortInt;
	private final SignedLongIntElements pSignedLongInt;
	private final SignedLongLongIntElements pSignedLongLongInt;
	private final UnsignedIntElements pUnsignedInt;
	private final UnsignedShortIntElements pUnsignedShortInt;
	private final UnsignedLongIntElements pUnsignedLongInt;
	private final UnsignedLongLongIntElements pUnsignedLongLongInt;
	private final CharTypeElements pCharType;
	private final WideCharTypeElements pWideCharType;
	private final BooleanTypeElements pBooleanType;
	private final OctetTypeElements pOctetType;
	private final AnyTypeElements pAnyType;
	private final ObjectTypeElements pObjectType;
	private final ValueBaseTypeElements pValueBaseType;
	private final StringTypeElements pStringType;
	private final WideStringTypeElements pWideStringType;
	private final ExceptDeclElements pExceptDecl;
	private final MemberElements pMember;
	private final DeclaratorElements pDeclarator;
	private final SimpleDeclaratorElements pSimpleDeclarator;
	private final ComplexDeclaratorElements pComplexDeclarator;
	private final ArrayDeclaratorElements pArrayDeclarator;
	private final StructTypeElements pStructType;
	private final TypeDeclElements pTypeDecl;
	private final TypeDeclaratorElements pTypeDeclarator;
	private final TypeSpecElements pTypeSpec;
	private final SimpleTypeSpecElements pSimpleTypeSpec;
	private final TemplateTypeSpecElements pTemplateTypeSpec;
	private final ConstrTypeSpecElements pConstrTypeSpec;
	private final UnionTypeElements pUnionType;
	private final SwitchTypeSpecElements pSwitchTypeSpec;
	private final SwitchBodyElements pSwitchBody;
	private final CaseElements pCase;
	private final CaseLabelElements pCaseLabel;
	private final ElementSpecElements pElementSpec;
	private final EnumTypeElements pEnumType;
	private final SequenceTypeElements pSequenceType;
	private final NativeTypeElements pNativeType;
	private final FixedPtTypeElements pFixedPtType;
	private final ConstrForwardDeclElements pConstrForwardDecl;
	private final StructForwardDeclElements pStructForwardDecl;
	private final UnionForwardDeclElements pUnionForwardDecl;
	private final PositiveIntConstElements pPositiveIntConst;
	private final ConstDeclElements pConstDecl;
	private final ConstTypeElements pConstType;
	private final FixedPtConstTypeElements pFixedPtConstType;
	private final ConstExpElements pConstExp;
	private final OrExprElements pOrExpr;
	private final XOrExprElements pXOrExpr;
	private final AndExprElements pAndExpr;
	private final ShiftExprElements pShiftExpr;
	private final AddExprElements pAddExpr;
	private final MultExprElements pMultExpr;
	private final UnaryExprElements pUnaryExpr;
	private final PrimaryExprElements pPrimaryExpr;
	private final LiteralElements pLiteral;
	private final ComponentDeclElements pComponentDecl;
	private final ComponentExportElements pComponentExport;
	private final ProvidesDclElements pProvidesDcl;
	private final UsesDclElements pUsesDcl;
	private final PublishesDclElements pPublishesDcl;
	private final EmitDclElements pEmitDcl;
	private final ConsumesDclElements pConsumesDcl;
	private final ComponentForwardDeclElements pComponentForwardDecl;
	private final HomeDeclElements pHomeDecl;
	private final PrimaryKeySpecElements pPrimaryKeySpec;
	private final HomeExportElements pHomeExport;
	private final FactoryDclElements pFactoryDcl;
	private final FinderDclElements pFinderDcl;
	private final EventElements pEvent;
	private final EventDclElements pEventDcl;
	private final StateMemberElements pStateMember;
	private final EventForwardDclElements pEventForwardDcl;
	private final PortTypeDeclElements pPortTypeDecl;
	private final PortExportElements pPortExport;
	private final PortDeclElements pPortDecl;
	private final ConnectorElements pConnector;
	private final ConnectorHeaderElements pConnectorHeader;
	private final ConnectorExportElements pConnectorExport;
	private final TemplateModuleElements pTemplateModule;
	private final FormalParameterElements pFormalParameter;
	private final FormalParameterTypeElements pFormalParameterType;
	private final TypenameParamTypeElements pTypenameParamType;
	private final InterfaceParamTypeElements pInterfaceParamType;
	private final ValuetypeParamTypeElements pValuetypeParamType;
	private final EventParamTypeElements pEventParamType;
	private final StructParamTypeElements pStructParamType;
	private final UnionParamTypeElements pUnionParamType;
	private final ExceptionParamTypeElements pExceptionParamType;
	private final EnumParamTypeElements pEnumParamType;
	private final SequenceParamTypeElements pSequenceParamType;
	private final ConstParamTypeElements pConstParamType;
	private final TemplateDefinitionElements pTemplateDefinition;
	private final FixedModuleElements pFixedModule;
	private final FixedDefinitionElements pFixedDefinition;
	private final TemplateModuleInstElements pTemplateModuleInst;
	private final ActualParameterElements pActualParameter;
	private final TemplateModuleRefElements pTemplateModuleRef;
	private final IDLCommentElements pIDLComment;
	private final TerminalRule tUNUSED_LITERAL;
	private final TerminalRule tINTEGER_LITERAL;
	private final TerminalRule tHEX_LITERAL;
	private final TerminalRule tFLOATING_PT_LITERAL;
	private final TerminalRule tCHARACTER_LITERAL;
	private final TerminalRule tBOOLEAN_LITERAL;
	private final TerminalRule tESCAPE_SEQUENCE;
	private final TerminalRule tHEX_ESCAPE;
	private final TerminalRule tOCTAL_ESCAPE;
	private final TerminalRule tUNICODE_ESCAPE;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public IDLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSpecification = new SpecificationElements();
		this.pPreproc = new PreprocElements();
		this.pPreproc_Include = new Preproc_IncludeElements();
		this.pFileName = new FileNameElements();
		this.pPreproc_Ifdef = new Preproc_IfdefElements();
		this.pPreproc_Ifndef = new Preproc_IfndefElements();
		this.pPreproc_Undef = new Preproc_UndefElements();
		this.pPreproc_If = new Preproc_IfElements();
		this.pPreproc_If_Compare = new Preproc_If_CompareElements();
		this.pPreproc_If_Val = new Preproc_If_ValElements();
		this.pPreproc_Else = new Preproc_ElseElements();
		this.pPreproc_Error = new Preproc_ErrorElements();
		this.pPreproc_Define = new Preproc_DefineElements();
		this.pPreproc_Endif = new Preproc_EndifElements();
		this.pPreproc_Pragma = new Preproc_PragmaElements();
		this.pPreproc_Pragma_Prefix = new Preproc_Pragma_PrefixElements();
		this.pPreproc_Pragma_Conn_Type = new Preproc_Pragma_Conn_TypeElements();
		this.pPreproc_Pragma_Ciao_Lem = new Preproc_Pragma_Ciao_LemElements();
		this.pPreproc_Pragma_Ciao_Ami4ccm_Interface = new Preproc_Pragma_Ciao_Ami4ccm_InterfaceElements();
		this.pPreproc_Pragma_Ciao_Ami4ccm_Receptacle = new Preproc_Pragma_Ciao_Ami4ccm_ReceptacleElements();
		this.pPreproc_Pragma_Ciao_Ami4ccm_Idl = new Preproc_Pragma_Ciao_Ami4ccm_IdlElements();
		this.pPreproc_Pragma_Ndds = new Preproc_Pragma_NddsElements();
		this.pPreproc_Pragma_Component = new Preproc_Pragma_ComponentElements();
		this.pPreproc_Pragma_Home = new Preproc_Pragma_HomeElements();
		this.pPreproc_Pragma_DDS4CCM_Impl = new Preproc_Pragma_DDS4CCM_ImplElements();
		this.pPreproc_Pragma_Misc = new Preproc_Pragma_MiscElements();
		this.pFile_Marker = new File_MarkerElements();
		this.pExcluded_File_Marker = new Excluded_File_MarkerElements();
		this.pImport_decl = new Import_declElements();
		this.pDefinition = new DefinitionElements();
		this.pModule = new ModuleElements();
		this.pInterface_or_Forward_Decl = new Interface_or_Forward_DeclElements();
		this.pInterface_decl = new Interface_declElements();
		this.pForward_decl = new Forward_declElements();
		this.pInterface_header = new Interface_headerElements();
		this.pInterfaceBody = new InterfaceBodyElements();
		this.pExport = new ExportElements();
		this.pAttrDecl = new AttrDeclElements();
		this.pAttrSpec = new AttrSpecElements();
		this.pReadOnlyAttrSpec = new ReadOnlyAttrSpecElements();
		this.pAttrRaisesExpr = new AttrRaisesExprElements();
		this.pExceptionList = new ExceptionListElements();
		this.pOpDecl = new OpDeclElements();
		this.pOpTypeDecl = new OpTypeDeclElements();
		this.pParameterDecls = new ParameterDeclsElements();
		this.pParamDcl = new ParamDclElements();
		this.eParamDirection = new ParamDirectionElements();
		this.pContextExpr = new ContextExprElements();
		this.pParamTypeSpec = new ParamTypeSpecElements();
		this.pScopedName = new ScopedNameElements();
		this.pBaseTypeSpec = new BaseTypeSpecElements();
		this.pFloatingPtType = new FloatingPtTypeElements();
		this.pFloatType = new FloatTypeElements();
		this.pDoubleType = new DoubleTypeElements();
		this.pLongDoubleType = new LongDoubleTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedShortInt = new SignedShortIntElements();
		this.pSignedLongInt = new SignedLongIntElements();
		this.pSignedLongLongInt = new SignedLongLongIntElements();
		this.pUnsignedInt = new UnsignedIntElements();
		this.pUnsignedShortInt = new UnsignedShortIntElements();
		this.pUnsignedLongInt = new UnsignedLongIntElements();
		this.pUnsignedLongLongInt = new UnsignedLongLongIntElements();
		this.pCharType = new CharTypeElements();
		this.pWideCharType = new WideCharTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pOctetType = new OctetTypeElements();
		this.pAnyType = new AnyTypeElements();
		this.pObjectType = new ObjectTypeElements();
		this.pValueBaseType = new ValueBaseTypeElements();
		this.pStringType = new StringTypeElements();
		this.pWideStringType = new WideStringTypeElements();
		this.pExceptDecl = new ExceptDeclElements();
		this.pMember = new MemberElements();
		this.pDeclarator = new DeclaratorElements();
		this.pSimpleDeclarator = new SimpleDeclaratorElements();
		this.pComplexDeclarator = new ComplexDeclaratorElements();
		this.pArrayDeclarator = new ArrayDeclaratorElements();
		this.pStructType = new StructTypeElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeDeclarator = new TypeDeclaratorElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pSimpleTypeSpec = new SimpleTypeSpecElements();
		this.pTemplateTypeSpec = new TemplateTypeSpecElements();
		this.pConstrTypeSpec = new ConstrTypeSpecElements();
		this.pUnionType = new UnionTypeElements();
		this.pSwitchTypeSpec = new SwitchTypeSpecElements();
		this.pSwitchBody = new SwitchBodyElements();
		this.pCase = new CaseElements();
		this.pCaseLabel = new CaseLabelElements();
		this.pElementSpec = new ElementSpecElements();
		this.pEnumType = new EnumTypeElements();
		this.pSequenceType = new SequenceTypeElements();
		this.pNativeType = new NativeTypeElements();
		this.pFixedPtType = new FixedPtTypeElements();
		this.pConstrForwardDecl = new ConstrForwardDeclElements();
		this.pStructForwardDecl = new StructForwardDeclElements();
		this.pUnionForwardDecl = new UnionForwardDeclElements();
		this.pPositiveIntConst = new PositiveIntConstElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstType = new ConstTypeElements();
		this.pFixedPtConstType = new FixedPtConstTypeElements();
		this.pConstExp = new ConstExpElements();
		this.pOrExpr = new OrExprElements();
		this.pXOrExpr = new XOrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pShiftExpr = new ShiftExprElements();
		this.pAddExpr = new AddExprElements();
		this.pMultExpr = new MultExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pLiteral = new LiteralElements();
		this.pComponentDecl = new ComponentDeclElements();
		this.pComponentExport = new ComponentExportElements();
		this.pProvidesDcl = new ProvidesDclElements();
		this.pUsesDcl = new UsesDclElements();
		this.pPublishesDcl = new PublishesDclElements();
		this.pEmitDcl = new EmitDclElements();
		this.pConsumesDcl = new ConsumesDclElements();
		this.pComponentForwardDecl = new ComponentForwardDeclElements();
		this.pHomeDecl = new HomeDeclElements();
		this.pPrimaryKeySpec = new PrimaryKeySpecElements();
		this.pHomeExport = new HomeExportElements();
		this.pFactoryDcl = new FactoryDclElements();
		this.pFinderDcl = new FinderDclElements();
		this.pEvent = new EventElements();
		this.pEventDcl = new EventDclElements();
		this.pStateMember = new StateMemberElements();
		this.pEventForwardDcl = new EventForwardDclElements();
		this.pPortTypeDecl = new PortTypeDeclElements();
		this.pPortExport = new PortExportElements();
		this.pPortDecl = new PortDeclElements();
		this.pConnector = new ConnectorElements();
		this.pConnectorHeader = new ConnectorHeaderElements();
		this.pConnectorExport = new ConnectorExportElements();
		this.pTemplateModule = new TemplateModuleElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pFormalParameterType = new FormalParameterTypeElements();
		this.pTypenameParamType = new TypenameParamTypeElements();
		this.pInterfaceParamType = new InterfaceParamTypeElements();
		this.pValuetypeParamType = new ValuetypeParamTypeElements();
		this.pEventParamType = new EventParamTypeElements();
		this.pStructParamType = new StructParamTypeElements();
		this.pUnionParamType = new UnionParamTypeElements();
		this.pExceptionParamType = new ExceptionParamTypeElements();
		this.pEnumParamType = new EnumParamTypeElements();
		this.pSequenceParamType = new SequenceParamTypeElements();
		this.pConstParamType = new ConstParamTypeElements();
		this.pTemplateDefinition = new TemplateDefinitionElements();
		this.pFixedModule = new FixedModuleElements();
		this.pFixedDefinition = new FixedDefinitionElements();
		this.pTemplateModuleInst = new TemplateModuleInstElements();
		this.pActualParameter = new ActualParameterElements();
		this.pTemplateModuleRef = new TemplateModuleRefElements();
		this.pIDLComment = new IDLCommentElements();
		this.tUNUSED_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UNUSED_LITERAL");
		this.tINTEGER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.INTEGER_LITERAL");
		this.tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.HEX_LITERAL");
		this.tFLOATING_PT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.FLOATING_PT_LITERAL");
		this.tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.CHARACTER_LITERAL");
		this.tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.BOOLEAN_LITERAL");
		this.tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ESCAPE_SEQUENCE");
		this.tHEX_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.HEX_ESCAPE");
		this.tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.OCTAL_ESCAPE");
		this.tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.UNICODE_ESCAPE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.zeligsoft.domain.omg.corba.dsl.IDL.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.zeligsoft.domain.omg.corba.dsl.IDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Specification:
	//	{Specification} imports+=Import_decl*
	//	definitions+=Definition+;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Preproc:
	//	Preproc_Include | Preproc_Ifdef | Preproc_Ifndef | Preproc_Undef | Preproc_If | Preproc_Else | Preproc_Error |
	//	Preproc_Define | Preproc_Endif | Preproc_Pragma | File_Marker | Excluded_File_Marker;
	public PreprocElements getPreprocAccess() {
		return pPreproc;
	}
	
	public ParserRule getPreprocRule() {
		return getPreprocAccess().getRule();
	}

	//Preproc_Include:
	//	"#include" "<" value=FileName ">" | "#include" strValue=STRING;
	public Preproc_IncludeElements getPreproc_IncludeAccess() {
		return pPreproc_Include;
	}
	
	public ParserRule getPreproc_IncludeRule() {
		return getPreproc_IncludeAccess().getRule();
	}

	//FileName:
	//	name+=ID ("." name+=ID)*;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//Preproc_Ifdef:
	//	"#ifdef" value=ID;
	public Preproc_IfdefElements getPreproc_IfdefAccess() {
		return pPreproc_Ifdef;
	}
	
	public ParserRule getPreproc_IfdefRule() {
		return getPreproc_IfdefAccess().getRule();
	}

	//Preproc_Ifndef:
	//	"#ifndef" value=ID;
	public Preproc_IfndefElements getPreproc_IfndefAccess() {
		return pPreproc_Ifndef;
	}
	
	public ParserRule getPreproc_IfndefRule() {
		return getPreproc_IfndefAccess().getRule();
	}

	//Preproc_Undef:
	//	"#undef" value=ID;
	public Preproc_UndefElements getPreproc_UndefAccess() {
		return pPreproc_Undef;
	}
	
	public ParserRule getPreproc_UndefRule() {
		return getPreproc_UndefAccess().getRule();
	}

	//Preproc_If:
	//	("#if" | "#elif") negation?="!"? "defined"? value+=Preproc_If_Compare+;
	public Preproc_IfElements getPreproc_IfAccess() {
		return pPreproc_If;
	}
	
	public ParserRule getPreproc_IfRule() {
		return getPreproc_IfAccess().getRule();
	}

	//Preproc_If_Compare:
	//	lhs=Preproc_If_Val ((op="==" | op="!=" | op=">" | op="<" | op=">=" | op="<=") rhs=Preproc_If_Val)*;
	public Preproc_If_CompareElements getPreproc_If_CompareAccess() {
		return pPreproc_If_Compare;
	}
	
	public ParserRule getPreproc_If_CompareRule() {
		return getPreproc_If_CompareAccess().getRule();
	}

	//Preproc_If_Val:
	//	value=ConstExp;
	public Preproc_If_ValElements getPreproc_If_ValAccess() {
		return pPreproc_If_Val;
	}
	
	public ParserRule getPreproc_If_ValRule() {
		return getPreproc_If_ValAccess().getRule();
	}

	//Preproc_Else:
	//	{Preproc_Else}
	//	"#else";
	public Preproc_ElseElements getPreproc_ElseAccess() {
		return pPreproc_Else;
	}
	
	public ParserRule getPreproc_ElseRule() {
		return getPreproc_ElseAccess().getRule();
	}

	//Preproc_Error:
	//	"#error" value=STRING;
	public Preproc_ErrorElements getPreproc_ErrorAccess() {
		return pPreproc_Error;
	}
	
	public ParserRule getPreproc_ErrorRule() {
		return getPreproc_ErrorAccess().getRule();
	}

	//Preproc_Define:
	//	"#define " value=ID exp=ConstExp?;
	public Preproc_DefineElements getPreproc_DefineAccess() {
		return pPreproc_Define;
	}
	
	public ParserRule getPreproc_DefineRule() {
		return getPreproc_DefineAccess().getRule();
	}

	//Preproc_Endif:
	//	{Preproc_Endif}
	//	"#endif";
	public Preproc_EndifElements getPreproc_EndifAccess() {
		return pPreproc_Endif;
	}
	
	public ParserRule getPreproc_EndifRule() {
		return getPreproc_EndifAccess().getRule();
	}

	//Preproc_Pragma:
	//	Preproc_Pragma_Prefix
	//	| Preproc_Pragma_Conn_Type
	//	| Preproc_Pragma_Ciao_Lem
	//	| Preproc_Pragma_Ciao_Ami4ccm_Interface
	//	| Preproc_Pragma_Ciao_Ami4ccm_Receptacle
	//	| Preproc_Pragma_Ciao_Ami4ccm_Idl
	//	| Preproc_Pragma_Ndds
	//	| Preproc_Pragma_Component
	//	| Preproc_Pragma_Home
	//	| Preproc_Pragma_DDS4CCM_Impl
	//	| Preproc_Pragma_Misc;
	public Preproc_PragmaElements getPreproc_PragmaAccess() {
		return pPreproc_Pragma;
	}
	
	public ParserRule getPreproc_PragmaRule() {
		return getPreproc_PragmaAccess().getRule();
	}

	//Preproc_Pragma_Prefix:
	//	"#pragma" "prefix" value=STRING;
	public Preproc_Pragma_PrefixElements getPreproc_Pragma_PrefixAccess() {
		return pPreproc_Pragma_Prefix;
	}
	
	public ParserRule getPreproc_Pragma_PrefixRule() {
		return getPreproc_Pragma_PrefixAccess().getRule();
	}

	//Preproc_Pragma_Conn_Type:
	//	"#pragma" "conntype" valuePort=ID ("::" ID)* valueConnType=ID;
	public Preproc_Pragma_Conn_TypeElements getPreproc_Pragma_Conn_TypeAccess() {
		return pPreproc_Pragma_Conn_Type;
	}
	
	public ParserRule getPreproc_Pragma_Conn_TypeRule() {
		return getPreproc_Pragma_Conn_TypeAccess().getRule();
	}

	//Preproc_Pragma_Ciao_Lem:
	//	"#pragma" "ciao" "lem" value=STRING;
	public Preproc_Pragma_Ciao_LemElements getPreproc_Pragma_Ciao_LemAccess() {
		return pPreproc_Pragma_Ciao_Lem;
	}
	
	public ParserRule getPreproc_Pragma_Ciao_LemRule() {
		return getPreproc_Pragma_Ciao_LemAccess().getRule();
	}

	//Preproc_Pragma_Ciao_Ami4ccm_Interface:
	//	"#pragma" "ciao" "ami4ccm interface" value=STRING;
	public Preproc_Pragma_Ciao_Ami4ccm_InterfaceElements getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess() {
		return pPreproc_Pragma_Ciao_Ami4ccm_Interface;
	}
	
	public ParserRule getPreproc_Pragma_Ciao_Ami4ccm_InterfaceRule() {
		return getPreproc_Pragma_Ciao_Ami4ccm_InterfaceAccess().getRule();
	}

	//Preproc_Pragma_Ciao_Ami4ccm_Receptacle:
	//	"#pragma" "ciao" "ami4ccm receptacle" value=STRING;
	public Preproc_Pragma_Ciao_Ami4ccm_ReceptacleElements getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess() {
		return pPreproc_Pragma_Ciao_Ami4ccm_Receptacle;
	}
	
	public ParserRule getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleRule() {
		return getPreproc_Pragma_Ciao_Ami4ccm_ReceptacleAccess().getRule();
	}

	//Preproc_Pragma_Ciao_Ami4ccm_Idl:
	//	"#pragma" "ciao" "ami4ccm idl" value=STRING;
	public Preproc_Pragma_Ciao_Ami4ccm_IdlElements getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess() {
		return pPreproc_Pragma_Ciao_Ami4ccm_Idl;
	}
	
	public ParserRule getPreproc_Pragma_Ciao_Ami4ccm_IdlRule() {
		return getPreproc_Pragma_Ciao_Ami4ccm_IdlAccess().getRule();
	}

	//Preproc_Pragma_Ndds:
	//	"#pragma" "ndds" "typesupport" value=STRING;
	public Preproc_Pragma_NddsElements getPreproc_Pragma_NddsAccess() {
		return pPreproc_Pragma_Ndds;
	}
	
	public ParserRule getPreproc_Pragma_NddsRule() {
		return getPreproc_Pragma_NddsAccess().getRule();
	}

	//Preproc_Pragma_Component:
	//	"#pragma" "componentInterface" value=STRING;
	public Preproc_Pragma_ComponentElements getPreproc_Pragma_ComponentAccess() {
		return pPreproc_Pragma_Component;
	}
	
	public ParserRule getPreproc_Pragma_ComponentRule() {
		return getPreproc_Pragma_ComponentAccess().getRule();
	}

	//Preproc_Pragma_Home:
	//	"#pragma" "componentHome" value=STRING;
	public Preproc_Pragma_HomeElements getPreproc_Pragma_HomeAccess() {
		return pPreproc_Pragma_Home;
	}
	
	public ParserRule getPreproc_Pragma_HomeRule() {
		return getPreproc_Pragma_HomeAccess().getRule();
	}

	//Preproc_Pragma_DDS4CCM_Impl:
	//	"#pragma" "dds4ccm" "impl" value=STRING;
	public Preproc_Pragma_DDS4CCM_ImplElements getPreproc_Pragma_DDS4CCM_ImplAccess() {
		return pPreproc_Pragma_DDS4CCM_Impl;
	}
	
	public ParserRule getPreproc_Pragma_DDS4CCM_ImplRule() {
		return getPreproc_Pragma_DDS4CCM_ImplAccess().getRule();
	}

	//Preproc_Pragma_Misc:
	//	{Preproc_Pragma_Misc}
	//	"#pragma" ("typesupport" | STRING | ID)*;
	public Preproc_Pragma_MiscElements getPreproc_Pragma_MiscAccess() {
		return pPreproc_Pragma_Misc;
	}
	
	public ParserRule getPreproc_Pragma_MiscRule() {
		return getPreproc_Pragma_MiscAccess().getRule();
	}

	//File_Marker:
	//	"#file" file=STRING;
	public File_MarkerElements getFile_MarkerAccess() {
		return pFile_Marker;
	}
	
	public ParserRule getFile_MarkerRule() {
		return getFile_MarkerAccess().getRule();
	}

	//Excluded_File_Marker:
	//	"#excluded_file" file=STRING;
	public Excluded_File_MarkerElements getExcluded_File_MarkerAccess() {
		return pExcluded_File_Marker;
	}
	
	public ParserRule getExcluded_File_MarkerRule() {
		return getExcluded_File_MarkerAccess().getRule();
	}

	//Import_decl:
	//	"import" imported_scope=STRING ";";
	public Import_declElements getImport_declAccess() {
		return pImport_decl;
	}
	
	public ParserRule getImport_declRule() {
		return getImport_declAccess().getRule();
	}

	//Definition:
	//	Interface_or_Forward_Decl ";"
	//	| ComponentForwardDecl ";"
	//	| ConstDecl ";"
	//	| Module ";"
	//	| ExceptDecl ";"
	//	| StructType ";"
	//	| TypeDecl ";"
	//	| NativeType ";"
	//	| Preproc
	//	// IDL3
	//	| Event ";"
	//	| ComponentDecl ";"
	//	| HomeDecl ";"
	//	// DDS4CCM
	//	| PortTypeDecl ";"
	//	| Connector ";"
	//	| TemplateModule ";"
	//	| TemplateModuleInst ";"
	//	| IDLComment;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Module:
	//	"module" name=ID comments+=IDLComment* "{" definitions+=Definition* "}";
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Interface_or_Forward_Decl:
	//	Interface_decl
	//	| Forward_decl;
	public Interface_or_Forward_DeclElements getInterface_or_Forward_DeclAccess() {
		return pInterface_or_Forward_Decl;
	}
	
	public ParserRule getInterface_or_Forward_DeclRule() {
		return getInterface_or_Forward_DeclAccess().getRule();
	}

	//Interface_decl:
	//	header=Interface_header "{" interfaceBody=InterfaceBody "}";
	public Interface_declElements getInterface_declAccess() {
		return pInterface_decl;
	}
	
	public ParserRule getInterface_declRule() {
		return getInterface_declAccess().getRule();
	}

	//Forward_decl:
	//	("abstract" | "local")? "interface" name=ID;
	public Forward_declElements getForward_declAccess() {
		return pForward_decl;
	}
	
	public ParserRule getForward_declRule() {
		return getForward_declAccess().getRule();
	}

	//Interface_header:
	//	(isAbstract?="abstract" | isLocal?="local")? "interface" name=ID (":" specializes+=ScopedName (","
	//	comments+=IDLComment* specializes+=ScopedName)*)? comments+=IDLComment*;
	public Interface_headerElements getInterface_headerAccess() {
		return pInterface_header;
	}
	
	public ParserRule getInterface_headerRule() {
		return getInterface_headerAccess().getRule();
	}

	//InterfaceBody:
	//	{InterfaceBody} export+=Export*;
	public InterfaceBodyElements getInterfaceBodyAccess() {
		return pInterfaceBody;
	}
	
	public ParserRule getInterfaceBodyRule() {
		return getInterfaceBodyAccess().getRule();
	}

	//Export:
	//	AttrDecl ";"
	//	| OpDecl ";"
	//	| TypeDecl ";"
	//	| ConstDecl ";"
	//	| ExceptDecl ";"
	//	| Preproc
	//	| IDLComment;
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//AttrDecl:
	//	AttrSpec | ReadOnlyAttrSpec;
	public AttrDeclElements getAttrDeclAccess() {
		return pAttrDecl;
	}
	
	public ParserRule getAttrDeclRule() {
		return getAttrDeclAccess().getRule();
	}

	//AttrSpec:
	//	comments+=IDLComment* "attribute" type=ParamTypeSpec names+=ID (("getraises" getRaises=AttrRaisesExpr | "setraises"
	//	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? (("getraises" getRaises=AttrRaisesExpr | "setraises"
	//	setRaises=AttrRaisesExpr) | ("," names+=ID)*)? comments+=IDLComment*;
	public AttrSpecElements getAttrSpecAccess() {
		return pAttrSpec;
	}
	
	public ParserRule getAttrSpecRule() {
		return getAttrSpecAccess().getRule();
	}

	//ReadOnlyAttrSpec:
	//	comments+=IDLComment* "readonly" "attribute" type=ParamTypeSpec names+=ID ("raises" raises=AttrRaisesExpr | (","
	//	names+=ID)*)? ("raises" raises=AttrRaisesExpr | ("," names+=ID)*)? comments+=IDLComment*;
	public ReadOnlyAttrSpecElements getReadOnlyAttrSpecAccess() {
		return pReadOnlyAttrSpec;
	}
	
	public ParserRule getReadOnlyAttrSpecRule() {
		return getReadOnlyAttrSpecAccess().getRule();
	}

	//AttrRaisesExpr:
	//	exceptions=ExceptionList;
	public AttrRaisesExprElements getAttrRaisesExprAccess() {
		return pAttrRaisesExpr;
	}
	
	public ParserRule getAttrRaisesExprRule() {
		return getAttrRaisesExprAccess().getRule();
	}

	//ExceptionList:
	//	"(" exception+=ScopedName ("," exception+=ScopedName)* ")";
	public ExceptionListElements getExceptionListAccess() {
		return pExceptionList;
	}
	
	public ParserRule getExceptionListRule() {
		return getExceptionListAccess().getRule();
	}

	//OpDecl:
	//	comments+=IDLComment*
	//	isOneway?="oneway"?
	//	type=OpTypeDecl
	//	name=ID
	//	params=ParameterDecls ("raises" raises=ExceptionList)?
	//	context=ContextExpr?;
	public OpDeclElements getOpDeclAccess() {
		return pOpDecl;
	}
	
	public ParserRule getOpDeclRule() {
		return getOpDeclAccess().getRule();
	}

	//OpTypeDecl:
	//	ParamTypeSpec | "void";
	public OpTypeDeclElements getOpTypeDeclAccess() {
		return pOpTypeDecl;
	}
	
	public ParserRule getOpTypeDeclRule() {
		return getOpTypeDeclAccess().getRule();
	}

	//ParameterDecls:
	//	{ParameterDecls}
	//	"(" comments+=IDLComment* (decls+=ParamDcl ("," comments+=IDLComment* decls+=ParamDcl)*)? ")";
	public ParameterDeclsElements getParameterDeclsAccess() {
		return pParameterDecls;
	}
	
	public ParserRule getParameterDeclsRule() {
		return getParameterDeclsAccess().getRule();
	}

	//ParamDcl:
	//	direction=ParamDirection type=ParamTypeSpec name=ID;
	public ParamDclElements getParamDclAccess() {
		return pParamDcl;
	}
	
	public ParserRule getParamDclRule() {
		return getParamDclAccess().getRule();
	}

	//enum ParamDirection:
	//	In="in" | Out="out" | InOut="inout" | Return="return";
	public ParamDirectionElements getParamDirectionAccess() {
		return eParamDirection;
	}
	
	public EnumRule getParamDirectionRule() {
		return getParamDirectionAccess().getRule();
	}

	//ContextExpr:
	//	"context" "(" literal+=STRING ("," literal+=STRING)* ")";
	public ContextExprElements getContextExprAccess() {
		return pContextExpr;
	}
	
	public ParserRule getContextExprRule() {
		return getContextExprAccess().getRule();
	}

	//ParamTypeSpec:
	//	BaseTypeSpec
	//	| StringType
	//	| WideStringType
	//	| ScopedName;
	public ParamTypeSpecElements getParamTypeSpecAccess() {
		return pParamTypeSpec;
	}
	
	public ParserRule getParamTypeSpecRule() {
		return getParamTypeSpecAccess().getRule();
	}

	//ScopedName:
	//	"::"? name+=ID ("::" name+=ID)*;
	public ScopedNameElements getScopedNameAccess() {
		return pScopedName;
	}
	
	public ParserRule getScopedNameRule() {
		return getScopedNameAccess().getRule();
	}

	//BaseTypeSpec:
	//	FloatingPtType
	//	| IntegerType
	//	| CharType
	//	| WideCharType
	//	| BooleanType
	//	| OctetType
	//	| AnyType
	//	| ObjectType
	//	| ValueBaseType;
	public BaseTypeSpecElements getBaseTypeSpecAccess() {
		return pBaseTypeSpec;
	}
	
	public ParserRule getBaseTypeSpecRule() {
		return getBaseTypeSpecAccess().getRule();
	}

	//FloatingPtType:
	//	FloatType
	//	| DoubleType
	//	| LongDoubleType;
	public FloatingPtTypeElements getFloatingPtTypeAccess() {
		return pFloatingPtType;
	}
	
	public ParserRule getFloatingPtTypeRule() {
		return getFloatingPtTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType}
	//	"float";
	public FloatTypeElements getFloatTypeAccess() {
		return pFloatType;
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//DoubleType:
	//	{DoubleType}
	//	"double";
	public DoubleTypeElements getDoubleTypeAccess() {
		return pDoubleType;
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//LongDoubleType:
	//	{LongDoubleType}
	//	"long" "double";
	public LongDoubleTypeElements getLongDoubleTypeAccess() {
		return pLongDoubleType;
	}
	
	public ParserRule getLongDoubleTypeRule() {
		return getLongDoubleTypeAccess().getRule();
	}

	//IntegerType:
	//	UnsignedInt
	//	| SignedInt;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//SignedInt:
	//	SignedShortInt
	//	| SignedLongLongInt
	//	| SignedLongInt;
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedShortInt:
	//	{SignedShortInt}
	//	"short";
	public SignedShortIntElements getSignedShortIntAccess() {
		return pSignedShortInt;
	}
	
	public ParserRule getSignedShortIntRule() {
		return getSignedShortIntAccess().getRule();
	}

	//SignedLongInt:
	//	{SignedLongInt}
	//	"long";
	public SignedLongIntElements getSignedLongIntAccess() {
		return pSignedLongInt;
	}
	
	public ParserRule getSignedLongIntRule() {
		return getSignedLongIntAccess().getRule();
	}

	//SignedLongLongInt:
	//	{SignedLongLongInt}
	//	"long" "long";
	public SignedLongLongIntElements getSignedLongLongIntAccess() {
		return pSignedLongLongInt;
	}
	
	public ParserRule getSignedLongLongIntRule() {
		return getSignedLongLongIntAccess().getRule();
	}

	//UnsignedInt:
	//	UnsignedShortInt
	//	| UnsignedLongInt
	//	| UnsignedLongLongInt;
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	//UnsignedShortInt:
	//	{UnsignedShortInt}
	//	"unsigned" "short";
	public UnsignedShortIntElements getUnsignedShortIntAccess() {
		return pUnsignedShortInt;
	}
	
	public ParserRule getUnsignedShortIntRule() {
		return getUnsignedShortIntAccess().getRule();
	}

	//UnsignedLongInt:
	//	{UnsignedLongInt}
	//	"unsigned" "long";
	public UnsignedLongIntElements getUnsignedLongIntAccess() {
		return pUnsignedLongInt;
	}
	
	public ParserRule getUnsignedLongIntRule() {
		return getUnsignedLongIntAccess().getRule();
	}

	//UnsignedLongLongInt:
	//	{UnsignedLongLongInt}
	//	"unsigned" "long" "long";
	public UnsignedLongLongIntElements getUnsignedLongLongIntAccess() {
		return pUnsignedLongLongInt;
	}
	
	public ParserRule getUnsignedLongLongIntRule() {
		return getUnsignedLongLongIntAccess().getRule();
	}

	//CharType:
	//	{CharType}
	//	"char";
	public CharTypeElements getCharTypeAccess() {
		return pCharType;
	}
	
	public ParserRule getCharTypeRule() {
		return getCharTypeAccess().getRule();
	}

	//WideCharType:
	//	{WideCharType}
	//	"wchar";
	public WideCharTypeElements getWideCharTypeAccess() {
		return pWideCharType;
	}
	
	public ParserRule getWideCharTypeRule() {
		return getWideCharTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType}
	//	"boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//OctetType:
	//	{OctetType}
	//	"octet";
	public OctetTypeElements getOctetTypeAccess() {
		return pOctetType;
	}
	
	public ParserRule getOctetTypeRule() {
		return getOctetTypeAccess().getRule();
	}

	//AnyType:
	//	{AnyType}
	//	"any";
	public AnyTypeElements getAnyTypeAccess() {
		return pAnyType;
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//ObjectType:
	//	{ObjectType}
	//	"Object";
	public ObjectTypeElements getObjectTypeAccess() {
		return pObjectType;
	}
	
	public ParserRule getObjectTypeRule() {
		return getObjectTypeAccess().getRule();
	}

	//ValueBaseType:
	//	{ValueBaseType}
	//	"ValueBase";
	public ValueBaseTypeElements getValueBaseTypeAccess() {
		return pValueBaseType;
	}
	
	public ParserRule getValueBaseTypeRule() {
		return getValueBaseTypeAccess().getRule();
	}

	//StringType:
	//	{StringType}
	//	"string" ("<" size=PositiveIntConst ">")?;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//WideStringType:
	//	{WideStringType}
	//	"wstring" ("<" size=PositiveIntConst ">")?;
	public WideStringTypeElements getWideStringTypeAccess() {
		return pWideStringType;
	}
	
	public ParserRule getWideStringTypeRule() {
		return getWideStringTypeAccess().getRule();
	}

	//ExceptDecl:
	//	"exception" name=ID comments+=IDLComment* "{" comments+=IDLComment* members+=Member* "}";
	public ExceptDeclElements getExceptDeclAccess() {
		return pExceptDecl;
	}
	
	public ParserRule getExceptDeclRule() {
		return getExceptDeclAccess().getRule();
	}

	//Member:
	//	type=TypeSpec decl=Declarator ";" comment+=IDLComment*;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Declarator:
	//	SimpleDeclarator | ArrayDeclarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//SimpleDeclarator:
	//	id=ID;
	public SimpleDeclaratorElements getSimpleDeclaratorAccess() {
		return pSimpleDeclarator;
	}
	
	public ParserRule getSimpleDeclaratorRule() {
		return getSimpleDeclaratorAccess().getRule();
	}

	//ComplexDeclarator:
	//	ArrayDeclarator;
	public ComplexDeclaratorElements getComplexDeclaratorAccess() {
		return pComplexDeclarator;
	}
	
	public ParserRule getComplexDeclaratorRule() {
		return getComplexDeclaratorAccess().getRule();
	}

	//ArrayDeclarator:
	//	id=ID ("[" size+=ConstExp "]")+;
	public ArrayDeclaratorElements getArrayDeclaratorAccess() {
		return pArrayDeclarator;
	}
	
	public ParserRule getArrayDeclaratorRule() {
		return getArrayDeclaratorAccess().getRule();
	}

	//StructType:
	//	(isAppendable?="@appendable" | isFinal?="@final")? "struct" name=ID comments+=IDLComment* "{" comments+=IDLComment*
	//	members+=Member* "}";
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}

	//TypeDecl:
	//	"typedef" TypeDeclarator
	//	| StructType
	//	| UnionType
	//	| EnumType
	//	| ConstrForwardDecl;
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//TypeDeclarator:
	//	comments+=IDLComment* type=TypeSpec declarators+=Declarator+;
	public TypeDeclaratorElements getTypeDeclaratorAccess() {
		return pTypeDeclarator;
	}
	
	public ParserRule getTypeDeclaratorRule() {
		return getTypeDeclaratorAccess().getRule();
	}

	//TypeSpec:
	//	SimpleTypeSpec | ConstrTypeSpec;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}

	//SimpleTypeSpec:
	//	BaseTypeSpec | TemplateTypeSpec | ScopedName;
	public SimpleTypeSpecElements getSimpleTypeSpecAccess() {
		return pSimpleTypeSpec;
	}
	
	public ParserRule getSimpleTypeSpecRule() {
		return getSimpleTypeSpecAccess().getRule();
	}

	//TemplateTypeSpec:
	//	SequenceType | StringType | WideStringType | FixedPtType;
	public TemplateTypeSpecElements getTemplateTypeSpecAccess() {
		return pTemplateTypeSpec;
	}
	
	public ParserRule getTemplateTypeSpecRule() {
		return getTemplateTypeSpecAccess().getRule();
	}

	//ConstrTypeSpec:
	//	StructType | UnionType | EnumType;
	public ConstrTypeSpecElements getConstrTypeSpecAccess() {
		return pConstrTypeSpec;
	}
	
	public ParserRule getConstrTypeSpecRule() {
		return getConstrTypeSpecAccess().getRule();
	}

	//UnionType:
	//	(extensibility="@final" | "@appendable")? "union" name=ID comments+=IDLComment* "switch" "(" switch=SwitchTypeSpec
	//	")" "{" body=SwitchBody "}";
	public UnionTypeElements getUnionTypeAccess() {
		return pUnionType;
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}

	//SwitchTypeSpec:
	//	IntegerType | CharType | BooleanType | EnumType | ScopedName;
	public SwitchTypeSpecElements getSwitchTypeSpecAccess() {
		return pSwitchTypeSpec;
	}
	
	public ParserRule getSwitchTypeSpecRule() {
		return getSwitchTypeSpecAccess().getRule();
	}

	//SwitchBody:
	//	case+=Case+;
	public SwitchBodyElements getSwitchBodyAccess() {
		return pSwitchBody;
	}
	
	public ParserRule getSwitchBodyRule() {
		return getSwitchBodyAccess().getRule();
	}

	//Case:
	//	comments+=IDLComment* (label+=CaseLabel comments+=IDLComment*)+ comments+=IDLComment* spec=ElementSpec ";"
	//	comments+=IDLComment*;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//CaseLabel:
	//	isCase?="case" constExp=ConstExp ":" | isDefault?="default" ":";
	public CaseLabelElements getCaseLabelAccess() {
		return pCaseLabel;
	}
	
	public ParserRule getCaseLabelRule() {
		return getCaseLabelAccess().getRule();
	}

	//ElementSpec:
	//	type=TypeSpec declarator=Declarator;
	public ElementSpecElements getElementSpecAccess() {
		return pElementSpec;
	}
	
	public ParserRule getElementSpecRule() {
		return getElementSpecAccess().getRule();
	}

	//EnumType:
	//	"enum" name=ID comments+=IDLComment* "{" comments+=IDLComment* literal+=ID ("," comments+=IDLComment* literal+=ID)*
	//	comments+=IDLComment* "}";
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//SequenceType:
	//	"sequence" "<" type=SimpleTypeSpec ("," size=PositiveIntConst)? ">";
	public SequenceTypeElements getSequenceTypeAccess() {
		return pSequenceType;
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//NativeType:
	//	"native" name=ID;
	public NativeTypeElements getNativeTypeAccess() {
		return pNativeType;
	}
	
	public ParserRule getNativeTypeRule() {
		return getNativeTypeAccess().getRule();
	}

	//FixedPtType:
	//	"fixed" "<" lower=PositiveIntConst "," upper=PositiveIntConst ">";
	public FixedPtTypeElements getFixedPtTypeAccess() {
		return pFixedPtType;
	}
	
	public ParserRule getFixedPtTypeRule() {
		return getFixedPtTypeAccess().getRule();
	}

	//ConstrForwardDecl:
	//	StructForwardDecl | UnionForwardDecl;
	public ConstrForwardDeclElements getConstrForwardDeclAccess() {
		return pConstrForwardDecl;
	}
	
	public ParserRule getConstrForwardDeclRule() {
		return getConstrForwardDeclAccess().getRule();
	}

	//StructForwardDecl:
	//	"struct" name=ID;
	public StructForwardDeclElements getStructForwardDeclAccess() {
		return pStructForwardDecl;
	}
	
	public ParserRule getStructForwardDeclRule() {
		return getStructForwardDeclAccess().getRule();
	}

	//UnionForwardDecl:
	//	"union" name=ID;
	public UnionForwardDeclElements getUnionForwardDeclAccess() {
		return pUnionForwardDecl;
	}
	
	public ParserRule getUnionForwardDeclRule() {
		return getUnionForwardDeclAccess().getRule();
	}

	//PositiveIntConst:
	//	exp=ConstExp;
	public PositiveIntConstElements getPositiveIntConstAccess() {
		return pPositiveIntConst;
	}
	
	public ParserRule getPositiveIntConstRule() {
		return getPositiveIntConstAccess().getRule();
	}

	//ConstDecl:
	//	"const" type=ConstType name=ID "=" value=ConstExp comments+=IDLComment*;
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}

	//ConstType:
	//	IntegerType | CharType | WideCharType | BooleanType | FloatingPtType | StringType | WideStringType | FixedPtConstType
	//	| ScopedName | OctetType;
	public ConstTypeElements getConstTypeAccess() {
		return pConstType;
	}
	
	public ParserRule getConstTypeRule() {
		return getConstTypeAccess().getRule();
	}

	//FixedPtConstType:
	//	{FixedPtConstType}
	//	"fixed";
	public FixedPtConstTypeElements getFixedPtConstTypeAccess() {
		return pFixedPtConstType;
	}
	
	public ParserRule getFixedPtConstTypeRule() {
		return getFixedPtConstTypeAccess().getRule();
	}

	//ConstExp:
	//	OrExpr;
	public ConstExpElements getConstExpAccess() {
		return pConstExp;
	}
	
	public ParserRule getConstExpRule() {
		return getConstExpAccess().getRule();
	}

	//OrExpr:
	//	lhs=XOrExpr (op="|" rhs=OrExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//XOrExpr:
	//	lhs=AndExpr (op="^" rhs=XOrExpr)*;
	public XOrExprElements getXOrExprAccess() {
		return pXOrExpr;
	}
	
	public ParserRule getXOrExprRule() {
		return getXOrExprAccess().getRule();
	}

	//AndExpr:
	//	lhs=ShiftExpr (op="&" rhs=AndExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//ShiftExpr:
	//	lhs=AddExpr ((op="<<" | op=">>") rhs=ShiftExpr)*;
	public ShiftExprElements getShiftExprAccess() {
		return pShiftExpr;
	}
	
	public ParserRule getShiftExprRule() {
		return getShiftExprAccess().getRule();
	}

	//AddExpr:
	//	lhs=MultExpr ((op="+" | op="-") rhs=AddExpr)*;
	public AddExprElements getAddExprAccess() {
		return pAddExpr;
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}

	//MultExpr:
	//	lhs=UnaryExpr ((op="*" | op="/" | op="%") rhs=MultExpr)*;
	public MultExprElements getMultExprAccess() {
		return pMultExpr;
	}
	
	public ParserRule getMultExprRule() {
		return getMultExprAccess().getRule();
	}

	//UnaryExpr:
	//	(op="-" | op="+" | op="~")? expr=PrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//PrimaryExpr:
	//	ScopedName
	//	| Literal
	//	| "(" ConstExp ")";
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}

	//Literal:
	//	value=HEX_LITERAL
	//	| value=STRING
	//	| value=CHARACTER_LITERAL
	//	| value=FLOATING_PT_LITERAL
	//	| value=INTEGER_LITERAL
	//	| value=BOOLEAN_LITERAL;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	///*
	// * IDL3 Definitions
	// */ ComponentDecl:
	//	comments+=IDLComment* "component" name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
	//	supports+=ScopedName)*)?
	//	"{" export+=ComponentExport* "}";
	public ComponentDeclElements getComponentDeclAccess() {
		return pComponentDecl;
	}
	
	public ParserRule getComponentDeclRule() {
		return getComponentDeclAccess().getRule();
	}

	//ComponentExport:
	//	ProvidesDcl ";" | UsesDcl ";" | EmitDcl ";" | PublishesDcl ";" | ConsumesDcl ";" | AttrDecl ";" | PortDecl ";" |
	//	Preproc | IDLComment;
	public ComponentExportElements getComponentExportAccess() {
		return pComponentExport;
	}
	
	public ParserRule getComponentExportRule() {
		return getComponentExportAccess().getRule();
	}

	//ProvidesDcl:
	//	"provides" type=ScopedName name=ID comments+=IDLComment*;
	public ProvidesDclElements getProvidesDclAccess() {
		return pProvidesDcl;
	}
	
	public ParserRule getProvidesDclRule() {
		return getProvidesDclAccess().getRule();
	}

	//UsesDcl:
	//	"uses" isMultiple?="multiple"? type=ScopedName name=ID comments+=IDLComment*;
	public UsesDclElements getUsesDclAccess() {
		return pUsesDcl;
	}
	
	public ParserRule getUsesDclRule() {
		return getUsesDclAccess().getRule();
	}

	//PublishesDcl:
	//	"publishes" type=ScopedName name=ID comments+=IDLComment*;
	public PublishesDclElements getPublishesDclAccess() {
		return pPublishesDcl;
	}
	
	public ParserRule getPublishesDclRule() {
		return getPublishesDclAccess().getRule();
	}

	//EmitDcl:
	//	"emits" type=ScopedName name=ID comments+=IDLComment*;
	public EmitDclElements getEmitDclAccess() {
		return pEmitDcl;
	}
	
	public ParserRule getEmitDclRule() {
		return getEmitDclAccess().getRule();
	}

	//ConsumesDcl:
	//	"consumes" type=ScopedName name=ID comments+=IDLComment*;
	public ConsumesDclElements getConsumesDclAccess() {
		return pConsumesDcl;
	}
	
	public ParserRule getConsumesDclRule() {
		return getConsumesDclAccess().getRule();
	}

	//ComponentForwardDecl:
	//	"component" name=ID;
	public ComponentForwardDeclElements getComponentForwardDeclAccess() {
		return pComponentForwardDecl;
	}
	
	public ParserRule getComponentForwardDeclRule() {
		return getComponentForwardDeclAccess().getRule();
	}

	//HomeDecl:
	//	"home" comments+=IDLComment* name=ID (":" base=ScopedName)? ("supports" supports+=ScopedName (","
	//	supports+=ScopedName)*)? "manages" manages=ScopedName primary_key=PrimaryKeySpec? "{" export+=HomeExport* "}";
	public HomeDeclElements getHomeDeclAccess() {
		return pHomeDecl;
	}
	
	public ParserRule getHomeDeclRule() {
		return getHomeDeclAccess().getRule();
	}

	//PrimaryKeySpec:
	//	"primarykey" key=ScopedName;
	public PrimaryKeySpecElements getPrimaryKeySpecAccess() {
		return pPrimaryKeySpec;
	}
	
	public ParserRule getPrimaryKeySpecRule() {
		return getPrimaryKeySpecAccess().getRule();
	}

	//HomeExport:
	//	Export | FactoryDcl ";" | FinderDcl ";";
	public HomeExportElements getHomeExportAccess() {
		return pHomeExport;
	}
	
	public ParserRule getHomeExportRule() {
		return getHomeExportAccess().getRule();
	}

	//FactoryDcl:
	//	comments+=IDLComment* "factory" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
	public FactoryDclElements getFactoryDclAccess() {
		return pFactoryDcl;
	}
	
	public ParserRule getFactoryDclRule() {
		return getFactoryDclAccess().getRule();
	}

	//FinderDcl:
	//	comments+=IDLComment* "finder" name=ID params=ParameterDecls ("raises" raises=ExceptionList)?;
	public FinderDclElements getFinderDclAccess() {
		return pFinderDcl;
	}
	
	public ParserRule getFinderDclRule() {
		return getFinderDclAccess().getRule();
	}

	//Event:
	//	EventDcl
	//	| EventForwardDcl;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//EventDcl:
	//	(isCustom?="custom" | isAbstract?="abstract")? "eventtype" name=ID (":" isTruncatable?="truncatable"?
	//	base+=ScopedName ("," base+=ScopedName)*)? ("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{"
	//	(export+=Export | member+=StateMember)* "}";
	public EventDclElements getEventDclAccess() {
		return pEventDcl;
	}
	
	public ParserRule getEventDclRule() {
		return getEventDclAccess().getRule();
	}

	//StateMember:
	//	(isPublic?="public" | "private") type=ParamTypeSpec names+=ID ";";
	public StateMemberElements getStateMemberAccess() {
		return pStateMember;
	}
	
	public ParserRule getStateMemberRule() {
		return getStateMemberAccess().getRule();
	}

	////EventAbsDcl :
	////	"abstract" "eventtype" name=ID (":" (isTruncatable?="truncatable")? base+=ScopedName ("," base+=ScopedName)*)?
	////	("supports" supports+=ScopedName ("," supports+=ScopedName)*)? "{" (export+=Export)* "}";
	//EventForwardDcl:
	//	isAbstract?="abstract"? "eventtype" name=ID;
	public EventForwardDclElements getEventForwardDclAccess() {
		return pEventForwardDcl;
	}
	
	public ParserRule getEventForwardDclRule() {
		return getEventForwardDclAccess().getRule();
	}

	///*
	// * DDS4CCM Definitions
	// */ PortTypeDecl:
	//	"porttype" comments+=IDLComment* name=ID "{" exports+=PortExport+ "}";
	public PortTypeDeclElements getPortTypeDeclAccess() {
		return pPortTypeDecl;
	}
	
	public ParserRule getPortTypeDeclRule() {
		return getPortTypeDeclAccess().getRule();
	}

	//PortExport:
	//	ProvidesDcl ";" | UsesDcl ";" | AttrDecl ";" | IDLComment;
	public PortExportElements getPortExportAccess() {
		return pPortExport;
	}
	
	public ParserRule getPortExportRule() {
		return getPortExportAccess().getRule();
	}

	//PortDecl:
	//	("port" | isMirror?="mirrorport") type=ScopedName name=ID comments+=IDLComment*;
	public PortDeclElements getPortDeclAccess() {
		return pPortDecl;
	}
	
	public ParserRule getPortDeclRule() {
		return getPortDeclAccess().getRule();
	}

	//Connector:
	//	header=ConnectorHeader "{" exports+=ConnectorExport* "}";
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//ConnectorHeader:
	//	"connector" name=ID (":" base=ScopedName)?;
	public ConnectorHeaderElements getConnectorHeaderAccess() {
		return pConnectorHeader;
	}
	
	public ParserRule getConnectorHeaderRule() {
		return getConnectorHeaderAccess().getRule();
	}

	//ConnectorExport:
	//	ProvidesDcl ";" | UsesDcl ";" | PortDecl ";" | AttrDecl ";" | IDLComment;
	public ConnectorExportElements getConnectorExportAccess() {
		return pConnectorExport;
	}
	
	public ParserRule getConnectorExportRule() {
		return getConnectorExportAccess().getRule();
	}

	//TemplateModule:
	//	"module" name=ID "<" parameters+=FormalParameter ("," parameters+=FormalParameter)* ">" "{"
	//	definitions+=TemplateDefinition* "}";
	public TemplateModuleElements getTemplateModuleAccess() {
		return pTemplateModule;
	}
	
	public ParserRule getTemplateModuleRule() {
		return getTemplateModuleAccess().getRule();
	}

	//FormalParameter:
	//	type=FormalParameterType name=ID;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//FormalParameterType:
	//	TypenameParamType
	//	| InterfaceParamType
	//	| ValuetypeParamType
	//	| EventParamType
	//	| StructParamType
	//	| UnionParamType
	//	| ExceptionParamType
	//	| EnumParamType
	//	| SequenceParamType
	//	| ConstParamType
	//	| SequenceType;
	public FormalParameterTypeElements getFormalParameterTypeAccess() {
		return pFormalParameterType;
	}
	
	public ParserRule getFormalParameterTypeRule() {
		return getFormalParameterTypeAccess().getRule();
	}

	//TypenameParamType:
	//	{TypenameParamType}
	//	"typename";
	public TypenameParamTypeElements getTypenameParamTypeAccess() {
		return pTypenameParamType;
	}
	
	public ParserRule getTypenameParamTypeRule() {
		return getTypenameParamTypeAccess().getRule();
	}

	//InterfaceParamType:
	//	{InterfaceParamType}
	//	"interface";
	public InterfaceParamTypeElements getInterfaceParamTypeAccess() {
		return pInterfaceParamType;
	}
	
	public ParserRule getInterfaceParamTypeRule() {
		return getInterfaceParamTypeAccess().getRule();
	}

	//ValuetypeParamType:
	//	{ValuetypeParamType}
	//	"valuetype";
	public ValuetypeParamTypeElements getValuetypeParamTypeAccess() {
		return pValuetypeParamType;
	}
	
	public ParserRule getValuetypeParamTypeRule() {
		return getValuetypeParamTypeAccess().getRule();
	}

	//EventParamType:
	//	{EventParamType}
	//	"eventtype";
	public EventParamTypeElements getEventParamTypeAccess() {
		return pEventParamType;
	}
	
	public ParserRule getEventParamTypeRule() {
		return getEventParamTypeAccess().getRule();
	}

	//StructParamType:
	//	{StructParamType}
	//	"struct";
	public StructParamTypeElements getStructParamTypeAccess() {
		return pStructParamType;
	}
	
	public ParserRule getStructParamTypeRule() {
		return getStructParamTypeAccess().getRule();
	}

	//UnionParamType:
	//	{UnionParamType}
	//	"union";
	public UnionParamTypeElements getUnionParamTypeAccess() {
		return pUnionParamType;
	}
	
	public ParserRule getUnionParamTypeRule() {
		return getUnionParamTypeAccess().getRule();
	}

	//ExceptionParamType:
	//	{ExceptionParamType}
	//	"exception";
	public ExceptionParamTypeElements getExceptionParamTypeAccess() {
		return pExceptionParamType;
	}
	
	public ParserRule getExceptionParamTypeRule() {
		return getExceptionParamTypeAccess().getRule();
	}

	//EnumParamType:
	//	{EnumParamType}
	//	"enum";
	public EnumParamTypeElements getEnumParamTypeAccess() {
		return pEnumParamType;
	}
	
	public ParserRule getEnumParamTypeRule() {
		return getEnumParamTypeAccess().getRule();
	}

	//SequenceParamType:
	//	{SequenceParamType}
	//	"sequence";
	public SequenceParamTypeElements getSequenceParamTypeAccess() {
		return pSequenceParamType;
	}
	
	public ParserRule getSequenceParamTypeRule() {
		return getSequenceParamTypeAccess().getRule();
	}

	//ConstParamType:
	//	"const" ConstType;
	public ConstParamTypeElements getConstParamTypeAccess() {
		return pConstParamType;
	}
	
	public ParserRule getConstParamTypeRule() {
		return getConstParamTypeAccess().getRule();
	}

	//TemplateDefinition:
	//	TypeDecl ";"
	//	| ConstDecl ";"
	//	| ExceptDecl ";"
	//	| Interface_decl ";"
	//	| FixedModule ";"
	//	| StructType ";"
	//	| NativeType ";"
	//	| Event ";"
	//	| ComponentDecl ";"
	//	| HomeDecl ";"
	//	| PortTypeDecl ";"
	//	| Connector ";"
	//	| TemplateModuleRef ";"
	//	| IDLComment;
	public TemplateDefinitionElements getTemplateDefinitionAccess() {
		return pTemplateDefinition;
	}
	
	public ParserRule getTemplateDefinitionRule() {
		return getTemplateDefinitionAccess().getRule();
	}

	//FixedModule:
	//	"module" name=ID "{" definitions+=FixedDefinition* "}";
	public FixedModuleElements getFixedModuleAccess() {
		return pFixedModule;
	}
	
	public ParserRule getFixedModuleRule() {
		return getFixedModuleAccess().getRule();
	}

	//FixedDefinition:
	//	TypeDecl ";"
	//	| ConstDecl ";"
	//	| ExceptDecl ";"
	//	| Interface_decl ";"
	//	| FixedModule ";"
	//	| StructType ";"
	//	| NativeType ";"
	//	| Event ";"
	//	| ComponentDecl ";"
	//	| HomeDecl ";"
	//	| PortTypeDecl ";"
	//	| Connector ";"
	//	| IDLComment;
	public FixedDefinitionElements getFixedDefinitionAccess() {
		return pFixedDefinition;
	}
	
	public ParserRule getFixedDefinitionRule() {
		return getFixedDefinitionAccess().getRule();
	}

	//TemplateModuleInst:
	//	"module" type=ScopedName "<" parameter+=ActualParameter ("," parameter+=ActualParameter)* ">" name=ID
	//	comments+=IDLComment*;
	public TemplateModuleInstElements getTemplateModuleInstAccess() {
		return pTemplateModuleInst;
	}
	
	public ParserRule getTemplateModuleInstRule() {
		return getTemplateModuleInstAccess().getRule();
	}

	//ActualParameter:
	//	ConstExp | TypeSpec;
	public ActualParameterElements getActualParameterAccess() {
		return pActualParameter;
	}
	
	public ParserRule getActualParameterRule() {
		return getActualParameterAccess().getRule();
	}

	//TemplateModuleRef:
	//	"alias" type=ScopedName "<" id+=ID ("," id+=ID)* ">" name=ID;
	public TemplateModuleRefElements getTemplateModuleRefAccess() {
		return pTemplateModuleRef;
	}
	
	public ParserRule getTemplateModuleRefRule() {
		return getTemplateModuleRefAccess().getRule();
	}

	//IDLComment:
	//	body=SL_COMMENT;
	public IDLCommentElements getIDLCommentAccess() {
		return pIDLComment;
	}
	
	public ParserRule getIDLCommentRule() {
		return getIDLCommentAccess().getRule();
	}

	//terminal UNUSED_LITERAL:
	//	"('?')";
	public TerminalRule getUNUSED_LITERALRule() {
		return tUNUSED_LITERAL;
	} 

	//terminal INTEGER_LITERAL:
	//	'0'..'9'+ ('l' | 'L')?;
	public TerminalRule getINTEGER_LITERALRule() {
		return tINTEGER_LITERAL;
	} 

	//terminal HEX_LITERAL:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+ ('l' | 'L')?;
	public TerminalRule getHEX_LITERALRule() {
		return tHEX_LITERAL;
	} 

	//terminal FLOATING_PT_LITERAL:
	//	'0'..'9'+ '.' '0'..'9'* (('e' | 'E') ('+' | '-')? '0'..'9'+)? ('f' | 'F' | 'd' | 'D')?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)? ('f' | 'F' | 'd' | 'D')?
	//	| '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+) ('f' | 'F' | 'd' | 'D')?
	//	| '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)? ('f' | 'F' | 'd' | 'D');
	public TerminalRule getFLOATING_PT_LITERALRule() {
		return tFLOATING_PT_LITERAL;
	} 

	//terminal CHARACTER_LITERAL:
	//	'\'' (ESCAPE_SEQUENCE | !('\'' | '\\')) '\'';
	public TerminalRule getCHARACTER_LITERALRule() {
		return tCHARACTER_LITERAL;
	} 

	//terminal BOOLEAN_LITERAL:
	//	'TRUE' | 'FALSE';
	public TerminalRule getBOOLEAN_LITERALRule() {
		return tBOOLEAN_LITERAL;
	} 

	//terminal ESCAPE_SEQUENCE:
	//	"'\\' ('b'|'t'|'n'|'f'|'r'|'v'|'a'|'?'|'\"'|'\''|'\\') | RULE_UNICODE_ESCAPE | RULE_OCTAL_ESCAPE | RULE_HEX_ESCAPE";
	public TerminalRule getESCAPE_SEQUENCERule() {
		return tESCAPE_SEQUENCE;
	} 

	//terminal HEX_ESCAPE:
	//	"'\\' ('x'|'X') ( '0'..'9' | 'a'..'f' | 'A'..'F' )+ ('l'|'L')?";
	public TerminalRule getHEX_ESCAPERule() {
		return tHEX_ESCAPE;
	} 

	//terminal OCTAL_ESCAPE:
	//"'\\' ('0'..'3') ('0'..'7') ('0'..'7')
	//	|	'\\' ('0'..'7') ('0'..'7')
	//	|	'\\' ('0'..'7')";
	public TerminalRule getOCTAL_ESCAPERule() {
		return tOCTAL_ESCAPE;
	} 

	//terminal UNICODE_ESCAPE:
	//	"'\\' 'u' ( '0'..'9' | 'a'..'f' | 'A'..'F' ) ( '0'..'9' | 'a'..'f' | 'A'..'F' ) ( '0'..'9' | 'a'..'f' | 'A'..'F' ) ( '0'..'9' | 'a'..'f' | 'A'..'F' )";
	public TerminalRule getUNICODE_ESCAPERule() {
		return tUNICODE_ESCAPE;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
