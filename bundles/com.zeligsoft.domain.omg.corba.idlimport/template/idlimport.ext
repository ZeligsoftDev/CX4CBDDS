import idl; // needed for IDL DSL
import CXDomain::IDL; // needed for CXModule etc. 
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension com::zeligsoft::base::zdl::util::ZDLUtil reexport;

create uml::Package mainTransform(Specification model, ZMLMM::ZML_Core::NamedElement zdlmodel, String idlFileName, String profileToApply) :
    zdlmodel.zdlAsPackage().packagedElement.add(this) ->
    this.zdlApplyDomainProfile(profileToApply) ->
    this.setName("IDL_Import_Results") ->
    zdlmodel.setupZDLModel() -> 
    model.definitions.visitContained(this) ->
    resolveUnresolvedLookups() ->
    this.packagedElement.get(0).zdlAsPackage().destroy();
    
Void setupZDLModel(uml::Package model) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.setupZDLModel(org.eclipse.uml2.uml.Package);

Void resolveUnresolvedLookups() :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.resolveUnresolvedLookups();
		
Void visitContained(Preproc preproc, uml::Package container ) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.handlePreproc(
		com.zeligsoft.domain.omg.corba.dsl.idl.Preproc,
		org.eclipse.uml2.uml.Package);
		
Void visitContained(Preproc preproc, CXModule module ) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.handlePreproc(
		com.zeligsoft.domain.omg.corba.dsl.idl.Preproc,
		org.eclipse.uml2.uml.Package);
		
Void debug(Object o) :
    JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.debug(java.lang.Object);
	
Void visitContained(Definition object, CXModule module ) :
	{};
	
Void visitContained(Definition object, uml::Package package ) :
	{};
	
// Ignore any forward declarations
Void visitContained(Forward_decl decl, CXModule container ) : {};
Void visitContained(Forward_decl decl,  uml::Package container ) : {};	
Void visitContained(ConstrForwardDecl decl, CXModule container ) : {};
Void visitContained(ConstrForwardDecl decl,  uml::Package container ) : {};	
	
private create CXModule visitContained(Module module, uml::Package container) :
	container.packagedElement.add(this) ->
	this.configureModule(module);

private create CXModule visitContained(Module module, CXModule container) :
	container.contents.add(this) ->
	this.configureModule(module);
	
Void configureModule(CXModule zModule, Module module ) :
	zModule.setName(module.name) ->
	module.definitions.visitContained(zModule);
	
create CXInterface visitContained(Interface_decl intf, CXModule container) :
	container.contents.add(this) ->
	this.configureInterface(intf);
	
private create CXInterface visitContained(Interface_decl intf, uml::Package container) :
	container.packagedElement.add(this) ->
	this.configureInterface(intf);
	
Void configureInterface(CXInterface zInterface, Interface_decl intf) :
	zInterface.setName(intf.header.name) ->
	zInterface.setIsLocal(intf.header.isLocal) ->
	zInterface.addInterfaceGeneralizations(intf) ->
	zInterface.setIsAbstract(intf.header.isAbstract) ->
	intf.interfaceBody.export.size > 0 ? intf.interfaceBody.export.visitContained(zInterface) : {};
	
Void addInterfaceGeneralizations(CXInterface interface, Interface_decl intf ) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addInterfaceGeneralizations(
		org.eclipse.uml2.uml.Interface,
		com.zeligsoft.domain.omg.corba.dsl.idl.Interface_decl); 

Void visitContained(Export object, CXInterface container ) :
	{};
	
create CXAttribute visitContained(AttrSpec attr, CXInterface interface) :
	interface.ownedAttribute.add(this) ->
	this.configureAttribute(attr);

create CXAttribute visitContained(ReadOnlyAttrSpec attr, CXInterface interface) :
	interface.ownedAttribute.add(this) ->
	this.configureAttribute(attr);
	
Void configureAttribute(CXAttribute zAttribute, AttrSpec attr ) :
	zAttribute.setName(attr.names.get(0)) ->
	zAttribute.setIsReadOnly(false) ->
	zAttribute.setTypedElementType(attr.type) ->
	attr.getRaises != null ? zAttribute.addGetRaises(attr.getRaises) : {} ->
	attr.setRaises != null ? zAttribute.addSetRaises(attr.setRaises) : {};

Void configureAttribute(CXAttribute zAttribute, ReadOnlyAttrSpec attr ) :
	zAttribute.setName(attr.names.get(0)) ->
	zAttribute.setIsReadOnly(true) ->
	zAttribute.setTypedElementType(attr.type) ->
	attr.raises != null ? zAttribute.addGetRaises(attr.raises) : {};
	
Void addGetRaises(CXAttribute attr, AttrRaisesExpr exc) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addGetRaises(
		org.eclipse.uml2.uml.Property,
		com.zeligsoft.domain.omg.corba.dsl.idl.AttrRaisesExpr);
		
Void addSetRaises(CXAttribute attr, AttrRaisesExpr exc) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addSetRaises(
		org.eclipse.uml2.uml.Property,
		com.zeligsoft.domain.omg.corba.dsl.idl.AttrRaisesExpr);
				
Void setTypedElementType(uml::TypedElement element, Object typeString) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.setType(
		org.eclipse.uml2.uml.TypedElement,
		java.lang.Object);

create CXOperation visitContained(OpDecl op, CXInterface interface) :
	interface.ownedOperation.add(this) ->
	this.configureOperation(op);
	
Void configureOperation(CXOperation zOperation, OpDecl op ) :
	zOperation.setName(op.name) ->
	op.params.decls.visitContained(zOperation) ->
	zOperation.setOperationType(op.type) ->
	zOperation.setIsOneWay(op.isOneway) ->
	op.raises != null ? zOperation.addRaisedExceptions(op.raises) : {};

Void setOperationType(uml::Operation element, Object typeString) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.setType(
		org.eclipse.uml2.uml.Operation,
		java.lang.Object);
		
Void addRaisedExceptions(uml::Operation operation, ExceptionList exc) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addRaisedExceptions(
		org.eclipse.uml2.uml.Operation,
		com.zeligsoft.domain.omg.corba.dsl.idl.ExceptionList);

create CXParameter visitContained(ParamDcl param, CXOperation operation) :
	operation.ownedParameter.add(this) ->
	this.setName(param.name) ->
	setParameterDirection(param) ->
	this.setTypedElementType(param.type);

Void setParameterDirection(uml::Parameter param, ParamDcl paramdecl) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.setDirection(		
		org.eclipse.uml2.uml.Parameter,
		com.zeligsoft.domain.omg.corba.dsl.idl.ParamDcl);

create CXStruct visitContained(StructType struct, CXModule module ) :
	module.contents.add(this) ->
	this.configureStruct(struct);
	
create CXStruct visitContained(StructType struct, CXInterface interface ) :
	interface.contents.add(this) ->
	this.configureStruct(struct);
	
private create CXStruct visitContained(StructType struct, uml::Package package ) :
	package.packagedElement.add(this) ->
	this.configureStruct(struct);
	
Void configureStruct(CXStruct zStruct, StructType struct) :
	zStruct.setName(struct.name) ->
	struct.members.visitContained(zStruct) ->
	struct.isAppendable?
	  zStruct.setExtensibility(ExtensibilityKind::Appendable) :
	  zStruct.setExtensibility(ExtensibilityKind::Final);
	
create CXField visitContained(Member member, CXStruct struct) :
	struct.members.add(this) ->
	configureField(this, member);
	
Void configureField(CXField field, Member member) :
	field.visitMemberDeclarator(member.decl) ->
	if member.comment.size > 0 then {
		let comment = new uml::Comment :
		field.zdlAsProperty().ownedComment.add(comment) ->
		member.comment.addCommentText(comment)
	} ->
	field.visitMemberType(member.type);
	
Void visitMemberDeclarator(CXField field, SimpleDeclarator decl) :
	field.setName(decl.id);
	
Void visitMemberDeclarator(CXField field, ArrayDeclarator decl) :
	field.setName(decl.id) ->
	field.bounds.addAll(getArrayBounds(field, decl));
	
Void visitMemberType(CXField field, StringType type ) :
	field.setTypedElementType(type) ->
	if type.size != null then 
	{
		let newBound = new CXBound :
		newBound.setValue(type.size.exp.getConstValue()) ->
		field.bounds.add(newBound)
	};
	
Void visitMemberType(CXField field, WideStringType type ) :
	field.setTypedElementType(type) ->
	if type.size != null then
		{
			let newBound = new CXBound :
			newBound.setValue(type.size.exp.getConstValue()) ->
			field.bounds.add(newBound)
	};
	
Void visitMemberType(CXField field, TypeSpec type ) :
	field.setTypedElementType(type);

List getArrayBounds(CXField element, ArrayDeclarator decl) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.getArrayBounds(
		org.eclipse.uml2.uml.NamedElement, 
		com.zeligsoft.domain.omg.corba.dsl.idl.ArrayDeclarator);
			
Void addCommentText(IDLComment c, uml::Comment comment) :
	if comment.body == null then comment.setBody(c.body) else comment.setBody(comment.body + c.body); 
	
//If we encounter a Comment, do nothing with it for now
Void visitContained(IDLComment c, CXModule module ) :
	{};
	
Void visitContained(IDLComment c, CXInterface interface ) :
	{};
	
private Void visitContained(IDLComment c, uml::Package package) :
	{};
	
create CXException visitContained(ExceptDecl exception, CXModule module ) :
	module.contents.add(this) ->
	this.configureException(exception);
	
create CXException visitContained(ExceptDecl exception, CXInterface interface ) :
	interface.contents.add(this) ->
	this.configureException(exception);
	
private create CXException visitContained(ExceptDecl exception, uml::Package package ) :
	package.packagedElement.add(this) ->
	this.configureException(exception);
	
Void configureException(CXException zException, ExceptDecl exception) :
	zException.setName(exception.name) ->
	exception.members.visitContained(zException);
	
create CXField visitContained(Member member, CXException exception) :
	exception.members.add(this) ->
	configureField(this, member);
	
create CXConstant visitContained(ConstDecl const, CXInterface interface) :
	let values = const.value.getConstValue().split("::") :
	interface.ownedConstants.add(this) ->
	this.setName(const.name) ->
	this.setTypedElementType(const.type) ->
	this.setDefault(values.get(values.size - 1));

create CXConstant visitContained(ConstDecl const, CXModule module) :
	let values = const.value.getConstValue().split("::") :
	module.addConstant(this) ->
	this.setName(const.name) ->
	this.setTypedElementType(const.type) ->
	this.setDefault(values.get(values.size - 1));

Void addConstant(uml::Package package, CXConstant const) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addConstant(
		org.eclipse.uml2.uml.Package,
		org.eclipse.uml2.uml.Property);

String getConstValue(ConstExp exp) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.getConstValue(
		com.zeligsoft.domain.omg.corba.dsl.idl.ConstExp);

String getConstValue(PrimaryExpr exp) :
	"(" + getConstValue(exp.exp) + ")";
	
String getConstValue(Literal exp) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.getConstValue(
		com.zeligsoft.domain.omg.corba.dsl.idl.Literal);
		
String getConstValue(ScopedName exp) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.getConstValue(
		com.zeligsoft.domain.omg.corba.dsl.idl.ScopedName);

create CXEnum visitContained(EnumType enum, CXInterface interface ) :
	interface.contents.add(this) ->
	this.configureEnum(enum);

create CXEnum visitContained(EnumType enum, CXModule module ) :
	module.contents.add(this) ->
	this.configureEnum(enum);
	
private create CXEnum visitContained(EnumType enum, uml::Package package) :
	package.packagedElement.add(this) ->
	this.configureEnum(enum);
	
Void configureEnum(CXEnum zEnum, EnumType enum ) :
	zEnum.setName(enum.name) ->
	zEnum.addLiterals(enum);
	
Void addLiterals(CXEnum zdlEnum, EnumType idlEnum ) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addLiterals(		
		org.eclipse.uml2.uml.Enumeration,
		com.zeligsoft.domain.omg.corba.dsl.idl.EnumType);
 
create uml::DataType visitContained(TypeDeclarator typedef, CXInterface interface) :
	// could be a typedef, a sequence, or an array.
	interface.zdlAsInterface().nestedClassifier.add(this) ->
	this.setName(typedef.declarators.get(0).id) ->
	this.applyTypedefConcept(typedef);
	
create uml::DataType visitContained(TypeDeclarator typedef, CXModule module) :
	// could be a typedef, a sequence, or an array.
	module.zdlAsPackage().packagedElement.add(this) ->
	this.setName(typedef.declarators.get(0).id) ->	
	this.applyTypedefConcept(typedef);	

private create uml::DataType visitContained(TypeDeclarator typedef, uml::Package package) :
	// could be a typedef, a sequence, or an array.
	package.packagedElement.add(this) ->
	this.setName(typedef.declarators.get(0).id) ->	
	this.applyTypedefConcept(typedef);	
	
Void applyTypedefConcept(uml::DataType datatype, TypeDeclarator typedef) :	
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.applyTypedefConcept(org.eclipse.uml2.uml.DataType, 
		com.zeligsoft.domain.omg.corba.dsl.idl.TypeDeclarator);

create CXUnion visitContained(UnionType union, CXInterface interface) :
	interface.contents.add(this) ->
	union.isAppendable?
	  this.setExtensibility(ExtensibilityKind::Appendable) :
	  this.setExtensibility(ExtensibilityKind::Final) ->
	this.setName(union.name) ->
	this.addCORBAUnionAttributes(union);

create CXUnion visitContained(UnionType union, CXModule module) :
	module.contents.add(this) ->
	union.isAppendable?
	  this.setExtensibility(ExtensibilityKind::Appendable) :
	  this.setExtensibility(ExtensibilityKind::Final) ->	
	this.setName(union.name) ->
	this.addCORBAUnionAttributes(union);

create CXUnion visitContained(UnionType union, uml::Package package) :
	package.packagedElement.add(this) ->
	union.isAppendable?
	  this.setExtensibility(ExtensibilityKind::Appendable) :
	  this.setExtensibility(ExtensibilityKind::Final) ->
	this.setName(union.name) ->
	this.addCORBAUnionAttributes(union);
	
Void addCORBAUnionAttributes(CXUnion zdlUnion, UnionType idlUnion) :
	JAVA com.zeligsoft.domain.omg.corba.idlimport.XtendUtils.addCORBAUnionAttributes(
		org.eclipse.uml2.uml.DataType,
		com.zeligsoft.domain.omg.corba.dsl.idl.UnionType);
		
create Native visitContained(NativeType native, CXModule module) :
	module.contents.add(this) ->
	this.setName(native.name);
	
create Native visitContained(NativeType native, CXInterface interface) :
	interface.contents.add(this) ->
	this.setName(native.name);