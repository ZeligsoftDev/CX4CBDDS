/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import CXDomain::IDL;
import CCM::CCM_Component;
import IDL3Plus::Connectors;
import IDL3Plus::Generics;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import idl;

extension com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::mainTransform;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::scopedNames;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::CCM_IDL_Utils;
extension com::zeligsoft::domain::idl3plus::generator::xtend::annotations;
extension com::zeligsoft::domain::idl3plus::generator::xtend::metamodel;
extension com::zeligsoft::domain::idl3plus::generator::xtend::utils;
extension com::zeligsoft::domain::idl3plus::generator::xtend::IDL3Plus_Utils;
extension com::zeligsoft::domain::idl3plus::generator::xtend::idl3PlusTransform;

around com::zeligsoft::domain::omg::ccm::generator::extensions::mainTransform::componentBody(idl::ComponentDecl this, CCMComponent component) :
	ctx.proceed() ->
	this.export.addAll(component.zdlAsComponent().ownedElement.typeSelect(InterfacePort).select(port | port.hasCSL).portCSLDecl());

around com::zeligsoft::domain::omg::ccm::generator::extensions::mainTransform::visitContained(CCM::CCM_Component::InterfacePort self) :
	if self.isUser() then { self.usesPort() } 
	else if self.isProvider() then { self.providesPort() }
	else if (!self.isProvider() && !self.isUser()) then {
		self.portDecl() 
	};
	
around com::zeligsoft::domain::omg::ccm::generator::extensions::mainTransform::visitContained(CCM::CCM_Component::EventPort self) :
	if self.isPublisher() then { self.publishesPort() }
	else if self.isConsumer() then { self.consumesPort() }
	else if (!self.isPublisher() && !self.isConsumer()) then {
		self.portDecl()
	};

around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(ZMLMM::ZML_Core::Type self, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(self), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;

/**
* Produce a scoped name for a CX Interface
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXInterface intf, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(intf), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;

/**
* Produce a scoped name for a CX Typedef
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXTypeDef typedef, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(typedef), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;

/**
* Produce a scoped name for a CX Sequence
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXSequence seq, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(seq), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
/**
* Produce a scoped name for a CX Array
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXArray array, CXNamedElement element) :
    let newScopedName = new ScopedName :
    	newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(array), scopedNameFromNamedElementForIDL3(element))
    	-> newScopedName;

/**
* Produce a scoped name for a CX Struct
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXStruct struct, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(struct), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
	
/**
* Produced a scoped name for a CX Exception
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXException exception, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(exception), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
/**
* Produce a scoped name for a CX Enum
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXEnum enum, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(enum), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;

/**
* Produce a scoped name for a CX Union
*/
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXUnion union, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(union), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXString cString, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(cString), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::toScopedName(CXWString cString, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(cString), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
around com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform::unhandledScopedName(Object o, CXNamedElement element ) :	
	toScopedNameLocal(o, element);
	
ScopedName toScopedNameLocal(emf::EObject o, CXNamedElement element ) :
	let newScopedName = new ScopedName :
		newScopedName;
	
ScopedName toScopedNameLocal(TemplateParameterType t, CXNamedElement element ) :
	let newScopedName = new ScopedName :
		newScopedName.name.add(t.zdlAsNamedElement().name) ->
		newScopedName;