/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import CXDomain::IDL;
import CCM::CCM_Component;
import IDL3Plus::Connectors;
import IDL3Plus::Generics;
import IDL3Plus::IDL3Plus;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CCM::CCM_Implementation;
import idl;

extension org::eclipse::xtend::util::stdlib::issues;
extension com::zeligsoft::domain::omg::corba::codegen::xtend::mainTransform;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::mainTransform;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::scopedNames;
extension com::zeligsoft::domain::omg::ccm::generator::extensions::CCM_IDL_Utils;
extension com::zeligsoft::domain::idl3plus::generator::xtend::annotations;
extension com::zeligsoft::domain::idl3plus::generator::xtend::metamodel;
extension com::zeligsoft::domain::idl3plus::generator::xtend::utils;
extension com::zeligsoft::domain::idl3plus::generator::xtend::IDL3Plus_Utils;

	
create idl::PortDecl portDecl(CCM::CCM_Component::InterfacePort self) :
	this.setName(self.zdlAsPort().name) ->
	this.setType(self.type.toScopedName(getCORBAContainer(self))) ->
	this.setIsMirror(self.isConjugated) ->
	this.comments.addAll(self.zdlAsPort().ownedComment.visitComment());

idl::ComponentExport portCSLDecl(CCM::CCM_Component::InterfacePort self ) :
	self.isConjugated ? createUsesPortCSL(self) : createProvidesPortCSL(self);
	
create idl::ProvidesDcl createProvidesPortCSL(CCM::CCM_Component::InterfacePort self) :
	this.setName(self.zdlAsPort().name + "_CSL") ->
	this.setType(this.createPortCSLDeclScopedName()) ->
	this.comments.addAll(self.zdlAsPort().ownedComment.visitComment());

create idl::UsesDcl createUsesPortCSL(CCM::CCM_Component::InterfacePort self) :
	this.setName(self.zdlAsPort().name + "_CSL") ->
	this.setType(this.createPortCSLDeclScopedName()) ->
	this.setIsMultiple(self.zdlAsPort().isMultivalued()) ->
	this.comments.addAll(self.zdlAsPort().ownedComment.visitComment());


create idl::ScopedName createPortCSLDeclScopedName(idl::ComponentExport port) :
	this.name.add("CCM_DDS::ConnectorStatusListener");

	
/*********************
 * Port Type
 *********************/
create idl::PortTypeDecl visitContained(ExtendedPortType self) :
	this.setName(self.zdlAsNamedElement().name) ->
	self.zdlAsClass().interfaceRealization.setPortExportProvides(this) ->
	self.getPortTypeUses().setPortExportUses(this) ->
	this.exports.addAll(self.ownedAttribute.visitContained()) ->
	this.comments.addAll(self.zdlAsClass().ownedComment.visitComment());
	
private Void setPortExportProvides(NamedElement self, idl::PortTypeDecl port) :
	port.exports.add(self.providesPort());


private Void setPortExportUses(NamedElement self, idl::PortTypeDecl port) :
	port.exports.add(self.usesPort());

private create idl::UsesDcl usesPort(NamedElement self) :
	this.setName(self.name) ->
	this.comments.addAll(self.zdlAsUsage().ownedComment.visitComment()) ->
	this.setType(self.zdlAsUsage().supplier.first().toScopedName(getCORBAContainer(self)));
	
private create idl::ProvidesDcl providesPort(NamedElement self) :
	this.setName(self.name) ->
	this.comments.addAll(self.zdlAsInterfaceRealization().ownedComment.visitComment()) ->
	this.setType(self.zdlAsInterfaceRealization().contract.toScopedName(getCORBAContainer(self)));

create idl::TemplateModuleInst visitContained(ModuleInstantiation self) :
	this.setName(self.name) ->
	this.comments.addAll(self.zdlAsPackage().ownedComment.visitComment()) ->
	this.setType(self.moduleBinding.template.eContainer.toScopedName(getCORBAContainer(self))) ->
	this.parameter.addAll(self.moduleBinding.parameterBinding.type.toScopedName(getCORBAContainer(self)));


create idl::TemplateModule visitContained(TemplateModule self) :
	this.setName(self.zdlAsNamedElement().name) ->
	this.parameters.addAll(self.signature.typeParameter.formalParameter()) ->
	this.definitions.addAll(self.zdlAsPackage().packagedElement.visitTemplateContained());

idl::TypeDeclarator visitTemplateContained(CXTypeDef zTypeDef) :
	visitContained(zTypeDef);

List visitTemplateContained(CXConstants zConstants):
	visitContained(zConstants);
	
idl::EnumType visitTemplateContained(CXEnum zEnum) :
	visitContained(zEnum);
	
idl::TypeDeclarator visitTemplateContained(CXSequence zSeq) :
	visitContained(zSeq);
	
idl::TypeDeclarator visitTemplateContained(CXString zString) :
	visitContained(zString);
	
idl::TypeDeclarator visitTemplateContained(CXWString zString) :
	visitContained(zString);
	
idl::TypeDeclarator visitTemplateContained(CXArray zArray) :
	visitContained(zArray);
	
idl::UnionType visitTemplateContained(CXUnion zUnion) :
	visitContained(zUnion);
	
idl::ExceptDecl visitTemplateContained(CXException zEx) :
	visitContained(zEx);
	
idl::Interface_decl visitTemplateContained(CXInterface zIntf) :
	visitContained(zIntf);
	

idl::StructType visitTemplateContained(CXStruct zStruct ) :
	visitContained(zStruct);
	
idl::NativeType visitTemplateContained(Native zNative) :
	visitContained(zNative);
	
idl::EventDcl visitTemplateContained(CCM::CCM_Component::Event zSelf) :
	visitContained(zSelf);
	
idl::ComponentDecl visitTemplateContained(CCMComponent zSelf) :
	visitContained(zSelf);
	
idl::HomeDecl visitTemplateContained(Home zSelf) :
	visitContained(zSelf);
	
idl::Connector visitTemplateContained(ConnectorDef zSelf) :
	visitContained(zSelf);
	
idl::PortTypeDecl visitTemplateContained(PortType zSelf) :
	visitContained(zSelf);
	
create idl::TemplateModuleRef visitTemplateContained(ModuleInstantiation zSelf ) :
	this.setName(zSelf.name) ->
	this.setType(zSelf.moduleBinding.template.eContainer.toScopedName(getCORBAContainer(zSelf))) ->
	this.id.addAll(zSelf.moduleBinding.parameterBinding.type.zdlAsNamedElement().name);
	
//filter out the uses port under porttype
Void visitTemplateContained(uml::Usage zSelf) :
	{}; 
	
create idl::FixedModule visitTemplateContained(CXModule zModule) :
	setName(zModule.name) ->
	this.definitions.addAll(zModule.zdlAsPackage().packagedElement.visitTemplateContained());
	
create idl::FormalParameter formalParameter(TypeParameter self) :
	this.setName(self.getTypeParameterName()) ->
	this.setFormalParameterType(self.constraint.toString());
	
private Void setFormalParameterType(idl::FormalParameter self, String type) :
	switch (type) {
	case "typename" : self.setType(new idl::TypenameParamType)
	case "interface" : self.setType(new idl::InterfaceParamType)
	case "valuetype" : self.setType(new idl::ValuetypeParamType)
	case "eventtype" : self.setType(new idl::EventParamType)
	case "struct" : self.setType(new idl::StructParamType)
	case "union" : self.setType(new idl::UnionParamType)
	case "exception" : self.setType(new idl::ExceptionParamType)
	case "enum" : self.setType(new idl::EnumParamType)
	case "sequence" : self.setType(new idl::SequenceParamType)
	case "const" : self.setType(new idl::ConstParamType)
	default : Void
};


create idl::Connector visitContained(ConnectorDef self) :
	this.connectorHeader(self) ->
	this.connectorBody(self);
	
create idl::ConnectorHeader connectorHeader(idl::Connector connector, ConnectorDef self) :
	this.setName(self.zdlAsNamedElement().name) ->
	if hasBaseConnector(self) then this.setBase(self.baseConnector().toScopedName(getCORBAContainer(self))) ->
	connector.setHeader(this);
	
private Void connectorBody(idl::Connector this, ConnectorDef connector) :
	this.exports.addAll(connector.zdlAsComponent().ownedElement.visitContained());
	
idl::ScopedName toScopedName(ConnectorDef self, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(self), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;

idl::ScopedName toScopedName(ExtendedPortType self, CXNamedElement element ) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(self), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
	
idl::ScopedName toScopedName(CXType self, CXNamedElement element ) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(self), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
idl::ScopedName toScopedName(CXType self) :
	let newScopedName = new ScopedName :
		newScopedName.name.add(scopedNameFromNamedElementForIDL3(self)) ->
		newScopedName;


idl::ScopedName toScopedName(TemplateModule self, CXNamedElement element) :
	let newScopedName = new ScopedName :
		newScopedName.getScopedName(scopedNameFromNamedElementForIDL3(self), scopedNameFromNamedElementForIDL3(element))
		-> newScopedName;
		
idl::ScopedName toScopedName(TypedElement self) :
	let newScopedName = new ScopedName :
		newScopedName.name.add(self.toString()) ->
		newScopedName;
		
	