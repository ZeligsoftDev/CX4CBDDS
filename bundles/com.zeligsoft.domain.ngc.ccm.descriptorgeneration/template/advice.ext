/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import xmischema; 
import deploymentplan;
import IDL3Plus::Connectors;
import IDL3Plus::IDL3Plus;
import CCM::CCM_Component;
import CCM::CCM_Deployment;
import CCM::CCM_Implementation;
import CCM::CCM_Target;
import CXDomain::IDL;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;


extension org::eclipse::xtend::util::stdlib::issues;
extension com::zeligsoft::domain::omg::ccm::descriptorgenerator::utils::cdpgenerator;
extension com::zeligsoft::domain::omg::ccm::descriptorgenerator::utils::util;

/*
 * Need an advice for getAssemblyImpl to trigger our rule for ConnectorDefaultValueBinding, which CCM does not know about.
 */
around com::zeligsoft::domain::omg::ccm::descriptorgenerator::utils::cdpgenerator::getAssemblyImpl(NamedElement self) :
	self.packagedElement().typeSelect(AssemblyImplementation).union(self.nestedPackage().getAssemblyImpl());

/*
 * Harmlessly return.
 */
cached List[AssemblyImplementation] getAssemblyImpl(ConnectorDefaultValueBinding self) :
	{};
	
/*
 * Structs may need different logic if they point to connector defs
 */
around com::zeligsoft::domain::omg::ccm::descriptorgenerator::utils::cdpgenerator::createStructValue(DataValue structValue, uml::InstanceValue valueSpec) :
	let struct = valueSpec.instance.zdlAsInstanceSpecification().classifier :
	struct.members.createStructValue(structValue, valueSpec);
	
Void createStructValue(CXField field, DataValue structValue, uml::InstanceValue valueSpec ) : 
	let slot = valueSpec.instance.zdlAsInstanceSpecification().slot.selectFirst( slot | slot.definingFeature == field) :
	if( slot != null ) then slot.createValueMember(structValue) else
	{
		let connectorType = valueSpec.eContainer.eContainer.zdlAsInstanceSpecification().classifier.first() :
		let defaultSlot = findDefaultSlot(field, connectorType) :
		if( defaultSlot != null ) then defaultSlot.createValueMember(structValue) 
	};

uml::Slot findDefaultSlot(CXField field, ComponentInterface connector) :
	JAVA com.zeligsoft.domain.idl3plus.utils.IDL3PlusXtendUtils.findDefaultSlot(
		org.eclipse.uml2.uml.Property,
		org.eclipse.uml2.uml.Component);

uml::Slot findDefaultSlot(CXField attribute, ExtendedPortType ept) :
	null;