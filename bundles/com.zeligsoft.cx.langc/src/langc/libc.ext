import langc;

extension langc::debug;
extension langc::element;
extension langc::expr;
extension langc::name;
extension langc::type;

create SystemFileName fcntlName()   : setName( 'fcntl.h' );
create SystemFileName stdioName()   : setName( 'stdio.h' );
create SystemFileName stdlibName()  : setName( 'stdlib.h' );
create SystemFileName stringName()  : setName( 'string.h' );
create SystemFileName timeName()    : setName( 'time.h' );
create SystemFileName unistdName()  : setName( 'unistd.h' );
create SystemFileName sysStatName() : setName( 'sys/stat.h' );
create SystemFileName sysSelectName() : setName( 'sys/select.h' );

Name stdioPrintfName()  : stdioName().child( 'printf' );
Name stdlibNullName()   : stdlibName().child( 'NULL' );
private Name stdlibExitSuccessName()   : stdlibName().child( 'EXIT_SUCCESS' );
Name stdlibFreeName()   : stdlibName().child( 'free' );
Name stdlibMallocName() : stdlibName().child( 'malloc' );
Name stdlibSize_tName() : stdlibName().child( 'size_t' );
Name stdlibMemcpyName() : stringName().child( 'memcpy' );
Name sysSelectFDSetName()  : sysSelectName().child( 'fd_set' );
Name sysSelectSelectName() : sysSelectName().child( 'select' );
Name timeTimevalName()  : timeName().child( 'timeval' );
Name unistdCloseName()  : unistdName().child( 'close' );
Name unistdSsize_tName(): unistdName().child( 'ssize_t' );
Name unistdSleepName()  : unistdName().child( 'sleep' );

Name fcntlO_CREATName() : fcntlName().child( 'O_CREAT' );
Name fcntlO_EXCLName()  : fcntlName().child( 'O_EXCL' );
Name fcntlO_RDONLYName() : fcntlName().child( 'O_RDONLY' );
Name fcntlO_WRONLYName() : fcntlName().child( 'O_WRONLY' );
Name sysStatS_IRWXUName() : sysStatName().child( 'S_IRWXU' );

create SystemInclude stdio()  : setFilename( stdioName() );
create SystemInclude stdlib() : setFilename( stdlibName() );
create SystemInclude string() : setFilename( stringName() );

create Typedef size_t() :
    setElement( uint32() )
 -> setName( stdlibSize_tName() )
;

create Typedef ssize_t() :
    setElement( int32() )
 -> setName( unistdSsize_tName() )
;

private create Macro nullDefinition() :
    setName( stdlibNullName() )
 -> setReplacement( 0.literal() )
;

private create Macro exitSuccessDefinition() :
    setName( stdlibExitSuccessName() )
 -> setReplacement( 0.literal() )
;

private create Struct fd_set() :
    setName( sysSelectFDSetName() )
;

private create Struct timeval() :
    setName( timeTimevalName() )
;

private create Function close() :
    setName( unistdCloseName() )
 -> setReturnType( void() )
 -> addParameter( int32(), 'fd' )
;

private create Function malloc() :
    setName( stdlibMallocName() )
 -> setReturnType( void().ptr() )
 -> addParameter( int32(), 'size' )
;

private create Function memcpy() :
    setName( stdlibMemcpyName() )
 -> setReturnType( void().ptr() )
 -> addParameter( void().ptr(), 'dst' )
 -> addParameter( void().ptr(), 'src' )
 -> addParameter( size_t(), 'size' )
;

private create Function free() :
    setName( stdlibFreeName() )
 -> setReturnType( void() )
 -> addParameter( void().ptr(), 'mem' )
;

private create Function sleep() :
    setName( unistdSleepName() )
 -> setReturnType( uint32() )
 -> addParameter( uint32(), 'seconds' )
;

private create Function sys_select() :
    setName( sysSelectSelectName() )
 -> addParameter( int32(), 'nfds' )
 -> addParameter( fd_set().ptr(), 'readfds' )
 -> addParameter( fd_set().ptr(), 'writefds' )
 -> addParameter( fd_set().ptr(), 'exceptfds' )
 -> addParameter( timeval().ptr(), 'timeout' )
;

private create Function printf() :
    setName( stdioPrintfName() )
 -> setReturnType( int32() )
 -> addParameter( char().const().ptr(), 'fmt' )
;

cached Function createMain( Name filename ) :
    let f = function( int32(), filename.child( 'main' ) ) :
        f.setLinkage( extern() )
     -> f.setKind( implOnly() )
     -> f.setReturnType( int32() )
     -> f.addParameter( int32(), 'argc' )
     -> f.addParameter( char().const().ptr().array(), 'argv' )
     -> f
;

Expression NULL() :
    nullDefinition().name.access()
;


Expression EXIT_SUCCESS() :
    exitSuccessDefinition().name.access()
;

Expression close( Expression fd ) :
    let e = new FunctionCall :
        e.setFunction( close() )
     -> e.arguments.add( fd )
     -> e
;

Expression malloc( Element element ) :
    let e = new FunctionCall :
        e.setFunction( malloc() )
     -> e.arguments.add( element.sizeof() )
     -> e.cast( element.ptr() )
     -> e
;

Expression malloc( ElementReference ref, Expression size ) :
    let e = new FunctionCall :
        e.setFunction( malloc() )
     -> e.arguments.add( size )
     -> e.cast( ref )
     -> e
;

Expression memcpy( Expression dst, Expression src, Expression size ) :
    let e = new FunctionCall :
        e.setFunction( memcpy() )
     -> e.arguments.add( dst )
     -> e.arguments.add( src )
     -> e.arguments.add( size )
     -> e
;

Expression free( Expression mem ) :
    let e = new FunctionCall :
        e.setFunction( free() )
     -> e.arguments.add( mem )
     -> e
;

Expression sleep( Expression seconds ) :
    let e = new FunctionCall :
        e.setFunction( sleep() )
     -> e.arguments.add( seconds )
     -> e
;

Expression sys_select( Expression max_fd, Expression readfds ) :
    let e = new FunctionCall :
        e.setFunction( sys_select() )
     -> e.arguments.add( max_fd )
     -> e.arguments.add( readfds )
     -> e.arguments.add( NULL() )
     -> e.arguments.add( NULL() )
     -> e.arguments.add( NULL() )
     -> e
;

FunctionCall printf( String fmt ) :
    let e = new FunctionCall :
        e.setFunction( printf() )
     -> e.arguments.add( ( fmt + '\\n' ).literal() )
     -> e
;

FunctionCall printf( String fmt, Expression arg1 ) :
    let e = printf( fmt ) :
        e.arguments.add( arg1 )
     -> e
;

FunctionCall printf( String fmt, Expression arg1, Expression arg2 ) :
    let e = printf( fmt ) :
        e.arguments.add( arg1 )
     -> e.arguments.add( arg2 )
     -> e
;

FunctionCall printf( String fmt, Expression arg1, Expression arg2, Expression arg3 ) :
    let e = printf( fmt ) :
        e.arguments.add( arg1 )
     -> e.arguments.add( arg2 )
     -> e.arguments.add( arg3 )
     -> e
;

FunctionCall printf( String fmt, Expression arg1, Expression arg2, Expression arg3, Expression arg4 ) :
    let e = printf( fmt ) :
        e.arguments.add( arg1 )
     -> e.arguments.add( arg2 )
     -> e.arguments.add( arg3 )
     -> e.arguments.add( arg4 )
     -> e
;

private create Macro S_IRWXU_Definition() :
    setName( sysStatS_IRWXUName() )
 -> setReplacement( 0.literal() )
;

private create Macro O_CREAT_Definition() :
    setName( fcntlO_CREATName() )
 -> setReplacement( 64.literal() )
;

private create Macro O_EXCL_Definition() :
    setName( fcntlO_EXCLName() )
 -> setReplacement( 128.literal() )
;

private create Macro O_RDONLY_Definition() :
    setName( fcntlO_RDONLYName() )
 -> setReplacement( 0.literal() )
;

private create Macro O_WRONLY_Definition() :
    setName( fcntlO_WRONLYName() )
 -> setReplacement( 1.literal() )
;

Expression S_IRWXU() : S_IRWXU_Definition().name.access();

Expression O_CREAT() : O_CREAT_Definition().name.access();
Expression O_EXCL()  : O_EXCL_Definition().name.access();
Expression O_RDONLY() : O_RDONLY_Definition().name.access();
Expression O_WRONLY() : O_WRONLY_Definition().name.access();
