
import langc;

Boolean generate( ElementList elementList, String destProjectName ) :
    JAVA com.zeligsoft.cx.langc.m2t.M2TGenerator.generate(com.zeligsoft.cx.langc.ElementList, java.lang.String)
;

Boolean openEditors( ElementList elementList, String destProjectName, Object element, Object desc ) :
    JAVA com.zeligsoft.cx.langc.m2t.M2TGenerator.openEditors(com.zeligsoft.cx.langc.ElementList, java.lang.String, java.lang.Object, java.lang.Object)
;

Void BlankLine() : ' 0BLANKLINE' ;
Void cToken(Structure s) : 'struct' ;
Void cToken(Struct s) : 'struct' ;
Void cToken(Union u) : 'union' ;

Boolean isIndirect( ElementReference ref ) :
    ref.pointerSpec.size > 0 || ref.element.isIndirect()
;

Boolean isIndirect( NamedReference ref ) :
    ref.type != null
        ? ref.type.isIndirect()
        : ( ref -> false )
;

Boolean isIndirect( VariableDeclaration var ) :
    var.element.isIndirect()
;

Boolean isIndirect( Element element ) : false;
Boolean isIndirect( FunctionPointer functionPointer ) : true;

Boolean isIndirect( Expression expr ) :
    expr.type == null
        ? ( expr -> true )
        : expr.type.isIndirect()
;

String cToken(CVQualifier qualifier) :
    switch( qualifier.toString() )
    {
    case 'const'    : "const"
    case 'volatile' : "volatile"
    default : ''
    }
;

String cToken_l(List[Pointer] ptrs) :
    ptrs.cToken()
;

String cToken(Pointer pointer) :
    switch( pointer.toString() )
    {
    case 'pointer'          : '*'
    case 'const_pointer'    : '* const'
    case 'volatile_pointer' : '* volatile'
    case 'const_volatile_pointer' : '* const volatile'
    default : ''
    }
;

String cToken(Operator op) :
    switch( op.toString() )
    {
    case 'add'      : "+"
    case 'subtract' : "-"
    case 'assign'   : "="
    case 'bitwise_or'  : "|"
    case 'bitwise_and' : "&"
    default : "[UNKNOWN_BINARY_OPERATOR]"
    }
;

String cToken(BooleanOperator op) :
    switch( op.toString() )
    {
    case 'less_than'          : "<"
    case 'greater_than'       : ">"
    case 'less_than_equal'    : "<="
    case 'greater_than_equal' : ">="
    case 'equivalent'         : "=="
    case 'not_equivalent'     : "!="
    default : "[UNKNOWN_BOOLEAN_OPERATOR]"
    }
;

String cToken(LinkageSpec linkage) :
    switch( linkage.toString() )
    {
    case 'static' : "static"
    case 'extern' : "extern"
    default : ''
    }
;

String header(LinkageSpec linkage) :
    switch( linkage.toString() )
    {
    case 'static' : "static "
    case 'extern' : "extern "
    default : ''
    }
;

String impl(LinkageSpec linkage) :
    switch( linkage.toString() )
    {
    case 'static' : "static "
    default : ''
    }
;    

String cToken(PrimitiveType type) :
    switch( type.toString() )
    {
    case 'int8' : "char"
    case 'int16' : "short"
    case 'int32' : "int"
    case 'uint8' : "unsigned char"
    case 'uint16' : "unsigned short"
    case 'uint32' : "unsigned int"
    default : type.toString()
    }
;

String cppIdentifier(String identifier) :
    identifier.replaceAll( "-", "_" )
;

String cppIdentifier(Name name) :
    cppIdentifier(name.name)
;

String asCPPMacro(Name name) :
    ( name.parent == null )
        ? ( cppIdentifier(name).toUpperCase() )
        : ( asCPPMacro(name.parent) + '_' + cppIdentifier(name).toUpperCase() )
;

String Relative(Void noName)          : '';
String Relative(Name name)            : name.name;
String Relative(NamedElement element) : element.name.Relative();
String Relative(String name)          : name;

Void resetBindings() :
    JAVA com.zeligsoft.cx.langc.util.Namespace.reset()
;

Boolean needsParens( Expression expr, int neighbouringPrecendence ) :
    expr.precendence < neighbouringPrecendence
;
