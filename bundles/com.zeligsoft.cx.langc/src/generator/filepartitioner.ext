import langc;

extension langc::debug;
extension langc::element;

ElementList resolveDependencies( ElementList elementList ) :
    elementList.elements.resolveDeps( elementList )
 -> elementList
;

// TODO This rule can look at the type of reference to determine whether a #include or
//      just a forward decl is required.  For now it always does a #include.
// TODO This body is wrong, it should make the dep to the element.name.parent file.
private DependencyList resolveInto( ElementReference ref, DependencyList depList ) :
    ref.element.resolveNameInto( depList )
 -> ref.arrayBounds.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( Void noInstance, DependencyList depList ) :
    depList
;

private DependencyList resolveInto( NamedReference ref, DependencyList depList ) :
    ref.type.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( Function function, DependencyList depList ) :
    function.returnType.resolveInto( depList )
 -> function.parameters.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( FunctionImplementation impl, DependencyList depList ) :
    ( impl.function.kind.toString() == implOnly().toString()
        ? null
        : impl.function.resolveNameInto( depList ) )
 -> impl.function.resolveInto( depList )
 -> impl.body.resolveInto( depList )
 -> depList
;

// TODO Need to create rules to resolve expressions, and then resolve the body
private DependencyList resolveInto( CodeBlock block, DependencyList depList ) :
    block.statements.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( Statement stmt, DependencyList depList ) :
    depList
;

private DependencyList resolveInto( ExpressionStatement stmt, DependencyList depList ) :
    stmt.expr == null
        ? depList
        : stmt.expr.resolveInto( depList )
;

private DependencyList resolveInto( SwitchStatement stmt, DependencyList depList ) :
    stmt.condition.resolveInto( depList )
 -> stmt.clauses.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( ConditionalStatement stmt, DependencyList depList ) :
    stmt.condition.resolveInto( depList )
 -> stmt.statements.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( WhileStatement stmt, DependencyList depList ) :
    stmt.condition.resolveInto( depList )
 -> stmt.statements.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( VariableDeclarationStatement varDeclStmt, DependencyList depList ) :
    varDeclStmt.variable.element.resolveInto( depList )
 -> varDeclStmt.variable.initializer.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( Expression expr, DependencyList depList ) :
    depList
;

private DependencyList resolveInto( AddressOfExpr addrOf, DependencyList depList ) :
    addrOf.expr.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( DereferenceExpr deref, DependencyList depList ) :
    deref.expr.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( FunctionCall call, DependencyList depList ) :
    call.function.resolveNameInto( depList )
 -> call.arguments.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( CastExpr cast, DependencyList depList ) :
    cast.targetType.resolveInto( depList )
 -> cast.expr.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( ElementAccess access, DependencyList depList ) :
    access.name.resolveNameInto( depList )
 -> depList
;

private DependencyList resolveInto( MemberAccess access, DependencyList depList ) :
    access.name.resolveNameInto( depList )
 -> access.container.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( IndexExpr expr, DependencyList depList ) :
    expr.array.resolveInto( depList )
 -> expr.index.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( BlockInitializer init, DependencyList depList ) :
    init.exprs.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( BinaryOperation expr, DependencyList depList ) :
    expr.lhs.resolveInto( depList )
 -> expr.rhs.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( LogicalComparison expr, DependencyList depList ) :
    expr.lhs.resolveInto( depList )
 -> expr.rhs.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( SizeofType expr, DependencyList depList ) :
    expr.element.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( SizeofExpr expr, DependencyList depList ) :
    expr.expr.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( SwitchClause clause, DependencyList depList ) :
    clause.statements.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( LabeledClause clause, DependencyList depList ) :
    clause.labels.resolveInto( depList )
 -> clause.statements.resolveInto( depList )
 -> depList
;

private DependencyList resolveInto( CodeBlob blob, DependencyList depList ) :
    depList.add( blob.dependencies )
 -> depList
;

// Only NamedElement's have names.
private DependencyList resolveNameInto( Element element, DependencyList depList ) :
    depList
;

private DependencyList resolveNameInto( NamedElement element, DependencyList depList ) :
    element.name.resolveNameInto( depList )
 -> depList
;

private DependencyList resolveNameInto( Name name, DependencyList depList ) :
    name == null || name.parent == null
        ? depList
        : name.resolveParentNameInto( name.parent, depList )
;

private DependencyList resolveNameInto( FileName name, DependencyList depList ) :
    name == null
        ? depList
        : ( depList.add( depList.createInclude( name ) )
            -> depList )
;

private DependencyList resolveParentNameInto( Name name, Name parentName, DependencyList depList ) :
    parentName.resolveNameInto( depList )
;

private DependencyList resolveParentNameInto( Name name, FileName parentName, DependencyList depList ) :
    name.eContainer.isHeaderNeeded()
        ? parentName.resolveNameInto( depList )
        : depList
;

/* If there's no element then a file cannot be included for it.  Otherwise include the file only
 * when the element is not implementation only. */
private boolean isHeaderNeeded( Void element ) : false;
private boolean isHeaderNeeded( Object obj ) : false;
private boolean isHeaderNeeded( Directive dir ) : true;
private boolean isHeaderNeeded( UserElement element ) : element.kind != implOnly();

// depList is only used to ensure the caching is valid
private create UserInclude createInclude( DependencyList depList, FileName name ) :
    setFilename( name )
 -> this
;

private create SystemInclude createInclude( DependencyList depList, SystemFileName name ) :
    setFilename( name )
 -> this
;

// Subclasses should override to examine their particular dependencies.  This rule should
// resolve both header and impl. dependencies.  This allows the particular element to
// decide where the dependencies should go, e.g., a public function will put its deps
// into the header file, while a file static function (private to .c file) will put them
// into the impl file.
private cached DependencyList declList( UserElement element, ElementList elementList ) :
    element.kind.toString() == implOnly().toString()
        ? elementList.defnIncludes()
        : elementList.declIncludes()
;

private cached DependencyList defnList( UserElement element, ElementList elementList ) :
    element.kind.toString() == headerOnly().toString()
        ? elementList.declIncludes()
        : elementList.defnIncludes()
;

private ElementList resolveDeps( Element element, ElementList elementList ) :
    elementList
;

private ElementList resolveDeps( Structure structure, ElementList elementList ) :
    structure.members.resolveInto( structure.declList( elementList ) )
 -> elementList
;

private ElementList resolveDeps( Function function, ElementList elementList ) :
    function.resolveInto( function.declList( elementList ) )
 -> elementList
;

private ElementList resolveDeps( FunctionImplementation impl, ElementList elementList ) :
    impl.resolveInto( impl.defnList( elementList ) )
 -> elementList
;

private ElementList resolveDeps( VariableDeclaration variable, ElementList elementList ) :
    variable.resolveNameInto( variable.defnList( elementList ) )
 -> variable.element.resolveInto( variable.declList( elementList ) )
 -> variable.initializer.resolveInto( variable.defnList( elementList ) )
 -> elementList
;

private ElementList resolveDeps( Typedef typedef, ElementList elementList ) :
    typedef.element.resolveInto( typedef.declList( elementList ) )
 -> elementList
;

private ElementList resolveDeps( FunctionPointer functionPointer, ElementList elementList ) :
    functionPointer.returnType.resolveInto( functionPointer.declList( elementList ) )
 -> functionPointer.parameters.resolveInto( functionPointer.declList( elementList ) )
 -> elementList
;
