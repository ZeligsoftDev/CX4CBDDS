/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import DDS4CCM::QoSProfiles;
import DDS::QOS;
import DDS4CCM::DDSExtensions;

Void configureTopicQoS(TopicQoS self) :
	self.durabilityServiceQoSProperty() ->
	self.transportPriorityQoSProperty() ->
	self.topciDataQoSProperty() ->
	self.resourceLimitsQoSProperty() ->
	self.reliabilityQoSProperty() ->
	self.ownershipQoSProperty() ->
	self.livelinessQoSProperty() ->
	self.historyQoSProperty() ->
	self.durabilityQoSProperty() ->
	self.destinationOrderQoSProperty() ->
	self.deadlineQoSProperty() ->
	self.latencyBudgetQoSProperty() ->
	addQoSEntity(self.eContainer, "topic_qos", self);
	
Void configureDataReaderQoS(DataReaderQoS self) :
	self.configureDataReaderWriterQoS() ->
	self.readerDataLifecycleQoSProperty() ->
	self.transportPriorityQoSProperty() ->
	self.durabilityServiceQoSProperty() ->
	self.ownershipStrengthQoSProperty() ->
	self.timeBasedFilterQosProperty() ->
	addQoSEntity(self.eContainer, "datareader_qos", self);
	
Void configureDataWriterQoS(DataWriterQoS self) :
	self.configureDataReaderWriterQoS() ->
	self.writerDataLifecycleQoSProperty() ->
	addQoSEntity(self.eContainer, "datawriter_qos", self);
	
Void configureParticipantQoS(ParticipantQoS self) :
	self.entityFactoryQoSProperty() ->
	self.userDataQoSProperty() ->
	addQoSEntity(self.eContainer, "participant_qos", self);

Void configurePublisherQoS(PublisherQoS self) :
	self.configurePublisherSubscriber() ->
	addQoSEntity(self.eContainer, "publisher_qos", self);

Void configureSubscriberQoS(SubscriberQoS self) :
	self.configurePublisherSubscriber() ->
	addQoSEntity(self.eContainer, "subscriber_qos", self);
	
private Void configureDataReaderWriterQoS(DDS4CCM::QoSProfiles::DataReaderWriterQoS self) :
	self.durabilityQoSProperty() ->
	self.destinationOrderQoSProperty() ->
	self.deadlineQoSProperty() ->
	self.historyQoSProperty() ->
	self.userDataQoSProperty() ->
	self.resourceLimitsQoSProperty() ->
	self.ownershipQoSProperty() ->
	self.livelinessQoSProperty() ->
	self.latencyBudgetQoSProperty() ->
	self.reliabilityQoSProperty();
	
private Void configurePublisherSubscriberQoS(PublisherSubscriberQoS self) :
	self.entityFactoryQoSProperty() ->
	self.presentationQoSProperty() ->
	self.groupDataQoSProperty() ->
	self.partitionQoSProperty();
	
private create qosProperty durabilityServiceQoSProperty(QoSForEntity qfe) :
	this.setName("durability_services") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty transportPriorityQoSProperty(QoSForEntity qfe) :
	this.setName("transport_priority") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty topciDataQoSProperty(QoSForEntity qfe) :
	this.setName("topic_data") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty resourceLimitsQoSProperty(QoSForEntity qfe) :
	this.setName("resource_limits") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty reliabilityQoSProperty(QoSForEntity qfe) :
	this.setName("reliability") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty ownershipQoSProperty(QoSForEntity qfe) :
	this.setName("ownership") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty durabilityQoSProperty(QoSForEntity qfe) :
	this.setName("durability") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty historyQoSProperty(QoSForEntity qfe) :
	this.setName("history") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);

private create qosProperty durabilityServiceQoSProperty(QoSForEntity qfe) :
	this.setName("durability_service") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty destinationOrderQoSProperty(QoSForEntity qfe) :
	this.setName("destination_order") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty deadlineQoSProperty(QoSForEntity qfe) :
	this.setName("deadline") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty latencyBudgetQoSProperty(QoSForEntity qfe) :
	this.setName("latency_budget") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty readerDataLifecycleQoSProperty(QoSForEntity qfe) :
	this.setName("reader_data_lifecycle") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty ownershipStrengthQoSProperty(QoSForEntity qfe) :
	this.setName("ownership_strength") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);

private create qosProperty entityFactoryQoSProperty(QoSForEntity qfe) :
	this.setName("entity_factory") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);

private create qosProperty presentationQoSProperty(QoSForEntity qfe) :
	this.setName("presentation") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);

private create qosProperty groupDataQoSProperty(QoSForEntity qfe) :
	this.setName("group_data") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty partitionQoSProperty(QoSForEntity qfe) :
	this.setName("partition") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty userDataQoSProperty(QoSForEntity qfe) :
	this.setName("user_data") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty livelinessQoSProperty(QoSForEntity qfe) :
	this.setName("liveliness") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty timeBasedFilterQosProperty(QoSForEntity qfe) :
	this.setName("time_based_filter") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create qosProperty writerDataLifecycleQoSProperty(QoSForEntity qfe) :
	this.setName("writer_data_lifecycle") ->
	qfe.qosProperty.add(this) ->
	updateAfterAdding(qfe, this);
	
private create QoSEntity addQoSEntity(QoSProfile profile, String name, QoSForEntity qfe) :
	this.setName(name) ->
	this.zdlAsProperty().setType(qfe) ->
	profile.qosEntity.add(this) ->
	updateAfterAdding(profile, this) ->
	this;
	
private Void addQoSEntity(Void profile, String name, QoSForEntity qfe) :
	Void;
	
private Void updateAfterAdding(QoSProfile profile, QoSEntity entity) :
	JAVA com.zeligsoft.domain.dds4ccm.utils.DDS4CCMUtil.addStereotypesToResource(org.eclipse.emf.ecore.EObject, org.eclipse.emf.ecore.EObject);
	
private Void updateAfterAdding(QoSForEntity qfe, qosProperty qp) :
	JAVA com.zeligsoft.domain.dds4ccm.utils.DDS4CCMUtil.addStereotypesToResource(org.eclipse.emf.ecore.EObject, org.eclipse.emf.ecore.EObject);