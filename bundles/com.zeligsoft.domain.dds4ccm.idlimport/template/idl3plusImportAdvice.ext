/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import CORBADomain::IDLFileSupport; // needed for IDLFile and similar
import CORBADomain::IDL; // needed for CORBAModule etc.
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CCM::CCM_Component;
import CCM::CCM_Implementation;
import CCM::CCM_Core;
import DDS4CCM::DDS4CCM;
import IDL3Plus::Connectors;
import IDL3Plus::Generics;
import idl; // needed for IDL DSL

extension template::ddsIdl3Import reexport;
extension template::idlimport;

extension com::zeligsoft::domain::zml::oaw::importutils::ZMLImportUtils;

around template::idlimport::visitContained(Member member, CORBAStruct struct) :
	createCORBAField(member, struct);
	
private create CORBAField createCORBAField(Member member, CORBAStruct struct) :
	struct.members.add(this) ->
	configureField(this, member) ->
	configureFieldKey(this);

private Void configureFieldKey(CORBAField field) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.configureFieldKey(org.eclipse.uml2.uml.Property);		
	
around template::idlimport::configureInterface(CORBAInterface zInterface, Interface_decl intf ) :
	zInterface.checkSynchronicity() ->
	// ctx.proceed() ->
	zInterface.setName(intf.header.name) ->
	zInterface.setIsLocal(intf.header.isLocal) ->
	zInterface.addInterfaceGeneralizations(intf) ->
	zInterface.setIsAbstract(intf.header.isAbstract) ->
	intf.interfaceBody.export.size > 0 ? intf.interfaceBody.export.visitContained(zInterface) : {};
	
Void checkSynchronicity(CORBAInterface zInterface ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.checkSynchronicity(
		org.eclipse.uml2.uml.Interface);

around template::idl3Import::configureHome(Home zHome, HomeDecl home ) :
	let pragmaName = getPragmaHome() :
	ctx.proceed() ->
	pragmaName != null ? zHome.setName(pragmaName) : {} ->
	fixHomeReference(zHome, zHome.manages.component);
	
Void fixHomeReference(Home zHome, CCMComponent supplier ) :
	{}; // already ok
	
Void fixHomeReference(Home zHome, Void supplier ) :
	zHome.manages.zdlAsDependency().setSupplier(zHome.manages.zdlAsDependency().supplier.interface) ->
	zHome.manages.setName(zHome.name + "__to__" + zHome.manages.component.name);
				
around template::idl3Import::configureComponent(CCMComponent zComponent, ComponentDecl comp ) :
	// ctx.proceed() ->
	let pragmaName = getPragmaComponent() :
	zComponent.zdlAsNamedElement().setName(comp.name) ->
	comp.export.localVisitContained(zComponent) ->
	configureComponentGeneralizations(zComponent, comp) ->
	zComponent.setPortSynchronicities() ->
	addRegisterNaming(zComponent) ->
	pragmaName != null ? {
		createMonolithicImplementation(zComponent) ->
		zComponent.setName(pragmaName)
	} : {};
	
create MonolithicImplementation createMonolithicImplementation(CCMComponent zComponent) :
	this.addToPackage(zComponent.zdlAsComponent().owner) ->
	this.setName(zComponent.name) ->
	this.setInterface(zComponent);
		
Void addToPackage(MonolithicImplementation impl, CORBAModule module ) :
	module.zdlAsPackage().packagedElement.add(impl);
	
Void addToPackage(MonolithicImplementation impl, uml::Package package) :
	package.packagedElement.add(impl);
	
Void addRegisterNaming(CCMComponent zComponent) :
	JAVA com.zeligsoft.domain.dds4ccm.utils.DDS4CCMUtil.addRegisterNamingProperty(org.eclipse.uml2.uml.Class);
	
Void setPortSynchronicities(CCMComponent zComponent ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.setPortSynchronicities(org.eclipse.uml2.uml.Component);
	
Void localVisitContained(ProvidesDcl prov, CCMComponent comp) :
	let nonCSLPort = comp.getNonCslPort(prov.name) :
	nonCSLPort == null ? visitContained(prov, comp) : nonCSLPort.setHasCSL(true);
		
Void localVisitContained(UsesDcl uses, CCMComponent comp) :
	let nonCSLPort = comp.getNonCslPort(uses.name) :
	nonCSLPort == null ? visitContained(uses, comp) : nonCSLPort.setHasCSL(true);
	
Void localVisitContained(ComponentExport export, CCMComponent comp) :
	visitContained(export, comp);

InterfacePort getNonCslPort(CCMComponent comp, String portName) :
	comp.zdlAsComponent().ownedAttribute.typeSelect(InterfacePort).selectFirst( port | port.name + "_CSL" == portName);