/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import CORBADomain::IDLFileSupport; // needed for IDLFile and similar
import CORBADomain::IDL; // needed for CORBAModule etc.
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CCM::CCM_Component;
import CCM::CCM_Core;
import DDS4CCM::DDS4CCM;
import IDL3Plus::Connectors;
import IDL3Plus::Generics;
import idl; // needed for IDL DSL

extension com::zeligsoft::base::zdl::util::ZDLUtil reexport;
extension com::zeligsoft::domain::zml::oaw::importutils::ZMLImportUtils;
extension template::idl3Import reexport;
extension template::idl3PlusImport reexport;


/**
 * This is a clone of the IDL3 main transformation, until the "organizing" rules at the end.
 */
create uml::Package mainTransform(Specification model, DDS4CCMModel zdlmodel, String idlFileName, String profileToApply) :
	idl3importInit(this, model, zdlmodel, idlFileName, profileToApply) ->
	addIdl3PlusScope() ->
	setupSynchronicityMap() ->
	model.definitions.visitContained(this) ->
    resolveUnresolvedLookups() ->
    resolveUnresolvedIdl3Lookups() ->
    //convertStateMembers() ->
    this.convertStructs() ->
    if this.getPortTypePackage().packagedElement.size == 0 then this.getPortTypePackage().destroy();
  
Void setupSynchronicityMap() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.setupSynchronicityMap();
	
/*
 * Pragma
 */
Void visitContained(Preproc_Pragma_Ciao_Ami4ccm_Interface pragma, uml::Package container) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.setAsynchronousInterface(
		java.lang.Object,
		java.lang.Object);
		
Void visitContained(Preproc_Pragma_Component pragma, uml::Package container ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.setPragmaComponent(
		com.zeligsoft.domain.omg.corba.dsl.idl.Preproc_Pragma_Component,
		java.lang.Object);
		
String getPragmaComponent() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.getPragmaComponent();

Void visitContained(Preproc_Pragma_Home pragma, uml::Package container ) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.setPragmaHome(
		com.zeligsoft.domain.omg.corba.dsl.idl.Preproc_Pragma_Home,
		java.lang.Object);
		
String getPragmaHome() :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.getPragmaHome();
	
/*
 * IDL2 CORBAModules
 */
private Void visitContained(Module module, uml::Package container ) :
	container.packagedElement.typeSelect(CORBAModule).select(e|e.name.matches(module.name)).size > 0 ?
		module.definitions.visitContained(
			container.packagedElement.typeSelect(CORBAModule).select(e|e.name.matches(module.name)).get(0)) :
		createModule(module, container); 
		
private create CORBAModule createModule(Module module, uml::Package container) :
	container.packagedElement.add(this) ->
	this.setName(module.name) ->
	module.definitions.visitContained(this);

private Void visitContained(Module module, CORBAModule container ) :
	container.contents.typeSelect(CORBAModule).select(e|e.name.matches(module.name)).size > 0 ?
		module.definitions.visitContained(
			container.contents.typeSelect(CORBAModule).select(e|e.name.matches(module.name)).get(0)) :
		createModule(module, container); 
	
private create CORBAModule createModule(Module module, CORBAModule container) :
	container.contents.add(this) ->
	this.setName(module.name) ->
	module.definitions.visitContained(this);
	 		
/*
 * Organization 
 */
create uml::Package getPortTypePackage(uml::Package pkg ) :
	this.setName("Created Port Types") ->
	pkg.packagedElement.add(this);

Void convertStateMembers(uml::Package package) :
	package.getEvents().convertStateMembers(package);
	
Void convertStateMembers(Event event, uml::Package package) :
	event.member.convertStateMember(event) ->
	event.member.zdlAsElement().destroy();
	
Void convertStateMember(StateMember member, Event event) :
	let struct = member.idlType : // Assumption: it's a CORBAStruct
	struct.members.createEventAttribute(event) ->
	struct.zdlAsElement().destroy();

Void convertStructs(uml::Package package) :
	JAVA com.zeligsoft.domain.dds4ccm.idlimport.ImportUtils.convertStructs(
		org.eclipse.uml2.uml.Package);
		
create CORBAAttribute createEventAttribute(CORBAField field, Event event ) :
	event.ownedAttribute.add(this) ->
	this.setName(field.name) ->
	this.zdlAsProperty().setType(field.idlType);