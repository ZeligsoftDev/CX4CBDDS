/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import xmischema; 
import deploymentplan;
import CCM::CCM_Component;
import CCM::CCM_Deployment;
import CCM::CCM_Implementation;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CORBADomain::IDL;

extension org::eclipse::xtend::util::stdlib::issues;
extension com::zeligsoft::domain::omg::ccm::descriptorgenerator::utils::util;
extension com::zeligsoft::domain::omg::corba::util::corbautil;


String getFileName(DeploymentPlan deployment) :
	deployment.label.first() + ".cdp.xml";

String getPropertyValue(DeploymentPart part, String propertyName) :
    let defaultValue = part.zdlAsProperty().defaultValue :
	defaultValue == null || getOverridePropertyValue(part, propertyName) == "" ?
		getDefaultPropertyValue(part, propertyName) :
		getOverridePropertyValue(part, propertyName);
	
String getPropertySlotValue(uml::InstanceValue value, String propertyName ) :
	let slot = value.instance.zdlAsInstanceSpecification().slot.selectFirst(
		slot | slot.definingFeature.name == propertyName) :
	slot == null ? "" : 
	slot.value.first().zdlAsValueSpecification().stringValue();
	
cached String getDefaultPropertyValue(DeploymentPart part, String propertyName ) :
	let property = part.modelElement.zdlAsProperty().type.zdlAsComponent().ownedAttribute.selectFirst(e | e.name == "_defaultInstance") :
	property == null || property.zdlAsProperty().defaultValue == null ? "" :
		 getPropertySlotValue(property.zdlAsProperty().defaultValue.zdlAsInstanceValue(), propertyName);

cached String getOverridePropertyValue(DeploymentPart part, String propertyName ) :
	part.zdlAsProperty().defaultValue == null ? "" :
		getPropertySlotValue(part.zdlAsProperty().defaultValue.zdlAsInstanceValue(), propertyName);

Void visitConfigProperty(uml::InstanceValue value, InstanceDeploymentDescription inst) :
	value.instance.zdlAsInstanceSpecification().slot.visitConfigProperty(inst);
	
Property visitConfigProperty(uml::Slot slot, InstanceDeploymentDescription inst, List[uml::Slot] defaultSlots) :
	let attribute = slot.definingFeature :
	let value = slot.value.first() :
	visitConfigProperty(attribute, value.zdlAsInstanceValue(), inst, defaultSlots);
	
create Property visitConfigProperty(CCM::CCM_Target::Property property, uml::InstanceValue value, InstanceDeploymentDescription inst, List[uml::Slot] defaultSlots ) :
	this.name.add(property.name) ->
	this.value.add(visitPropertyValue(property, value, inst, defaultSlots)) ->
	inst.configProperty.add(this);
	
create Any visitPropertyValue(CCM::CCM_Target::Property property, uml::InstanceValue value, InstanceDeploymentDescription inst, List[uml::Slot] defaultSlots ) :
	let ancesterSlotFeatures = createList() :
	ancesterSlotFeatures.add(property) ->
	this.type.add(visitAttributeType(property, this)) ->
	this.value.add(visitAttributeValue(property, value, property.zdlAsProperty().type.toCDPType(), ancesterSlotFeatures, defaultSlots ));
	
create DataType visitAttributeType(CCM::CCM_Target::Property property, Any obj) :
	let corbaType = property.type :
	this.kind.add(corbaType.toCDPType()) ->
	corbaType.visitSequenceType(this) ->
	corbaType.visitArrayType(this) ->
	corbaType.visitStructType(this) ->
	corbaType.visitEnumType(this) ->
	corbaType.visitBoundedStringType(this);
	
create Property visitConfigProperty(CORBAAttribute attr, uml::InstanceValue value, InstanceDeploymentDescription inst, List[uml::Slot] defaultSlots ) :
	this.name.add(attr.name) ->
	this.value.add(visitPropertyValue(attr, value, inst, defaultSlots)) ->
	inst.configProperty.add(this);
	
create Any visitPropertyValue(CORBAAttribute attr, uml::InstanceValue value, InstanceDeploymentDescription inst, List[uml::Slot] defaultSlots) :
	let ancesterSlotFeatures = attr.createList() :
	ancesterSlotFeatures.add(attr) ->
	this.type.add(visitAttributeType(attr, this)) ->
	this.value.add(visitAttributeValue(attr, value, attr.zdlAsProperty().type.toCDPType(), ancesterSlotFeatures, defaultSlots));
	
create List[emf::EObject] createList(Object o) :
	{};
	
create DataType visitAttributeType(CORBAAttribute attr, Any obj) :
	let corbaType = attr.idlType :
	this.kind.add(corbaType.toCDPType()) ->
	corbaType.visitSequenceType(this) ->
	corbaType.visitArrayType(this) ->
	corbaType.visitStructType(this) ->
	corbaType.visitEnumType(this) ->
	corbaType.visitBoundedStringType(this);

DataValue visitAttributeValue(Object o, uml::ValueSpecification value, TcKind type ) :
	let ancesterSlotFeatures = o.createList() :
	visitAttributeValue(o, value, type, ancesterSlotFeatures, null );

create DataValue visitAttributeValue(Object o, uml::ValueSpecification value, TcKind type, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots ) :
	switch(type) {
		case TcKind::tkStruct :
			value.instance.zdlAsInstanceSpecification().classifier.get(0).members.typeSelect(CORBAField).createStructValue(this, value, ancesterSlotFeatures, defaultSlots)
		case TcKind::tkSequence :
			createSequenceValue(this, value, ancesterSlotFeatures, defaultSlots)
		case TcKind::tkArray :
			createArrayValue(this, value, ancesterSlotFeatures, defaultSlots)
		default :
			setAttributeValue(this, value.stringValue(), type)
	};

Void setAttributeValue(DataValue value, String stringValue, TcKind type ) :
	switch(type) {
		case TcKind::tkWchar :
			value.string.add(stringValue)
		case TcKind::tkLong :
			value.long.add(stringValue.getIntValue())
		case TcKind::tkLonglong :
			value.longlong.add(stringValue.getLongValue())
		case TcKind::tkString :
			value.string.add(stringValue)
		case TcKind::tkWstring :
			value.string.add(stringValue)			
		case TcKind::tkFloat :
			value.float.add(stringValue.getFloatValue())
		case TcKind::tkBoolean :				
			value.boolean.add(stringValue == "true" ? true : false)
		case TcKind::tkUlong :
			value.ulong.add(stringValue.getLongValue())
		case TcKind::tkShort :
			value.short.add(stringValue.getShortValue())
		case TcKind::tkUshort :
			value.ushort.add(stringValue.getIntValue())
		case TcKind::tkDouble :
			value.double.add(stringValue.getDoubleValue())
		case TcKind::tkObjref :
			value.objref.add(stringValue)
		case TcKind::tkLongdouble :
			value.longdouble.add(stringValue.getDoubleValue())
		case TcKind::tkFixed :
			value.fixed.add(stringValue)
		case TcKind::tkEnum :
			value.enum.add(stringValue)
		default :
			value.string.add("unsupported type " + type)
	};

create NamedValue createValueMember(uml::Slot slot, DataValue value, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	value.member.add(this) ->
	this.name.add(slot.definingFeature.name) ->
	// Dynamic typing on the UML bubble will fail and slot.value.first() is considered a NamedElement.
	// So, check the type to do the correct .zdlAs conversion. 
	slot.value.first().toString().startsWith("org.eclipse.uml2.uml.internal.impl.InstanceValueImpl") ?
		this.value.add(visitAttributeValue(this, slot.value.first().zdlAsInstanceValue(), slot.definingFeature.idlType.toCDPType(), ancesterSlotFeatures, defaultSlots )) :
		this.value.add(visitAttributeValue(this, slot.value.first().zdlAsValueSpecification(), slot.definingFeature.idlType.toCDPType(), ancesterSlotFeatures, defaultSlots ));
	

Void createSequenceValue(DataValue sequenceValue, uml::ValueSpecification valueSpec, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	let sequenceInstance = valueSpec.instance:
	let memberSlot = sequenceInstance.zdlAsInstanceSpecification().slot.selectFirst(e | e.definingFeature.name == "members" || e.definingFeature.name == "member"):
	memberSlot == null ? {
		// this is old style sequence value
		let values = getSequenceValues(valueSpec.stringValue(), sequenceValue) :
		// to get the type we have to navigate to the CORBASequence and look at its members property.
		let type = valueSpec.owner.definingFeature.idlType.zdlAsDataType().ownedAttribute.first().zdlAsProperty().type.toCDPType() :
		values.select( string | sequenceValue.element.add(createSequenceElement(string, type)))
	} :	{
		let type = memberSlot.definingFeature.zdlAsProperty().type.toCDPType() :
		ancesterSlotFeatures.add(memberSlot.definingFeature) ->
		(type == TcKind::tkStruct || type == TcKind::tkArray) ?
			memberSlot.value.visitMemberInstanceValue(sequenceValue, memberSlot.definingFeature.zdlAsProperty(), type, ancesterSlotFeatures, defaultSlots) :
			memberSlot.value.visitSequenceElement(sequenceValue, type, ancesterSlotFeatures, defaultSlots)
	};

Void createArrayValue(DataValue arrayValue, uml::ValueSpecification valueSpec, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots ) :
	let arrayInstance = valueSpec.instance:
	let memberSlot = arrayInstance.zdlAsInstanceSpecification().slot.selectFirst(e | e.definingFeature.name == "members" || e.definingFeature.name == "member"):
	memberSlot == null ? {
		let values = getSequenceValues(valueSpec.stringValue(), arrayValue) :
		let type = valueSpec.owner.definingFeature.idlType.zdlAsDataType().ownedAttribute.first().zdlAsProperty().type.toCDPType() :
		values.select( string | arrayValue.element.add(createSequenceElement(string, type)))
	} :	{
		let type = memberSlot.definingFeature.zdlAsProperty().type.toCDPType() :
		ancesterSlotFeatures.add(memberSlot.definingFeature) ->
		(type == TcKind::tkStruct || type == TcKind::tkSequence) ?
			memberSlot.value.visitMemberInstanceValue(arrayValue, memberSlot.definingFeature.zdlAsProperty(), type, ancesterSlotFeatures, defaultSlots) :
			memberSlot.value.visitSequenceElement(arrayValue, type, ancesterSlotFeatures, defaultSlots)
	};

Void visitMemberInstanceValue(ZMLMM::ZML_Core::NamedElement self, DataValue value, uml::Property memberAttr, TcKind type, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	let newList = self.createList() :
	newList.addAll(ancesterSlotFeatures) ->
	newList.add(self) ->
	self.zdlAsInstanceValue().visitMemberInstanceValue(value, memberAttr, type, newList, defaultSlots);
	
Void visitMemberInstanceValue(uml::InstanceValue self, DataValue value, uml::Property memberAttr, TcKind type, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	value.element.add(visitAttributeValue(memberAttr, self, type, ancesterSlotFeatures, defaultSlots ));
		
Void visitSequenceElement(ZMLMM::ZML_Core::NamedElement self, DataValue value, TcKind type, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	let newList = self.createList() :
	newList.addAll(ancesterSlotFeatures) ->
	newList.add(self) ->
	self.zdlAsValueSpecification().visitSequenceElement(value, type, newList, defaultSlots );
				
Void visitSequenceElement(uml::ValueSpecification self, DataValue value, TcKind type, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots) :
	// don't add value for empty field if the type is not a string type
    (self.stringValue() == null || self.stringValue() == "") && !defaultSlots.isEmpty ?
    	{
    		let defaultValue = getDefaultValueForProperty(defaultSlots, ancesterSlotFeatures.get(ancesterSlotFeatures.size - 1), ancesterSlotFeatures) :
    		    (defaultValue == null || self.stringValue() == "")  && type != TcKind::tkString && type != TcKind::tkChar ? {} : 
    		    value.element.add(createSequenceElement(defaultValue, type))
    	} : 
    	{
			(self.stringValue() == null || self.stringValue() == "")  && type != TcKind::tkString && type != TcKind::tkChar ? {} :
			value.element.add(createSequenceElement(self.stringValue(), type))
		};

// Sequences can have multiple identical values so don't cache.
DataValue createSequenceElement(String value, TcKind type ) :
	let newValue = new DataValue :
	setAttributeValue(newValue, value, type) ->
	newValue;

List[String] getSequenceValues(String valueList, Object o ) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getSequenceValues(
		java.lang.String,
		java.lang.Object);
		
Void createStructValue(CORBAField field, DataValue structValue, uml::InstanceValue valueSpec, List[emf::EObject] ancesterSlotFeatures, List[uml::Slot] defaultSlots ) :
	// add missing value tag
	let slot = valueSpec.instance.zdlAsInstanceSpecification().slot.selectFirst(e | e.definingFeature == field):
	if(slot == null && !defaultSlots.isEmpty) then {
		let propertyDefaultSlot = getDefaultSlotForProperty(defaultSlots, field, ancesterSlotFeatures) :
		propertyDefaultSlot != null ? 
			propertyDefaultSlot.createValueMember(structValue, ancesterSlotFeatures, defaultSlots) :
			{ let namedVal = new NamedValue :
				structValue.member.add(namedVal) ->
				namedVal.name.add(field.name)
			}
	}else {
		slot != null ? 
			{ ancesterSlotFeatures.add(slot.definingFeature) ->
				slot.createValueMember(structValue, ancesterSlotFeatures, defaultSlots) 
			} : 
			{ let namedVal = new NamedValue :
				structValue.member.add(namedVal) ->
				namedVal.name.add(field.name)
			}
	};
	
uml::Slot getDefaultSlotForProperty(List[uml::Slot] defaultSlots, CORBAField property, List[emf::EObject] ancesterSlotFeatures) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getDefaultSlotForProperty(
	java.util.List,
	org.eclipse.uml2.uml.Property,
	java.util.List);

String getDefaultValueForProperty(List[uml::Slot] defaultSlots, Object entry, List[emf::EObject] ancesterSlotFeatures) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getDefaultValueForProperty(
	java.util.List,
	java.lang.Object,
	java.util.List);
		
Real getFloatValue(String value) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getFloatValue(java.lang.String);
	
Integer getLongValue(String value) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getLongValue(java.lang.String);
	
Integer getIntValue(String value) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getIntValue(java.lang.String);

Integer getShortValue(String value) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getShortValue(java.lang.String);
	
Double getDoubleValue(String value) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getDoubleValue(java.lang.String);

Void toCDPType(uml::Type type) :
	{};
	
Void visitSequenceType(CORBAPrimitive type, DataType dt) :
	{};

Void visitArrayType(CORBAPrimitive type, DataType dt) :
	{};

TcKind toCDPType(CORBAPrimitive type) :
	type.type.literalName().toCDPType();
	
TcKind toCDPType(CORBAString type) :
	TcKind::tkString;

TcKind toCDPType(CORBAWString type) :
	TcKind::tkWstring;
		
TcKind toCDPType(CORBAStruct type) :
	TcKind::tkStruct;
	
TcKind toCDPType(CORBASequence type) :
	TcKind::tkSequence;
	
TcKind toCDPType(CORBAArray type) :
	TcKind::tkArray;
	
TcKind toCDPType(CORBATypeDef typedef) :
	typedef.type != null ?
		toCDPType(typedef.type) :
		toCDPType(typedef.zdlAsDataType().general.first());
		
TcKind toCDPType(CORBAEnum type) :
	TcKind::tkEnum;
	
DataType visitStructType(CORBAStruct type, DataType dt) :
	let struct = new StructType :
	struct.name.add(type.name) ->
	struct.typeId.add(getRepositoryId(type)) ->
	struct.member.addAll(type.members.visitStructMember()) ->
	dt.struct.add(struct) ->
	dt;
	
Void visitStructType(CORBANamedElement elm, DataType dt) :
	{};
	
Void visitStructType(uml::Type type, DataType dt) :
	{};
	
create EnumType visitEnumType(CORBAEnum zEnum, DataType dt) :
	dt.enum.add(this) ->
	this.name.add(zEnum.name) ->
	this.typeId.add(getRepositoryId(zEnum)) ->
	this.member.addAll(zEnum.zdlAsEnumeration().ownedLiteral.getLiteralName());
	
String getLiteralName(uml::EnumerationLiteral literal) :
	literal.name;
	
Void visitEnumType(Object obj, DataType dt) :
	{};

create BoundedStringType visitBoundedStringType(CORBAString str, DataType dt) :
	dt.boundedString.add(this) ->
	this.bound.add(getBoundValue(str.bounds));

String getBoundValue(CORBABound bound) :
	(bound.value != null && bound.value != "") ? 
	bound.value : 
	bound.constant.^default;
	
Void visitBoundedStringType(Object obj, DataType dt) :
	{};	
	
StructMemberType visitStructMember(CORBAField field) :
	let member = new StructMemberType :
	member.name.add(field.name) ->
	member.type.add(field.visitMemberType()) ->
	member;
	
DataType visitMemberType(CORBAField field) :
	let type = new DataType :
	type.kind.add(field.idlType.toCDPType()) ->
	field.idlType.visitSequenceType(type) ->
	field.idlType.visitArrayType(type) ->
	field.idlType.visitStructType(type) ->
	field.idlType.visitEnumType(type) ->
	field.idlType.visitBoundedStringType(type) ->
	type;
	
Void visitSequenceType(CORBAType type, DataType dt) :
	{};

DataType visitSequenceType(CORBASequence type, DataType dt) :
	let sequence = new SequenceType :
	let seqType = new DataType :
	let corbaType = type.zdlAsDataType().ownedAttribute.selectFirst(e|e.name == "members" || e.name == "member").zdlAsProperty().type :
	seqType.kind.add(corbaType.toCDPType()) ->
	corbaType.visitStructType(seqType) ->
	corbaType.visitBoundedStringType(seqType) ->
	sequence.elementType.add(seqType) ->
	dt.sequence.add(sequence) ->
	dt;

Void visitArrayType(CORBAType type, DataType dt) :
	{};

DataType visitArrayType(CORBAArray type, DataType dt) :
	let array = new ArrayType :
	let arrayType = new DataType :
	let corbaType = type.zdlAsDataType().ownedAttribute.selectFirst(e|e.name == "members" || e.name == "member").zdlAsProperty().type :
	let bound =	type.bounds.get(0) :
	arrayType.kind.add(corbaType.toCDPType()) ->
	corbaType.visitStructType(arrayType) ->
	corbaType.visitBoundedStringType(arrayType) ->
	array.elementType.add(arrayType) ->
	array.length.add(getBoundValue(bound)) ->
	dt.array.add(array) ->
	dt;

TcKind toCDPType(String type) :
	switch(type) {
				case CORBAPrimitiveKind::CORBAWChar.literalName():
					TcKind::tkWchar
				case CORBAPrimitiveKind::CORBAVoid.literalName():
					TcKind::tkVoid
				case CORBAPrimitiveKind::CORBAUnsignedShort.literalName():
					TcKind::tkUshort
				case CORBAPrimitiveKind::CORBAUnsignedLongLong.literalName():
					TcKind::tkUlonglong
				case CORBAPrimitiveKind::CORBAUnsignedLong.literalName():
					TcKind::tkUlong
				case CORBAPrimitiveKind::CORBAShort.literalName():
					TcKind::tkShort
				case CORBAPrimitiveKind::CORBAOctet.literalName():
					TcKind::tkOctet
				case CORBAPrimitiveKind::CORBAObjectRef.literalName():
					TcKind::tkObjref
				case CORBAPrimitiveKind::CORBALongLong.literalName():
					TcKind::tkLonglong
				case CORBAPrimitiveKind::CORBALongDouble.literalName():
					TcKind::tkLongdouble
				case CORBAPrimitiveKind::CORBALong.literalName():
					TcKind::tkLong
				case CORBAPrimitiveKind::CORBAFloat.literalName():
					TcKind::tkFloat
				case CORBAPrimitiveKind::CORBADouble.literalName():
					TcKind::tkDouble
				case CORBAPrimitiveKind::CORBAChar.literalName():
					TcKind::tkChar
				case CORBAPrimitiveKind::CORBABoolean.literalName():
					TcKind::tkBoolean
				case CORBAPrimitiveKind::CORBAAny.literalName():
					TcKind::tkAny
				case CORBAPrimitiveKind::CORBAString.literalName():
					TcKind::tkString
				case CORBAPrimitiveKind::CORBAWString.literalName():
					TcKind::tkWstring
				case CORBAPrimitiveKind::CORBATypecode.literalName():
					TcKind::tkTypeCode
			default: TcKind::tkNull
	};

create MonolithicDeploymentDescription visitInstanceImpl(String id, InstanceDeploymentDescription instance) :
	this.JavaSetAttribute("idref", id);
	
Requirement createLocalInterfaceRequirement() :
	let requirement = new Requirement :
	requirement.name.add("edu.dre.vanderbilt.DAnCE.ConnectionType") ->
	requirement.resourceType.add("Local_Interface") ->
	requirement;
	
InstanceDeploymentDescription visit(DeploymentPart connEnd, String id) :
 	let instance = new InstanceDeploymentDescription :
	instance.JavaSetAttribute("idref", id) ->
	instance;


cached List[AssemblyImplementation] getAssemblyPart(Part part, List[AssemblyImplementation] assembly_impls) :
	let partDef = part.definition :
	let impl = assembly_impls.select(e|e.zdlAsComponent().generalization.general.contains(partDef)) :
	impl;
