/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


import CCM::CCM_Implementation;
import CCM::CCM_Component;
import ZMLMM::ZML_Core;
import ZMLMM::ZML_Deployments;
import CXDomain::IDL;

Void debug(Object o) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.debug(java.lang.Object);
	
Void printTime(String id) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.printTime(
		java.lang.String);
	
cached List[uml::Package] nestedPackage(uml::Package pkg) :
	pkg.nestedPackage;
	
cached List[uml::Package] nestedPackage(ZMLMM::ZML_Core::NamedElement e) :
	e.zdlAsPackage().nestedPackage;
	
cached List[uml::Package] nestedPackage(CCM::CCM_Core::CCMModel e) :
	e.zdlAsPackage().nestedPackage;
	
cached List[uml::PackageableElement] packagedElement(ZMLMM::ZML_Core::NamedElement e) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.packagedElement(org.eclipse.uml2.uml.NamedElement);
	
cached List[uml::PackageableElement] packagedElement(uml::Package pkg) :
	pkg.packagedElement;
	
cached List[uml::PackageableElement] packagedElement(CCM::CCM_Core::CCMModel pkg) :
	pkg.zdlAsPackage().packagedElement;
	
cached NamedElement getCCMPartType(CCMPart comp) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getCCMPartType(org.eclipse.uml2.uml.Property);
	

Void JavaSetAttribute(Object element, String attributeName, String attributeValue ) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.JavaSetAttribute(
		org.eclipse.emf.ecore.EObject,
		java.lang.String,
		java.lang.String);
		
String getUUID() :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getUUID();

cached String getId(Object element) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getId(org.eclipse.uml2.uml.NamedElement);

cached String getConnId(Object dataSpace, Object source, Object target, Object node) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getConnId(org.eclipse.uml2.uml.NamedElement, org.eclipse.uml2.uml.NamedElement, org.eclipse.uml2.uml.NamedElement, org.eclipse.uml2.uml.NamedElement);

cached String getFullyQualifiedName(Object element) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getFullyQualifiedName(org.eclipse.uml2.uml.NamedElement);

cached String getScopedName(Object element) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getScopedName(org.eclipse.uml2.uml.NamedElement);

cached String getCorbaScopedName(NamedElement element ) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getCorbaScopedName(org.eclipse.uml2.uml.NamedElement);

cached String getModifiedCorbaScopedName(NamedElement element, String prefix ) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getModifiedCorbaScopedName(org.eclipse.uml2.uml.NamedElement, java.lang.String);

cached String getScopedName(DeploymentPart part) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getScopedNameForDeploymentPart(org.eclipse.uml2.uml.Property);
	
cached String getScopedName(DeploymentPart part, String delimiter) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.getScopedNameForDeploymentPart(
		org.eclipse.uml2.uml.Property,
		java.lang.String);
	
cached String literalName(uml::EnumerationLiteral literal) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.literalName(org.eclipse.uml2.uml.EnumerationLiteral);

cached String literalName(CXPrimitiveKind literal) :
	JAVA com.zeligsoft.domain.omg.ccm.descriptorgenerator.utils.CDPXtendUtils.literalNameHelper(java.lang.Object);

/*
 * Qualified name of a model element that skips CXModules and
 * the top-level model element.
 */
cached String QName(ZMLMM::ZML_Core::NamedElement element ) :
	let name = _QName(element) :
	name.startsWith("/") ?
		name.subString(1, name.length) :
		name;
 
private String _QName(ZMLMM::ZML_Core::NamedElement element ) :
	element.zdlAsElement().owner != null ?
		_QName(element.zdlAsElement().owner) + "/" + element.name :
		"";
	
private String _QName(CXModule module ) :
	_QName(module.zdlAsElement().owner);
	
cached List[AssemblyImplementation] getAssemblyImpl(uml::Package self) :
	self.packagedElement().typeSelect(AssemblyImplementation).union(self.nestedPackage().getAssemblyImpl());
	
cached List[AssemblyImplementation] getAssemblyImpl(NamedElement self) :
	self.packagedElement().typeSelect(AssemblyImplementation).union(self.nestedPackage().getAssemblyImpl());

// Retrieve the assembly implementation for this component.
cached AssemblyImplementation getAssembly(CCMComponent component) :
	component.zdlAsComponent().getRelationships().typeSelect(uml::Generalization).specific.typeSelect(AssemblyImplementation);
