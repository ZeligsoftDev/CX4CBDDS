//
// This file provides some debug utilities.  Both can be called on any element in the
// language model and will return instance on which they are called.
//
// Println( String msg ) will write the argument message
// Debug()               will call toString on the receiver
// Debug( String msg )   will call toString on the receiver and append the argument message
//

import langc;

Void Inspect( int condition, Object obj ) : condition.PRIV_Inspect( obj );
Void Inspect( Object obj, int condition ) : condition.PRIV_Inspect( obj );
Void Inspect( int condition, int obj )    : condition.PRIV_Inspect( obj );
Void Inspect( int condition, Void obj )   : condition.PRIV_Inspect( obj );
Void Inspect( Void obj, int condition )   : condition.PRIV_Inspect( obj );

SubSystem   Println( SubSystem obj,   String msg ) : obj.PRIV_DebugObj( msg );
ElementList Println( ElementList obj, String msg ) : obj.PRIV_DebugObj( msg );

ElementReference Println( ElementReference obj, String msg ) : obj.PRIV_DebugObj( msg );
Element          Println( Element obj,          String msg ) : obj.PRIV_DebugObj( msg );
Name             Println( Name obj,             String msg ) : obj.PRIV_DebugObj( msg );
FileName         Println( FileName obj,         String msg ) : obj.PRIV_DebugObj( msg );

DependencyList Println( DependencyList obj, String msg ) : obj.PRIV_DebugObj( msg );
Dependency Println( Dependency obj, String msg ) : obj.PRIV_DebugObj( msg );
Expression Println( Expression obj, String msg ) : obj.PRIV_DebugObj( msg );
Statement  Println( Statement obj,  String msg ) : obj.PRIV_DebugObj( msg );

NamedReference Println( NamedReference obj, String msg ) : obj.PRIV_DebugObj( msg );


Void Debug( Void void, String msg ) : 'null ' + msg -> void;

System      Debug( System obj,      String msg ) : obj.PRIV_DebugSelf( msg );
SubSystem   Debug( SubSystem obj,   String msg ) : obj.PRIV_DebugSelf( msg );
LinkableArtifact Debug( LinkableArtifact obj,   String msg ) : obj.PRIV_DebugSelf( msg );
ElementList Debug( ElementList obj, String msg ) : obj.PRIV_DebugSelf( msg );

ElementReference Debug( ElementReference obj, String msg ) : obj.PRIV_DebugSelf( msg );
Element          Debug( Element obj,          String msg ) : obj.PRIV_DebugSelf( msg );
Name             Debug( Name obj,             String msg ) : obj.PRIV_DebugSelf( msg );
FileName         Debug( FileName obj,         String msg ) : obj.PRIV_DebugSelf( msg );

Structure       Debug( Structure obj,       String msg ) : obj.PRIV_DebugSelf( msg );
VariableDeclaration Debug( VariableDeclaration obj, String msg ) : obj.PRIV_DebugSelf( msg );
Typedef         Debug( Typedef obj,         String msg ) : obj.PRIV_DebugSelf( msg );
FunctionPointer Debug( FunctionPointer obj, String msg ) : obj.PRIV_DebugSelf( msg );

NamedElement Debug( NamedElement obj, String msg ) : obj.PRIV_DebugSelf( msg );
Function     Debug( Function obj,     String msg ) : obj.PRIV_DebugSelf( msg );

DependencyList Debug( DependencyList obj, String msg ) : obj.PRIV_DebugSelf( msg );
Dependency Debug( Dependency obj, String msg ) : obj.PRIV_DebugSelf( msg );
Expression Debug( Expression obj, String msg ) : obj.PRIV_DebugSelf( msg );
Statement  Debug( Statement obj,  String msg ) : obj.PRIV_DebugSelf( msg );

CodeBlock Debug( CodeBlock obj, String msg ) : obj.PRIV_DebugSelf( msg );
NamedReference Debug( NamedReference obj, String msg ) : obj.PRIV_DebugSelf( msg );

SwitchClause Debug( SwitchClause obj, String msg ) : obj.PRIV_DebugSelf( msg );

CastExpr Debug( CastExpr obj, String msg ) : obj.PRIV_DebugSelf( msg );


Void Debug( Void void, String msg ) : 'null' -> void;

System      Debug( System obj )      : obj.Debug( null );
SubSystem   Debug( SubSystem obj )   : obj.Debug( null );
ElementList Debug( ElementList obj ) : obj.Debug( null );

ElementReference Debug( ElementReference obj ) : obj.Debug( null );
Element          Debug( Element obj )          : obj.Debug( null );
Name             Debug( Name obj )             : obj.Debug( null );
FileName         Debug( FileName obj )         : obj.Debug( null );

NamedElement Debug( NamedElement obj ) : obj.Debug( null );
Function     Debug( Function obj ) : obj.Debug( null );

DependencyList Debug( DependencyList obj ) : obj.Debug( null );
Dependency Debug( Dependency obj ) : obj.Debug( null );
Expression Debug( Expression obj ) : obj.Debug( null );
Statement  Debug( Statement obj )  : obj.Debug( null );

CodeBlock Debug( CodeBlock obj )  : obj.Debug( null );
NamedReference Debug( NamedReference obj ) : obj.Debug( null );

SwitchClause Debug( SwitchClause obj ) : obj.Debug( null );


//
// Rules that start with 'PRIV_' are only for the implementation of the public rules, they
// should not be used by clients.
// 

private cached Boolean PRIV_isDebugEnabled() :
    JAVA com.zeligsoft.base.langc.util.Partitioner.isDebugEnabled()
;

private Void PRIV_JavaInspect( int condition, Object obj ) :
    JAVA com.zeligsoft.base.langc.util.Partitioner.inspect( java.lang.Long, java.lang.Object )
;

private Object PRIV_JavaDebugObj( Object obj, String msg ) :
    JAVA com.zeligsoft.base.langc.util.Partitioner.debug( java.lang.Object, java.lang.String )
;

private Object PRIV_Inspect( int condition, Object obj ) :
    PRIV_isDebugEnabled() ? condition.PRIV_JavaInspect( obj ) : null
;

private Object PRIV_DebugObj( Object obj, String msg ) :
    PRIV_isDebugEnabled() ? obj.PRIV_JavaDebugObj( msg ) : obj
;

private Object PRIV_DebugSelf( Object obj, String msg ) :
    PRIV_isDebugEnabled()
        ? obj.PRIV_JavaDebugObj( obj.toString() + ( msg == null ? '' : ': ' + msg ) )
        : obj
;
