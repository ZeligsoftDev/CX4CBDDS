
import langc;

extension langc::element;
extension langc::expr;
extension langc::name;
extension langc::stmt;
extension langc::type;

private create FolderName folder01() : setName( 'folder01' );
private cached FileName filename01() : folder01().child( 'filename01' );

private create FileName filename()  : setName( 'filename' );
private create FileName filenameA() : setName( 'filenameA' );
private create FileName filenameB() : setName( 'filenameB' );

create LinkableArtifact laWithSimpleFunction() :
    setName( 'la01' )
 -> rootElements.add( function( int32(), filename01().child( 'function01' ) ) )
;

create LinkableArtifact laWithDefaultFunctionImpl() :
    setName( 'la02' )
 -> rootElements.add( functionWithDefaultImpl() )
;

Function functionWithDefaultImpl() :
    let f = function( int32(), filename().child( 'function02' ) ) :
        f.addStatement( returnStmt() )
     -> f
;

create System lasWithFunctionImpls() :
    artifacts.add( la03a() )
 -> artifacts.add( la03b() )
;

// The caller function has a default implementation.  That implementation
// calls the callee function.  The callee function is implemented differently
// in each artifact.

private cached Function function03_caller() :
    let f = function( int32(), filename().child( 'function03_caller' ) ) :
        f.addStatement( function03_callee().call() )
     -> f
;

private cached Function function03_callee() :
    function( int32(), filename().child( 'function03_callee' ) )
;

private create LinkableArtifact la03a() :
    setName( 'la03a' )
 -> rootElements.add( function03_caller() )
 -> function03_callee().addStatement( this, returnStmt( 1.literal() ) )
 -> function03_callee().implementationFor( this ).setDefn( filenameA() )
;

private create LinkableArtifact la03b() :
    setName( 'la03b' )
 -> rootElements.add( function03_caller() )
 -> function03_callee().addStatement( this, returnStmt( 2.literal() ) )
 -> function03_callee().implementationFor( this ).setDefn( filenameB() )
;
