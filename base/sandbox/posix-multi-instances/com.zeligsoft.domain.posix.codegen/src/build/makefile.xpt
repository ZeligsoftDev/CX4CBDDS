�REM�

 Copyright 2018 ADLINK Technology Limited.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

�ENDREM�
�IMPORT uml�


�DEFINE generate FOR Object�

�FILE "Makefile"�

�REM�
�EXPAND copyright::generate FOR this�
�ENDREM�

#include host specific definitions
-include host.mk

# set up variables required by various includes
TOOLCHAINS:=
OBJDIR:= obj

all: prepare
	-@echo "Completed..."
	
prepare: 
	-@echo "Ready to build..."

clean: 
	-@$(RMDIR) "$(OBJDIR)" 2> $(NUL) 

rebuild: clean all

ifneq ($(MAKECMDGOALS),clean)
# include all the supported build environments
-include blds/*.mk
-include blds/extras/*.mk

# include generated sources
-include sources.mk

endif



#####################################################################

# Get the compiler flags
# NOTE: components and devices may have flags overridden by the user.

define getCompilerOptions

# $1 - tool
# $2 - build
# $3 - artifact

	CFLAGS := $$(CFLAGS_$2) $$(EXTRA_CFLAGS_$2_$3)

	CPPFLAGS := $$(CPPFLAGS_$2) $$(EXTRA_CPPFLAGS_$2_$3)

	DEFINES:= $$(DEFINES_$2) $$(EXTRA_DEFINES_$2_$3)

	UNDEFINES := $$(UNDEFINES_$2) $$(EXTRA_UNDEFINES_$2_$3)

	INCLUDES:= \
		$$(INCLUDES_$2) $$(EXTRA_INCLUDES_$2_$3) \
		$(INCLUDE_ALL) $$(INCLUDE_$3)
endef

#####################################################################

# Get the linker flags
# NOTE: components and devices may have flags overridden by the user.

define getLinkerOptions

# $1 - tool
# $2 - build
# $3 - artifact

	LDFLAGS := $$(LDFLAGS_$2) $$(EXTRA_LDFLAGS_$2_$3)

	LIBS:= $$(LIBS_$2) $$(EXTRA_LIBS_$2_$3)

	LIBPATHS := $$(LIBPATHS_$2) $$(EXTRA_LIBPATHS_$2_$3)
endef

#####################################################################

# Get the archiver flags
# NOTE: components and devices may have flags overridden by the user.

define getArchiverOptions

# $1 - tool
# $2 - build
# $3 - artifact

	ARFLAGS := $$(ARFLAGS_$2) $$(EXTRA_ARFLAGS_$2_$3)
endef

##############################################################
# templates for rules

# define build specific rules

define Rules_template

TOOL := $1
BLD := $2
ARTIFACT := $3

# only build things that are supported on this host
ifeq ($$(HOST_OS_$1),$(LOCAL_OS))

# drag in shared dependency files
-include deps/$3.dep


# for generated source
$$(OBJDIR)/$1/$2/$3/%$$(OBJEXT_$1) : src-gen/%.c
	-@$(MKDIR) "$$(dir $$@)" 2> $(NUL)
	$$(eval $$(call getCompilerOptions,$1,$2,$3))
	$$(MAKEDEPEND_$1)
	$$(CC_$1) $$(CPPFLAGS) \
		$$(foreach def,$$(DEFINES),$$(DEFOPT_$1)"$$(def)") \
   		$$(foreach und, $$(UNDEFINES),$$(UNDEFOPT_$1)"$$(und)") \
		$$(foreach inc,$$(INCLUDES),$$(INCOPT_$1)"$$(subst |, ,$$(inc))") \
		$$(CFLAGS) $$(OBJOPT_$1)$$@ $$<

# dependency file 
$$(OBJDIR)/$1/$2/$3/%$$(DEPEXT_$1):
	-@echo "$$@ needed."

$$(OBJDIR)/$1/$2/$3/%$$(LIBEXT_$1):
	-@echo ""
	-@echo "Building library $$@"
	-@echo ""
	$$(eval $$(call getArchiverOptions,$1,$2,$3))
	$$(AR_$1)  $$(ARFLAGS) $$(LIBOUTOPT_$1)$$@ $$^

$$(OBJDIR)/$1/$2/$3/%$$(EXEEXT_$1):
	-@echo ""
	-@echo "Building executable $$@"
	-@echo ""
	$$(eval $$(call getLinkerOptions,$1,$2,$3))
	$$(LD_$1) $$(LDFLAGS) \
		$$(foreach dir,$$(LIBPATHS),$$(LDLIBPATHOPT_$1)"$$(subst |, ,$$(dir))") \
		$$(foreach lib,$$(LIBS),$$(LDLIBOPT_$1)"$$(subst |, ,$$(lib))") \
		$$(LDOUTOPT_$1)"$$@" $$^

else

$$(OBJDIR)/$1/$2/$3/%$$(LIBEXT_$1):
	-@echo "NOT Building library $$@ - Host mismatch"

$$(OBJDIR)/$1/$2/$3/%$$(EXEEXT_$1:
	-@echo "NOT Building executable $$@ - Host mismatch"
endif

endef


# add build specific rulles
$(foreach toolchain,$(TOOLCHAINS), \
	$(foreach bldenv,$(BLD_$(toolchain)), \
		$(foreach art, $(ARTIFACTS), \
			$(eval $(call Rules_template,$(toolchain),$(bldenv),$(art))))))
�ENDFILE�
�ENDDEFINE�
