import langc;
import ZMLMM::ZML_Deployments;
import POSIX::POSIX;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CLanguageDomain::CLanguageDomain;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;

extension template::name;
extension template::utils;

create ElementList genCompInterfaceFile(ComponentInterface ci) :
	setName( ci.compDefIncludeFileName() )
	-> addElement(ci.compInterfaceStruct())
	-> addElement(ci.ownedPort.select(e|!e.zdlAsPort().required.isEmpty).usesPortFuncs(ci))
	-> addElement(ci.ownedPort.typeSelect(MessagePort).select(e|!e.requiredInterface.isEmpty).genUsesSendFunction(ci))
;

cached Struct compInterfaceStruct( ComponentInterface ci) :
	let attributes = ci.zdlAsComponent().attribute.select(e|{e}.typeSelect(MessagePort).isEmpty) :
	//setName(ci.compDefStructName())
	let s = struct(ci.compDefStructName()) :
	attributes.genUserMember(s)
	-> s
;

Struct genUserMember(uml::Property attr, Struct s) :
	let type = attr.getPropertyType() :
	s.addMember(type.getUserAttributeType(), attr.name)
	-> s
;

Function usesPortFuncs(Port p, ComponentInterface ci) :
	let f = function(void().ptr().const(), p.compDefPortFuncName(ci)) :
	f.setLinkage(extern())
	-> f.addParameter(ci.compInterfaceStruct().ptr().const(), 'self')
	-> f
;

Function genUsesSendFunction(MessagePort p, ComponentInterface ci) :
	p.requiredInterface.operation.genUsesSendOperation(p, ci)
;

Function genUsesSendOperation(Operation o, MessagePort p, ComponentInterface ci) :
	let f = function(void(), o.compDefUsesSendFuncName(p, ci)) :
	f.setLinkage(extern())
	-> f.addParameter(void().const().ptr(), 'src_ctx')
	-> f.parameters.addAll(o.zdlAsOperation().ownedParameter.collect(e|named(e.getParameterType().getUserAttributeType(), e.usesParamNameOperation(o, p, ci))))
	-> f
;

private cached Name usesParamNameOperation(uml::Parameter p, Operation o, MessagePort port, ComponentInterface ci) :
	let pName = new Name :
	pName.setParent(o.compDefUsesSendFuncName(port, ci))
	-> pName.setName(p.name)
	-> pName;
