import langc;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;
extension langc::debug;
extension langc::mqueue;
extension langc::util;
extension langc::libc;

extension template::name;
extension template::utils;
extension include::compInterface;

create ElementList genProcessFile(DeploymentPart dp, Deployment d) :
	setName(dp.processFileName(d))
	-> addElement(dp.getSourcePart(d))
	-> addElement(dp.genMQNameVariable(d))
	-> addElement(dp.genMQVariable(d))
	-> addElement(dp.genMQInitFunc(d))
	-> addElement(dp.genMQReleaseFunc(d))
;

langc::Enum getSourcePart(DeploymentPart dp, Deployment d) :
	let list = getSourcesForTargetPart(dp).collect(e|e.getComponentInterface().get(0).ownedPort.collect(p|p.getProcessCompPortIds(e.modelElement)).flatten()) :
	list.flatten().genCompPortIdEnum(dp, d)
;

create langc::Enum genCompPortIdEnum(List[String] id, DeploymentPart target, Deployment d) :
	let nameList = id.collect(e|e.processCompIdNames(target, d)) :
	setName(target.processCompIdEnumName(d))
	-> addEnumerator(nameList)
;

cached VariableDeclaration genMQVariable(DeploymentPart dp, Deployment d) :
	let v = variable(mqd_t(), dp.msgqName(d)) :
	v.setLinkage(extern())
	-> v.setInitializer((-1).literal())
	-> v
;

cached VariableDeclaration genMQNameVariable(DeploymentPart dp, Deployment d) :
	let v = variable(int8().const().constPtr(), dp.processMsgqName(d)) :
	v.setLinkage(extern())
	-> v.setInitializer(('/' + dp.zdlAsNamedElement().name + 'MQ').literal())
	-> v
;

cached Function genMQInitFunc(DeploymentPart dp, Deployment d) :
	let f = function(int32(), dp.msgqInitFuncName(d)) :
	f.setLinkage(extern())
	-> f.addStatement(dp.whileLoop(d))
	-> f.addStatement(returnStmt(1.literal()))
	-> f
;

VariableDeclaration attempVar() :
	let v = variable(int32(), 'attempts') :
	v.setLinkage(static())
	-> v.setInitializer(0.literal())
	-> v
;

WhileStatement whileLoop(DeploymentPart dp, Deployment d) :
	let w = while(dp.msgqName(d).access().testLessThanEqual(0.literal())) :
	w.addStatement(dp.msgqName(d).access().assign(openMQueue(dp.processMsgqName(d))))
	-> w.addStatement(sleep(1.literal()))
	-> w
;	

cached Function genMQReleaseFunc(DeploymentPart dp, Deployment d) :
	let f = function(void(), dp.msgqReleaseFuncName(d)) :
	f.setLinkage(extern())
	-> f.addStatement(mq_close(dp.msgqName(d).access()))
	-> f
;


