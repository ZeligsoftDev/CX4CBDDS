import langc;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension langc::element;
extension langc::expr;
extension langc::libc;
extension langc::stmt;
extension langc::type;

extension template::name;
extension template::utils;
extension include::compInterface;
extension cmps::recvFuncs;

cached ElementList genUserWorkerFuncsFile(ComponentInterface ci) :
	//Current POSIX model only support 1 to 1 relationship between ComponentInterface and StructuralRealization
	let sr = getStructuralRealizations(ci).get(0) :
	let workerFuncs = sr.worker :
	workerFuncs.genAllWorkerFile(ci, sr)	
;

cached ElementList genAllWorkerFile(WorkerFunction w, ComponentInterface ci, StructuralRealization sr) :
	let port = w.receivingPort :
	port != null
	? w.portOperation.genWorkerFile((MessagePort)port, ci, sr)
	: w.portOperation.genLifeCycleWorkerFile(ci, sr)
;

cached ElementList getWorkerFile(MessagePort p, ComponentInterface ci, StructuralRealization sr) :
	p.providedInterface.operation.genWorkerFile(p, ci, sr)
;

create ElementList createWorkerFile(Operation o, MessagePort p, StructuralRealization sr) :
	setName(o.userWorkerFileName(p, sr))
;

cached ElementList genWorkerFile(Operation o, MessagePort p, ComponentInterface ci, StructuralRealization sr) :
	let workerFile = o.createWorkerFile(p, sr) :
	workerFile.addElement(o.genUserWorkerOperation(p, ci, sr))
;

create ElementList createLifeCycleWorkerFile(Operation o, StructuralRealization sr) :
	setName(o.lifeCycleWorkerFileName(sr))
;

cached ElementList genLifeCycleWorkerFile(Operation o, ComponentInterface ci, StructuralRealization sr) :
	let lifeCycleWorkerFile = o.createLifeCycleWorkerFile(sr) :
	lifeCycleWorkerFile.addElement(o.genLifeCycleOperation(ci, sr))
;

cached Function userWorkerFunc(Operation o, MessagePort p, ComponentInterface ci, StructuralRealization sr) :
	let f = function(void(), o.userWorkerFunctionName(p, ci, sr)) :
	f
;

cached Function genUserWorkerOperation(Operation o, MessagePort p, ComponentInterface ci, StructuralRealization sr) :
	let workerFunc = o.userWorkerFunc(p, ci, sr) :
	workerFunc.setKind(implOnly())
	-> workerFunc.addParameter(void().const().ptr(), 'dest_ctx')
	-> workerFunc.addParameter(ci.compInterfaceStruct().ptr(), 'self')
	-> workerFunc.parameters.addAll(o.zdlAsOperation().ownedParameter.collect(e|named(e.getParameterType().getUserAttributeType(), e.paramName(ci))))
	-> workerFunc.addStatement( printf( 'DEBUG: %s', workerFunc.name.name.literal() ) )
	-> workerFunc.setBody( userCode('#include <stdio.h>', sr.worker.select(e|e.portOperation.zdlAsOperation().name.matches(o.zdlAsOperation().name)).body.first()))
	-> workerFunc
;

cached Function lifeCycleFunc(Operation o, StructuralRealization sr) :
	let f = function(void(), o.lifeCycleFunctionName(sr)) :
	f
;

cached Function genLifeCycleOperation(Operation o, ComponentInterface ci, StructuralRealization sr) :
	let lifeCycleFunc = o.lifeCycleFunc(sr) :
	lifeCycleFunc.setKind(implOnly())
	-> lifeCycleFunc.addParameter(ci.compInterfaceStruct().ptr(), 'self')
	-> lifeCycleFunc.setBody( userCode('#include <stdio.h>', sr.worker.select(e|e.portOperation.zdlAsOperation().name.matches(o.zdlAsOperation().name)).body.first()))
	-> lifeCycleFunc
;

