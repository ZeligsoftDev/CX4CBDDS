import langc;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;

extension template::name;
extension template::utils;
extension include::compInterface;

create ElementList getRecvFuncFile(ComponentInterface ci, StructuralRealization sr) :
	setName(recvFuncsFileName(ci, sr))
;

cached ElementList genRecvFuncsFile(ComponentInterface ci) :
	//Current POSIX model only support 1 to 1 relationship between ComponentInterface and StructuralRealization
	let sr = getStructuralRealizations(ci).get(0) :
	let workFuncs = sr.worker :
	let recvFuncFile = ci.getRecvFuncFile(sr) :
	recvFuncFile.addElement(workFuncs.genWorkerFunction(ci, sr))
	
;


cached Function genWorkerFunction(WorkerFunction w, ComponentInterface ci, StructuralRealization sr) :
	let port = w.receivingPort :
	port != null
	? w.portOperation.genWorkerOperation((MessagePort)port, ci, sr)
	: w.portOperation.genLifeCycleOperation(ci, sr)
;



cached Function genWorkerOperation(Operation o, MessagePort p, ComponentInterface ci, StructuralRealization sr) :
	let f = function(void(), o.workerFunctionName(p, ci, sr)) :
	f.setLinkage(extern())
	-> f.addParameter(void().const().ptr(), 'dest_ctx')
	-> f.addParameter(ci.compInterfaceStruct().ptr(), 'self')
	-> f.parameters.addAll(o.zdlAsOperation().ownedParameter.collect(e|named(e.getParameterType().getUserAttributeType(), e.paramNameWorker(o, p, ci, sr))))
	-> f
;

cached Function genLifeCycleOperation(Operation o, ComponentInterface ci, StructuralRealization sr) :
	let f = function(void(), o.lifeCycleFunctionName(ci, sr)) :
	f.setLinkage(extern())
	-> f.addParameter(ci.compInterfaceStruct().ptr(), 'self')
	-> f
;

private cached Name paramNameWorker(uml::Parameter p, Operation o, MessagePort port, ComponentInterface ci, StructuralRealization sr) :
	let pName = new Name :
	pName.setParent(o.workerFunctionName(port, ci, sr))
	-> pName.setName(p.name)
	-> pName;



