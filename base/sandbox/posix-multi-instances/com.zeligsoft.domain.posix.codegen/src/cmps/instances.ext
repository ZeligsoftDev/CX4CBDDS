import langc;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;

extension template::name;
extension template::utils;
extension include::compInterface;

create ElementList getInstancesFile( ComponentInterface sourceDef, DeploymentPart target ) :
    setName(target.instancesFileName(sourceDef))
;


cached ElementList genInstancsFile(DeploymentPart source, DeploymentPart target) :
	let sourceDef = source.getComponentInterface().get(0) :
	let instancesFile = sourceDef.getInstancesFile(target) :
	instancesFile.addElement(source.genInstanceDecl(target, sourceDef))
	-> instancesFile.addElement(source.genUserInstanceDecl(target, sourceDef))
;

cached VariableDeclaration genInstanceDecl(DeploymentPart source, DeploymentPart target, ComponentInterface ci) :
	let part = (uml::Property)source.modelElement :
	getMultiInstanceNames(part).genInstanceVariable(target, ci)
;

cached VariableDeclaration genUserInstanceDecl(DeploymentPart source, DeploymentPart target, ComponentInterface ci) :
	let part = (uml::Property)source.modelElement :
	getMultiInstanceNames(part).genUserInstanceVariable(target, ci)
;

cached VariableDeclaration genInstanceVariable(String instName, DeploymentPart target, ComponentInterface ci) :
	let v = variable(ci.compInterfaceStruct(), instName.compInstancesName(target, ci)) :
	v.setLinkage(static())
	-> v.setKind(implOnly())
	-> v
;

cached VariableDeclaration genUserInstanceVariable(String instName, DeploymentPart target, ComponentInterface ci) :
	let v = variable(ci.compInterfaceStruct().constPtr(), instName.compUserInstancesName(target, ci)) :
	 v.setInitializer(instName.compInstancesName(target, ci).access().addressOf())
	-> v
;










