import langc;
import ZMLMM::ZML_Deployments;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;
import CLanguageDomain::CLanguageDomain;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;
extension langc::name;

extension template::name;
extension cmps::recvFuncs;
extension template::utils;
extension cmps::instances;
extension cmps::send;
extension cmps::userWorkerFuncs;
extension cfgs::process;
extension cfgs::process_entry;
extension ifs::interface;
extension fwk::api;
extension fwk::zcx_context;
extension fwk::message;
extension include::compInterface;
extension include::compInstances;
extension include::userStruct;


create System deployment( Deployment d ):
   let deployedProcesses = d.eAllContents.typeSelect(Allocation).deployedOn.typeSelect(DeploymentPart).select(e|!e.getProcessDefinition().isEmpty) :
    setSubSystems(  deployedProcesses.collect(e|e.subProcess(d)) )
 -> setPublicFolders( { rootIncludeFolderName() } )
;


cached SubSystem subProcess( DeploymentPart process, Deployment d ) :
   let userStructs = d.zdlAsComponent().getModel().eAllContents.typeSelect(C_Struct) :
   let sources = process.getSourcesForTargetPart() : 
   let s = subSystem( process.zdlAsNamedElement().name ) :
        s.files.addAll( sources.genInstancsFile(process) )
     -> s.files.addAll( sources.genSendFile(process, d) )  
     -> s.files.addAll( { process.genProcessFile(d) }) 
     -> s.files.addAll( { process.genProcessEntryFile(d) })
     -> s.files.addAll( sources.getComponentInterface().genRecvFuncsFile() )
     -> s.files.addAll( sources.getComponentInterface().genUserWorkerFuncsFile() )
     -> s.files.addAll( sources.select(e|!e.getComponentInterface().isEmpty).getInterfaceFile() )
     -> s.files.addAll( sources.collect(e|e.getComponentInterface().get(0).genCompInstanceFile(e)) )
     -> s.files.addAll( sources.getComponentInterface().genCompInterfaceFile() )
     -> s.files.addAll( { d.getFrameworkApiFile() })
     -> s.files.addAll({ d.getFrameworkContextFile() })
     -> s.files.addAll( { d.getFrameworkMessageFile() })
     -> s.files.addAll( userStructs.genUserStructFile() )
     -> s.setPublicFolders( { process.processIncludeFolderName() } )
	 -> s.setFolders( { rootFolderName() } )
	 -> s
;






	




	
