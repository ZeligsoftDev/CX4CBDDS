import langc;
import ZMLMM::ZML_Deployments;
import POSIX::POSIX;
import ZMLMM::ZML_Component;
import ZMLMM::ZML_Core;

extension langc::element;
extension langc::expr;
extension langc::stmt;
extension langc::type;
extension langc::name;

extension posix::name;
extension posix::worker;
extension posix::container;
extension posix::baseIfs;
extension posix::fwdDecl;

extension deployment::configurator;
extension deployment::name;


FileName testFileName(StructuralRealization de) : 
	let def = de.interface :
	def == null
		? rootFolderName().child('null_def_' + de.zdlAsNamedElement().name)
		: rootFolderName().child(def.zdlAsNamedElement().name)
;

SubSystem deployment( Deployment d ):
   zeligsoftFolder( d )
;


create SubSystem zeligsoftFolder( Deployment d) :
	files.addAll(d.eAllContents.typeSelect(Allocation).deployed.typeSelect(DeploymentPart).getNestedDeploymentPart().modelElement.typeSelect(Part).zdlAsProperty().type.typeSelect(StructuralRealization).interface.genWorkerFile())
	-> files.addAll(d.eAllContents.typeSelect(Allocation).deployed.typeSelect(DeploymentPart).getNestedDeploymentPart().modelElement.typeSelect(Part).zdlAsProperty().type.typeSelect(StructuralRealization).interface.genContainerFile())
	-> files.addAll(d.eAllContents.typeSelect(Allocation).deployed.typeSelect(DeploymentPart).getNestedDeploymentPart().modelElement.typeSelect(Part).zdlAsProperty().type.typeSelect(StructuralRealization).interface.genComponentFwdDeclFile())
	-> files.addAll(d.eAllContents.typeSelect(Allocation).deployed.typeSelect(DeploymentPart).getNestedDeploymentPart().modelElement.typeSelect(Part).zdlAsProperty().type.typeSelect(StructuralRealization).interface.ownedPort.typeSelect(MessagePort).providedInterface.genBaseInterfaceFile())
 	-> files.addAll(d.eAllContents.typeSelect(Allocation).deployed.typeSelect(DeploymentPart).getNestedDeploymentPart().modelElement.typeSelect(Part).zdlAsProperty().type.typeSelect(StructuralRealization).genConfiguratorFile(d))
 	-> folders.addAll( {rootFolderName(), rootComponentFolderName(), rootInterfaceFolderName(), rootDeploymentFolderName() } )
 	
;

DeploymentPart getNestedDeploymentPart(DeploymentPart part) :
	let nestedPart = part.nestedPart :
	nestedPart.isEmpty
	? part
	: nestedPart.getNestedDeploymentPart()
;



create ElementList genTestFile(StructuralRealization de) :
	setName(de.testFileName())
;

	
