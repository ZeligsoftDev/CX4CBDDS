package CF;


/**
* CF/_DomainManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* The DomainManager interface is for the control and configuration
         of the radio domain. */
public class _DomainManagerStub extends org.omg.CORBA.portable.ObjectImpl implements CF.DomainManager
{


  /* The readonly domainManagerProfile attribute contains
               a profile element with a file reference to the DomainManager
               Configuration Descriptor (DMD) profile. */
  public String domainManagerProfile ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_domainManagerProfile", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return domainManagerProfile (        );
            } finally {
                _releaseReply ($in);
            }
  } // domainManagerProfile


  /* The deviceManagers attribute is read-only containing a sequence 
               of registered DeviceManagers in the domain. */
  public CF.DeviceManager[] deviceManagers ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_deviceManagers", true);
                $in = _invoke ($out);
                CF.DeviceManager $result[] = CF.DomainManagerPackage.DeviceManagerSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return deviceManagers (        );
            } finally {
                _releaseReply ($in);
            }
  } // deviceManagers


  /* The applications attribute contains a list of Applications that 
  		     have been instantiatedin the domain. */
  public CF.Application[] applications ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_applications", true);
                $in = _invoke ($out);
                CF.Application $result[] = CF.DomainManagerPackage.ApplicationSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return applications (        );
            } finally {
                _releaseReply ($in);
            }
  } // applications


  /* The readonly applicationFactories attribute contains a list with
               one ApplicationFactory per application (SAD file and associated
               files) successfully installed. */
  public CF.ApplicationFactory[] applicationFactories ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_applicationFactories", true);
                $in = _invoke ($out);
                CF.ApplicationFactory $result[] = CF.DomainManagerPackage.ApplicationFactorySequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return applicationFactories (        );
            } finally {
                _releaseReply ($in);
            }
  } // applicationFactories


  /* The readonly fileMgr attribute contains the DomainManager's
               FileManager. */
  public CF.FileManager fileMgr ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_fileMgr", true);
                $in = _invoke ($out);
                CF.FileManager $result = CF.FileManagerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return fileMgr (        );
            } finally {
                _releaseReply ($in);
            }
  } // fileMgr


  /* The readonly identifier attribute contains a unique identifier
               for a DomainManager instance. The identifier is identical to 
               the domainmanagerconfiguration element id attribute of the
               DomainManager's Descriptor (DMD) file.  */
  public String identifier ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_identifier", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return identifier (        );
            } finally {
                _releaseReply ($in);
            }
  } // identifier


  /* The registerDevice operation is used to register a Device for
               a specific DeviceManager in the DomainManager's Domain Profile. */
  public void registerDevice (CF.Device registeringDevice, CF.DeviceManager registeredDeviceMgr) throws CF.InvalidObjectReference, CF.InvalidProfile, CF.DomainManagerPackage.DeviceManagerNotRegistered, CF.DomainManagerPackage.RegisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerDevice", true);
                CF.DeviceHelper.write ($out, registeringDevice);
                CF.DeviceManagerHelper.write ($out, registeredDeviceMgr);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidProfile:1.0"))
                    throw CF.InvalidProfileHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/DeviceManagerNotRegistered:1.0"))
                    throw CF.DomainManagerPackage.DeviceManagerNotRegisteredHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/RegisterError:1.0"))
                    throw CF.DomainManagerPackage.RegisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerDevice (registeringDevice, registeredDeviceMgr        );
            } finally {
                _releaseReply ($in);
            }
  } // registerDevice


  /* The registerDeviceManager operation is used to register
                a DeviceManager, its Device(s), and its Services. */
  public void registerDeviceManager (CF.DeviceManager deviceMgr) throws CF.InvalidObjectReference, CF.InvalidProfile, CF.DomainManagerPackage.RegisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerDeviceManager", true);
                CF.DeviceManagerHelper.write ($out, deviceMgr);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidProfile:1.0"))
                    throw CF.InvalidProfileHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/RegisterError:1.0"))
                    throw CF.DomainManagerPackage.RegisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerDeviceManager (deviceMgr        );
            } finally {
                _releaseReply ($in);
            }
  } // registerDeviceManager


  /* The unregisterDeviceManager operation is used to unregister
               a DeviceManager component from the DomainManager's Domain Profile.
               A DeviceManager may be unregistered during run-time for dynamic
               extraction or maintenance of the DeviceManager. */
  public void unregisterDeviceManager (CF.DeviceManager deviceMgr) throws CF.InvalidObjectReference, CF.DomainManagerPackage.UnregisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterDeviceManager", true);
                CF.DeviceManagerHelper.write ($out, deviceMgr);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/UnregisterError:1.0"))
                    throw CF.DomainManagerPackage.UnregisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterDeviceManager (deviceMgr        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterDeviceManager


  /* The unregisterDevice operation is used to remove a device entry
               from the DomainManager for a specific DeviceManager. */
  public void unregisterDevice (CF.Device unregisteringDevice) throws CF.InvalidObjectReference, CF.DomainManagerPackage.UnregisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterDevice", true);
                CF.DeviceHelper.write ($out, unregisteringDevice);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/UnregisterError:1.0"))
                    throw CF.DomainManagerPackage.UnregisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterDevice (unregisteringDevice        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterDevice


  /* The installApplication operation is used to register new
               application software in the DomainManager's Domain Profile. */
  public void installApplication (String profileFileName) throws CF.InvalidProfile, CF.InvalidFileName, CF.DomainManagerPackage.ApplicationInstallationError, CF.DomainManagerPackage.ApplicationAlreadyInstalled
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("installApplication", true);
                $out.write_string (profileFileName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidProfile:1.0"))
                    throw CF.InvalidProfileHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidFileName:1.0"))
                    throw CF.InvalidFileNameHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/ApplicationInstallationError:1.0"))
                    throw CF.DomainManagerPackage.ApplicationInstallationErrorHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/ApplicationAlreadyInstalled:1.0"))
                    throw CF.DomainManagerPackage.ApplicationAlreadyInstalledHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                installApplication (profileFileName        );
            } finally {
                _releaseReply ($in);
            }
  } // installApplication


  /* The uninstallApplication operation is used to uninstall 
               an application and its associated ApplicationFactory from
               the DomainManager. */
  public void uninstallApplication (String applicationId) throws CF.DomainManagerPackage.InvalidIdentifier, CF.DomainManagerPackage.ApplicationUninstallationError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("uninstallApplication", true);
                $out.write_string (applicationId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/DomainManager/InvalidIdentifier:1.0"))
                    throw CF.DomainManagerPackage.InvalidIdentifierHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/ApplicationUninstallationError:1.0"))
                    throw CF.DomainManagerPackage.ApplicationUninstallationErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                uninstallApplication (applicationId        );
            } finally {
                _releaseReply ($in);
            }
  } // uninstallApplication


  /* The registerService operation is used to register a service 
               for a specific DeviceManager with the DomainManager. */
  public void registerService (org.omg.CORBA.Object registeringService, CF.DeviceManager registeredDeviceMgr, String name) throws CF.InvalidObjectReference, CF.DomainManagerPackage.DeviceManagerNotRegistered, CF.DomainManagerPackage.RegisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerService", true);
                org.omg.CORBA.ObjectHelper.write ($out, registeringService);
                CF.DeviceManagerHelper.write ($out, registeredDeviceMgr);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/DeviceManagerNotRegistered:1.0"))
                    throw CF.DomainManagerPackage.DeviceManagerNotRegisteredHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/RegisterError:1.0"))
                    throw CF.DomainManagerPackage.RegisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerService (registeringService, registeredDeviceMgr, name        );
            } finally {
                _releaseReply ($in);
            }
  } // registerService


  /* The unregisterService operation is used to remove a service entry
               from the DomainManager for a specific DeviceManager. */
  public void unregisterService (org.omg.CORBA.Object unregisteringService, String name) throws CF.InvalidObjectReference, CF.DomainManagerPackage.UnregisterError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterService", true);
                org.omg.CORBA.ObjectHelper.write ($out, unregisteringService);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/UnregisterError:1.0"))
                    throw CF.DomainManagerPackage.UnregisterErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterService (unregisteringService, name        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterService


  /* The registerWithEventChannel operation is used to connect
               a consumer to a domain's event channel. */
  public void registerWithEventChannel (org.omg.CORBA.Object registeringObject, String registeringId, String eventChannelName) throws CF.InvalidObjectReference, CF.DomainManagerPackage.InvalidEventChannelName, CF.DomainManagerPackage.AlreadyConnected
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerWithEventChannel", true);
                org.omg.CORBA.ObjectHelper.write ($out, registeringObject);
                $out.write_string (registeringId);
                $out.write_string (eventChannelName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/InvalidEventChannelName:1.0"))
                    throw CF.DomainManagerPackage.InvalidEventChannelNameHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/AlreadyConnected:1.0"))
                    throw CF.DomainManagerPackage.AlreadyConnectedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerWithEventChannel (registeringObject, registeringId, eventChannelName        );
            } finally {
                _releaseReply ($in);
            }
  } // registerWithEventChannel


  /* The unregisterFromEventChannel operation is used to disconnect
               a consumer from a domain's event channel. */
  public void unregisterFromEventChannel (String unregisteringId, String eventChannelName) throws CF.DomainManagerPackage.InvalidEventChannelName, CF.DomainManagerPackage.NotConnected
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterFromEventChannel", true);
                $out.write_string (unregisteringId);
                $out.write_string (eventChannelName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/DomainManager/InvalidEventChannelName:1.0"))
                    throw CF.DomainManagerPackage.InvalidEventChannelNameHelper.read ($in);
                else if (_id.equals ("IDL:CF/DomainManager/NotConnected:1.0"))
                    throw CF.DomainManagerPackage.NotConnectedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterFromEventChannel (unregisteringId, eventChannelName        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterFromEventChannel


  /* The purpose of this operation is to allow id/value pair
               configuration properties to be assigned to components
               implementing this interface. */
  public void configure (CF.DataType[] configProperties) throws CF.PropertySetPackage.InvalidConfiguration, CF.PropertySetPackage.PartialConfiguration
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("configure", true);
                CF.PropertiesHelper.write ($out, configProperties);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PropertySet/InvalidConfiguration:1.0"))
                    throw CF.PropertySetPackage.InvalidConfigurationHelper.read ($in);
                else if (_id.equals ("IDL:CF/PropertySet/PartialConfiguration:1.0"))
                    throw CF.PropertySetPackage.PartialConfigurationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configure (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // configure


  /* The purpose of this operation is to allow a component to be queried
               to retrieve its properties. */
  public void query (CF.PropertiesHolder configProperties) throws CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("query", true);
                CF.PropertiesHelper.write ($out, configProperties.value);
                $in = _invoke ($out);
                configProperties.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                query (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // query

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/DomainManager:1.0", 
    "IDL:CF/PropertySet:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _DomainManagerStub
