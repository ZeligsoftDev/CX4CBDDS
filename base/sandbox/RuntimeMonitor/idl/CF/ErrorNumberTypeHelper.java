package CF;


/**
* CF/ErrorNumberTypeHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:34 PM EDT
*/


/* This enum is used to pass error number information in various
         exceptions.  Those exceptions starting with "CF_E" map to the POSIX
         definitions. The "CF_" has been added to the POSIX exceptions to avoid 
		 namespace conflicts. CF_NOTSET is not defined in the POSIX specification.
		 CF_NOTSET is an SCA specific value that is applicable for any exception
         when the method specific or standard POSIX error values are
         not appropriate.) */
abstract public class ErrorNumberTypeHelper
{
  private static String  _id = "IDL:CF/ErrorNumberType:1.0";

  public static void insert (org.omg.CORBA.Any a, CF.ErrorNumberType that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static CF.ErrorNumberType extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (CF.ErrorNumberTypeHelper.id (), "ErrorNumberType", new String[] { "CF_NOTSET", "CF_E2BIG", "CF_EACCES", "CF_EAGAIN", "CF_EBADF", "CF_EBADMSG", "CF_EBUSY", "CF_ECANCELED", "CF_ECHILD", "CF_EDEADLK", "CF_EDOM", "CF_EEXIST", "CF_EFAULT", "CF_EFBIG", "CF_EINPROGRESS", "CF_EINTR", "CF_EINVAL", "CF_EIO", "CF_EISDIR", "CF_EMFILE", "CF_EMLINK", "CF_EMSGSIZE", "CF_ENAMETOOLONG", "CF_ENFILE", "CF_ENODEV", "CF_ENOENT", "CF_ENOEXEC", "CF_ENOLCK", "CF_ENOMEM", "CF_ENOSPC", "CF_ENOSYS", "CF_ENOTDIR", "CF_ENOTEMPTY", "CF_ENOTSUP", "CF_ENOTTY", "CF_ENXIO", "CF_EPERM", "CF_EPIPE", "CF_ERANGE", "CF_EROFS", "CF_ESPIPE", "CF_ESRCH", "CF_ETIMEDOUT", "CF_EXDEV"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static CF.ErrorNumberType read (org.omg.CORBA.portable.InputStream istream)
  {
    return CF.ErrorNumberType.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, CF.ErrorNumberType value)
  {
    ostream.write_long (value.value ());
  }

}
