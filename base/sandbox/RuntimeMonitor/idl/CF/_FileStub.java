package CF;


/**
* CF/_FileStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* The File interface provides the ability to read and write files
         residing within a distributed FileSystem.  A file
         can be thought of conceptually as a sequence of octets with
         a current filePointer describing where the next read or write
         will occur. */
public class _FileStub extends org.omg.CORBA.portable.ObjectImpl implements CF.File
{


  /* The readonly fileName attribute contains the file name given to
               the FileSystem open/create operation. */
  public String fileName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_fileName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return fileName (        );
            } finally {
                _releaseReply ($in);
            }
  } // fileName


  /* The readonly filePointer attribute contains the file position
               where the next read or write will occur.  */
  public int filePointer ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_filePointer", true);
                $in = _invoke ($out);
                int $result = $in.read_ulong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return filePointer (        );
            } finally {
                _releaseReply ($in);
            }
  } // filePointer


  /* Applications require the read operation in order to retrieve data
               from remote files. */
  public void read (CF.OctetSequenceHolder data, int length) throws CF.FilePackage.IOException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("read", true);
                $out.write_ulong (length);
                $in = _invoke ($out);
                data.value = CF.OctetSequenceHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/File/IOException:1.0"))
                    throw CF.FilePackage.IOExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                read (data, length        );
            } finally {
                _releaseReply ($in);
            }
  } // read


  /* The write operation writes data to the file referenced. */
  public void write (byte[] data) throws CF.FilePackage.IOException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("write", true);
                CF.OctetSequenceHelper.write ($out, data);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/File/IOException:1.0"))
                    throw CF.FilePackage.IOExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                write (data        );
            } finally {
                _releaseReply ($in);
            }
  } // write


  /* The sizeOf operation returns the current size of the file. */
  public int sizeOf () throws CF.FileException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("sizeOf", true);
                $in = _invoke ($out);
                int $result = $in.read_ulong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/FileException:1.0"))
                    throw CF.FileExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return sizeOf (        );
            } finally {
                _releaseReply ($in);
            }
  } // sizeOf


  /* The close operation releases any OE file resources associated
               with the component. */
  public void close () throws CF.FileException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("close", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/FileException:1.0"))
                    throw CF.FileExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                close (        );
            } finally {
                _releaseReply ($in);
            }
  } // close


  /* The setFilePointer operation positions the file pointer where
               next read or write will occur. */
  public void setFilePointer (int filePointer) throws CF.FilePackage.InvalidFilePointer, CF.FileException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFilePointer", true);
                $out.write_ulong (filePointer);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/File/InvalidFilePointer:1.0"))
                    throw CF.FilePackage.InvalidFilePointerHelper.read ($in);
                else if (_id.equals ("IDL:CF/FileException:1.0"))
                    throw CF.FileExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFilePointer (filePointer        );
            } finally {
                _releaseReply ($in);
            }
  } // setFilePointer

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/File:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _FileStub
