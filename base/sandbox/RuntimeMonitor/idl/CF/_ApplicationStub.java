package CF;


/**
* CF/_ApplicationStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* The Application interface provides for the control, configuration,
         and status of an instantiated application in the domain. */
public class _ApplicationStub extends org.omg.CORBA.portable.ObjectImpl implements CF.Application
{


  /* This attribute contains the list of components'
               Naming Service Context within the Application for those
               components using CORBA Naming Service.  */
  public CF.ApplicationPackage.ComponentElementType[] componentNamingContexts ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_componentNamingContexts", true);
                $in = _invoke ($out);
                CF.ApplicationPackage.ComponentElementType $result[] = CF.ApplicationPackage.ComponentElementSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return componentNamingContexts (        );
            } finally {
                _releaseReply ($in);
            }
  } // componentNamingContexts


  /* This attribute contains the list of components' process IDs within
               the Application for components that are executing on a device. */
  public CF.ApplicationPackage.ComponentProcessIdType[] componentProcessIds ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_componentProcessIds", true);
                $in = _invoke ($out);
                CF.ApplicationPackage.ComponentProcessIdType $result[] = CF.ApplicationPackage.ComponentProcessIdSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return componentProcessIds (        );
            } finally {
                _releaseReply ($in);
            }
  } // componentProcessIds


  /* The componentDevices attribute contain a list of devices
               which each component either uses, is loaded on or is executed on.
               Each component (componentinstantiation element in the Application's
               software profile) is associated with a device.  */
  public CF.DeviceAssignmentType[] componentDevices ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_componentDevices", true);
                $in = _invoke ($out);
                CF.DeviceAssignmentType $result[] = CF.DeviceAssignmentSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return componentDevices (        );
            } finally {
                _releaseReply ($in);
            }
  } // componentDevices


  /* This attribute contains the list of components' SPD implementation
               IDs within the Application for those components created.  */
  public CF.ApplicationPackage.ComponentElementType[] componentImplementations ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_componentImplementations", true);
                $in = _invoke ($out);
                CF.ApplicationPackage.ComponentElementType $result[] = CF.ApplicationPackage.ComponentElementSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return componentImplementations (        );
            } finally {
                _releaseReply ($in);
            }
  } // componentImplementations


  /* This attribute is the XML profile information for the application.
               The string value contains  a profile element with a file
               reference to the SAD. */
  public String profile ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_profile", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return profile (        );
            } finally {
                _releaseReply ($in);
            }
  } // profile


  /* This name attribute contains the name of the created Application.
               The ApplicationFactory interfaces's create operation name parameter
               provides the name content.  */
  public String name ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_name", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return name (        );
            } finally {
                _releaseReply ($in);
            }
  } // name


  /* The readonly identifier attribute contain the unique identifier for a
             resource instance. */
  public String identifier ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_identifier", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return identifier (        );
            } finally {
                _releaseReply ($in);
            }
  } // identifier


  /* The start operation is provided to command a Resource implementing
               this interface to start internal processing. */
  public void start () throws CF.ResourcePackage.StartError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("start", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Resource/StartError:1.0"))
                    throw CF.ResourcePackage.StartErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                start (        );
            } finally {
                _releaseReply ($in);
            }
  } // start


  /* The stop operation is provided to command a Resource implementing
               this interface to stop all internal processing. */
  public void stop () throws CF.ResourcePackage.StopError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("stop", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Resource/StopError:1.0"))
                    throw CF.ResourcePackage.StopErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                stop (        );
            } finally {
                _releaseReply ($in);
            }
  } // stop


  /* The purpose of the initialize operation is to provide a mechanism
               to set an object to an known initial state. */
  public void initialize () throws CF.LifeCyclePackage.InitializeError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("initialize", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/LifeCycle/InitializeError:1.0"))
                    throw CF.LifeCyclePackage.InitializeErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                initialize (        );
            } finally {
                _releaseReply ($in);
            }
  } // initialize


  /* The purpose of the releaseObject operation is to provide a means
               by which an instantiated component may be torn down. */
  public void releaseObject () throws CF.LifeCyclePackage.ReleaseError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("releaseObject", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/LifeCycle/ReleaseError:1.0"))
                    throw CF.LifeCyclePackage.ReleaseErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                releaseObject (        );
            } finally {
                _releaseReply ($in);
            }
  } // releaseObject


  /* The runTest operation allows components to be "blackbox" tested.
               This allows Built-In Tests to be implemented which
               provides a means to isolate faults (both software and hardware)
               within the system. */
  public void runTest (int testid, CF.PropertiesHolder testValues) throws CF.TestableObjectPackage.UnknownTest, CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("runTest", true);
                $out.write_ulong (testid);
                CF.PropertiesHelper.write ($out, testValues.value);
                $in = _invoke ($out);
                testValues.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/TestableObject/UnknownTest:1.0"))
                    throw CF.TestableObjectPackage.UnknownTestHelper.read ($in);
                else if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                runTest (testid, testValues        );
            } finally {
                _releaseReply ($in);
            }
  } // runTest


  /* The purpose of this operation is to allow id/value pair
               configuration properties to be assigned to components
               implementing this interface. */
  public void configure (CF.DataType[] configProperties) throws CF.PropertySetPackage.InvalidConfiguration, CF.PropertySetPackage.PartialConfiguration
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("configure", true);
                CF.PropertiesHelper.write ($out, configProperties);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PropertySet/InvalidConfiguration:1.0"))
                    throw CF.PropertySetPackage.InvalidConfigurationHelper.read ($in);
                else if (_id.equals ("IDL:CF/PropertySet/PartialConfiguration:1.0"))
                    throw CF.PropertySetPackage.PartialConfigurationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configure (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // configure


  /* The purpose of this operation is to allow a component to be queried
               to retrieve its properties. */
  public void query (CF.PropertiesHolder configProperties) throws CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("query", true);
                CF.PropertiesHelper.write ($out, configProperties.value);
                $in = _invoke ($out);
                configProperties.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                query (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // query


  /* The getPort operation provides a mechanism to obtain a specific
               consumer or producer Port.  A PortSupplier may contain zero-to-many
               consumer and producer port components. */
  public org.omg.CORBA.Object getPort (String name) throws CF.PortSupplierPackage.UnknownPort
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPort", true);
                $out.write_string (name);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = org.omg.CORBA.ObjectHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PortSupplier/UnknownPort:1.0"))
                    throw CF.PortSupplierPackage.UnknownPortHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPort (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getPort

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/Application:1.0", 
    "IDL:CF/Resource:1.0", 
    "IDL:CF/LifeCycle:1.0", 
    "IDL:CF/TestableObject:1.0", 
    "IDL:CF/PropertySet:1.0", 
    "IDL:CF/PortSupplier:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ApplicationStub
