package CF;


/**
* CF/FileOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* The File interface provides the ability to read and write files
         residing within a distributed FileSystem.  A file
         can be thought of conceptually as a sequence of octets with
         a current filePointer describing where the next read or write
         will occur. */
public interface FileOperations 
{

  /* The readonly fileName attribute contains the file name given to
               the FileSystem open/create operation. */
  String fileName ();

  /* The readonly filePointer attribute contains the file position
               where the next read or write will occur.  */
  int filePointer ();

  /* Applications require the read operation in order to retrieve data
               from remote files. */
  void read (CF.OctetSequenceHolder data, int length) throws CF.FilePackage.IOException;

  /* The write operation writes data to the file referenced. */
  void write (byte[] data) throws CF.FilePackage.IOException;

  /* The sizeOf operation returns the current size of the file. */
  int sizeOf () throws CF.FileException;

  /* The close operation releases any OE file resources associated
               with the component. */
  void close () throws CF.FileException;

  /* The setFilePointer operation positions the file pointer where
               next read or write will occur. */
  void setFilePointer (int filePointer) throws CF.FilePackage.InvalidFilePointer, CF.FileException;
} // interface FileOperations
