package CF;


/**
* CF/_DeviceManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* The DeviceManager interface is used to manage a set of
         logical Devices and services. */
public class _DeviceManagerStub extends org.omg.CORBA.portable.ObjectImpl implements CF.DeviceManager
{


  /* The deviceConfigurationProfile attribute contains the 
               DeviceManager's profile, a profile element with a file
               reference to the DeviceManager's Device Configuration Descriptor
               (DCD) profile. */
  public String deviceConfigurationProfile ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_deviceConfigurationProfile", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return deviceConfigurationProfile (        );
            } finally {
                _releaseReply ($in);
            }
  } // deviceConfigurationProfile


  /* The fileSys attribute contains the FileSystem associated
               with this DeviceManager or a nil CORBA object reference 
               if no FileSystem is associated with this DeviceManager.  */
  public CF.FileSystem fileSys ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_fileSys", true);
                $in = _invoke ($out);
                CF.FileSystem $result = CF.FileSystemHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return fileSys (        );
            } finally {
                _releaseReply ($in);
            }
  } // fileSys


  /* The identifier attribute contains the instance-unique
               identifier for a DeviceManager.  The identifier is identical to
               the deviceconfiguration element id attribute of the DeviceManager's
               Device Configuration Descriptor (DCD) file.  */
  public String identifier ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_identifier", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return identifier (        );
            } finally {
                _releaseReply ($in);
            }
  } // identifier


  /* The label attribute contains the DeviceManager's label.  The label
               attribute is the meaningful name given to a DeviceManager. */
  public String label ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_label", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return label (        );
            } finally {
                _releaseReply ($in);
            }
  } // label


  /* The registeredDevices attribute contains a list of Devices that
               have registered with this DeviceManager or a sequence of length
               zero if no Devices have registered with the DeviceManager.  */
  public CF.Device[] registeredDevices ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_registeredDevices", true);
                $in = _invoke ($out);
                CF.Device $result[] = CF.DeviceSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return registeredDevices (        );
            } finally {
                _releaseReply ($in);
            }
  } // registeredDevices


  /* The registeredServices attribute contains a list of Services that
               have registered with this DeviceManager or a sequence of length
               zero if no Services have registered with the DeviceManager.     */
  public CF.DeviceManagerPackage.ServiceType[] registeredServices ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_registeredServices", true);
                $in = _invoke ($out);
                CF.DeviceManagerPackage.ServiceType $result[] = CF.DeviceManagerPackage.ServiceSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return registeredServices (        );
            } finally {
                _releaseReply ($in);
            }
  } // registeredServices


  /* The registerDevice operation provides the mechanism to register a
               Device with a DeviceManager. */
  public void registerDevice (CF.Device registeringDevice) throws CF.InvalidObjectReference
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerDevice", true);
                CF.DeviceHelper.write ($out, registeringDevice);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerDevice (registeringDevice        );
            } finally {
                _releaseReply ($in);
            }
  } // registerDevice


  /* This operation unregisters a Device from a DeviceManager. */
  public void unregisterDevice (CF.Device registeredDevice) throws CF.InvalidObjectReference
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterDevice", true);
                CF.DeviceHelper.write ($out, registeredDevice);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterDevice (registeredDevice        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterDevice


  /* The shutdown operation provides the mechanism to terminate
               a DeviceManager, unregistering it from the DomainManager. */
  public void shutdown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown


  /* The registerService operation provides mechanisms to register
               a Service with a DeviceManager and its DomainManager. */
  public void registerService (org.omg.CORBA.Object registeringService, String name) throws CF.InvalidObjectReference
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerService", true);
                org.omg.CORBA.ObjectHelper.write ($out, registeringService);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerService (registeringService, name        );
            } finally {
                _releaseReply ($in);
            }
  } // registerService


  /* This operation provides mechanisms to unregister a Service from
               a DeviceManager and its DomainManager. */
  public void unregisterService (org.omg.CORBA.Object unregisteringService, String name) throws CF.InvalidObjectReference
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterService", true);
                org.omg.CORBA.ObjectHelper.write ($out, unregisteringService);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/InvalidObjectReference:1.0"))
                    throw CF.InvalidObjectReferenceHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterService (unregisteringService, name        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterService


  /* The getComponentImplementationId operation returns the SPD
               implementation ID that the DeviceManager interface used
               to create a component. */
  public String getComponentImplementationId (String componentInstantiationId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getComponentImplementationId", true);
                $out.write_string (componentInstantiationId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getComponentImplementationId (componentInstantiationId        );
            } finally {
                _releaseReply ($in);
            }
  } // getComponentImplementationId


  /* The purpose of this operation is to allow id/value pair
               configuration properties to be assigned to components
               implementing this interface. */
  public void configure (CF.DataType[] configProperties) throws CF.PropertySetPackage.InvalidConfiguration, CF.PropertySetPackage.PartialConfiguration
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("configure", true);
                CF.PropertiesHelper.write ($out, configProperties);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PropertySet/InvalidConfiguration:1.0"))
                    throw CF.PropertySetPackage.InvalidConfigurationHelper.read ($in);
                else if (_id.equals ("IDL:CF/PropertySet/PartialConfiguration:1.0"))
                    throw CF.PropertySetPackage.PartialConfigurationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configure (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // configure


  /* The purpose of this operation is to allow a component to be queried
               to retrieve its properties. */
  public void query (CF.PropertiesHolder configProperties) throws CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("query", true);
                CF.PropertiesHelper.write ($out, configProperties.value);
                $in = _invoke ($out);
                configProperties.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                query (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // query


  /* The getPort operation provides a mechanism to obtain a specific
               consumer or producer Port.  A PortSupplier may contain zero-to-many
               consumer and producer port components. */
  public org.omg.CORBA.Object getPort (String name) throws CF.PortSupplierPackage.UnknownPort
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPort", true);
                $out.write_string (name);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = org.omg.CORBA.ObjectHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PortSupplier/UnknownPort:1.0"))
                    throw CF.PortSupplierPackage.UnknownPortHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPort (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getPort

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/DeviceManager:1.0", 
    "IDL:CF/PropertySet:1.0", 
    "IDL:CF/PortSupplier:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _DeviceManagerStub
