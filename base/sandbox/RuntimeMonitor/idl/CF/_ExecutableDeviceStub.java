package CF;


/**
* CF/_ExecutableDeviceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* This interface extends the LoadableDevice interface by adding
         execute and terminate behavior to a Device.  */
public class _ExecutableDeviceStub extends org.omg.CORBA.portable.ObjectImpl implements CF.ExecutableDevice
{


  /* The terminate operation provides the mechanism for terminating
               the execution of a process/thread on a specific device that 
               was started up with the execute operation. */
  public void terminate (int processId) throws CF.ExecutableDevicePackage.InvalidProcess, CF.DevicePackage.InvalidState
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("terminate", true);
                CF.ExecutableDevicePackage.ProcessID_TypeHelper.write ($out, processId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/ExecutableDevice/InvalidProcess:1.0"))
                    throw CF.ExecutableDevicePackage.InvalidProcessHelper.read ($in);
                else if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                terminate (processId        );
            } finally {
                _releaseReply ($in);
            }
  } // terminate


  /* The execute operation provides the mechanism for starting up and
               executing a software process/thread on a device. */
  public int execute (String name, CF.DataType[] options, CF.DataType[] parameters) throws CF.DevicePackage.InvalidState, CF.ExecutableDevicePackage.InvalidFunction, CF.ExecutableDevicePackage.InvalidParameters, CF.ExecutableDevicePackage.InvalidOptions, CF.InvalidFileName, CF.ExecutableDevicePackage.ExecuteFail
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("execute", true);
                $out.write_string (name);
                CF.PropertiesHelper.write ($out, options);
                CF.PropertiesHelper.write ($out, parameters);
                $in = _invoke ($out);
                int $result = CF.ExecutableDevicePackage.ProcessID_TypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else if (_id.equals ("IDL:CF/ExecutableDevice/InvalidFunction:1.0"))
                    throw CF.ExecutableDevicePackage.InvalidFunctionHelper.read ($in);
                else if (_id.equals ("IDL:CF/ExecutableDevice/InvalidParameters:1.0"))
                    throw CF.ExecutableDevicePackage.InvalidParametersHelper.read ($in);
                else if (_id.equals ("IDL:CF/ExecutableDevice/InvalidOptions:1.0"))
                    throw CF.ExecutableDevicePackage.InvalidOptionsHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidFileName:1.0"))
                    throw CF.InvalidFileNameHelper.read ($in);
                else if (_id.equals ("IDL:CF/ExecutableDevice/ExecuteFail:1.0"))
                    throw CF.ExecutableDevicePackage.ExecuteFailHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return execute (name, options, parameters        );
            } finally {
                _releaseReply ($in);
            }
  } // execute


  /* The load operation provides the mechanism for loading software
               on a specific device.  The loaded software may be subsequently
               executed on the Device, if the Device is an ExecutableDevice. */
  public void load (CF.FileSystem fs, String fileName, CF.LoadableDevicePackage.LoadType loadKind) throws CF.DevicePackage.InvalidState, CF.LoadableDevicePackage.InvalidLoadKind, CF.InvalidFileName, CF.LoadableDevicePackage.LoadFail
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("load", true);
                CF.FileSystemHelper.write ($out, fs);
                $out.write_string (fileName);
                CF.LoadableDevicePackage.LoadTypeHelper.write ($out, loadKind);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else if (_id.equals ("IDL:CF/LoadableDevice/InvalidLoadKind:1.0"))
                    throw CF.LoadableDevicePackage.InvalidLoadKindHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidFileName:1.0"))
                    throw CF.InvalidFileNameHelper.read ($in);
                else if (_id.equals ("IDL:CF/LoadableDevice/LoadFail:1.0"))
                    throw CF.LoadableDevicePackage.LoadFailHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                load (fs, fileName, loadKind        );
            } finally {
                _releaseReply ($in);
            }
  } // load


  /* The unload operation provides the mechanism to unload software
               that is currently loaded. */
  public void unload (String fileName) throws CF.DevicePackage.InvalidState, CF.InvalidFileName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unload", true);
                $out.write_string (fileName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else if (_id.equals ("IDL:CF/InvalidFileName:1.0"))
                    throw CF.InvalidFileNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unload (fileName        );
            } finally {
                _releaseReply ($in);
            }
  } // unload


  /* The readonly usageState attribute contains the Device's usage state
               The usageState indicates whether or not a device is actively in use
               at a specific instant, and if so, whether or not it has spare
               capacity for allocation at that instant. */
  public CF.DevicePackage.UsageType usageState ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_usageState", true);
                $in = _invoke ($out);
                CF.DevicePackage.UsageType $result = CF.DevicePackage.UsageTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return usageState (        );
            } finally {
                _releaseReply ($in);
            }
  } // usageState


  /* The administrative state indicates the permission to use or
               prohibition against using the device.  The adminState attribute
               contains the device's admin state value. */
  public CF.DevicePackage.AdminType adminState ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_adminState", true);
                $in = _invoke ($out);
                CF.DevicePackage.AdminType $result = CF.DevicePackage.AdminTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return adminState (        );
            } finally {
                _releaseReply ($in);
            }
  } // adminState


  /* The administrative state indicates the permission to use or
               prohibition against using the device.  The adminState attribute
               contains the device's admin state value. */
  public void adminState (CF.DevicePackage.AdminType newAdminState)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_adminState", true);
                CF.DevicePackage.AdminTypeHelper.write ($out, newAdminState);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                adminState (newAdminState        );
            } finally {
                _releaseReply ($in);
            }
  } // adminState


  /* The operationalState attribute contains the device's operational
               state.  The operational state indicates
               whether or not the device is functioning. */
  public CF.DevicePackage.OperationalType operationalState ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_operationalState", true);
                $in = _invoke ($out);
                CF.DevicePackage.OperationalType $result = CF.DevicePackage.OperationalTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return operationalState (        );
            } finally {
                _releaseReply ($in);
            }
  } // operationalState


  /* The softwareProfile attribute is the XML description for this
              logical Device.  The softwareProfile attribute contains 
              a profile DTD element with a file reference to the SPD profile
              file. */
  public String softwareProfile ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_softwareProfile", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return softwareProfile (        );
            } finally {
                _releaseReply ($in);
            }
  } // softwareProfile


  /* The label attribute is the meaningful name given to a Device. */
  public String label ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_label", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return label (        );
            } finally {
                _releaseReply ($in);
            }
  } // label


  /* The compositeDevice attribute contains the object reference 
               of the AggregateDevice with which this Device is associated 
               or a nil CORBA object reference if no association exists.   */
  public CF.AggregateDevice compositeDevice ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_compositeDevice", true);
                $in = _invoke ($out);
                CF.AggregateDevice $result = CF.AggregateDeviceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return compositeDevice (        );
            } finally {
                _releaseReply ($in);
            }
  } // compositeDevice


  /* The allocateCapacity operation provides the mechanism 
               to request and allocate capacity from the Device. */
  public boolean allocateCapacity (CF.DataType[] capacities) throws CF.DevicePackage.InvalidCapacity, CF.DevicePackage.InvalidState
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("allocateCapacity", true);
                CF.PropertiesHelper.write ($out, capacities);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Device/InvalidCapacity:1.0"))
                    throw CF.DevicePackage.InvalidCapacityHelper.read ($in);
                else if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return allocateCapacity (capacities        );
            } finally {
                _releaseReply ($in);
            }
  } // allocateCapacity


  /* The deallocateCapacity operation provides the mechanism to return
               capacities back to the Device, making them available to other
               users. */
  public void deallocateCapacity (CF.DataType[] capacities) throws CF.DevicePackage.InvalidCapacity, CF.DevicePackage.InvalidState
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deallocateCapacity", true);
                CF.PropertiesHelper.write ($out, capacities);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Device/InvalidCapacity:1.0"))
                    throw CF.DevicePackage.InvalidCapacityHelper.read ($in);
                else if (_id.equals ("IDL:CF/Device/InvalidState:1.0"))
                    throw CF.DevicePackage.InvalidStateHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deallocateCapacity (capacities        );
            } finally {
                _releaseReply ($in);
            }
  } // deallocateCapacity


  /* The readonly identifier attribute contain the unique identifier for a
             resource instance. */
  public String identifier ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_identifier", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return identifier (        );
            } finally {
                _releaseReply ($in);
            }
  } // identifier


  /* The start operation is provided to command a Resource implementing
               this interface to start internal processing. */
  public void start () throws CF.ResourcePackage.StartError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("start", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Resource/StartError:1.0"))
                    throw CF.ResourcePackage.StartErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                start (        );
            } finally {
                _releaseReply ($in);
            }
  } // start


  /* The stop operation is provided to command a Resource implementing
               this interface to stop all internal processing. */
  public void stop () throws CF.ResourcePackage.StopError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("stop", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/Resource/StopError:1.0"))
                    throw CF.ResourcePackage.StopErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                stop (        );
            } finally {
                _releaseReply ($in);
            }
  } // stop


  /* The purpose of the initialize operation is to provide a mechanism
               to set an object to an known initial state. */
  public void initialize () throws CF.LifeCyclePackage.InitializeError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("initialize", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/LifeCycle/InitializeError:1.0"))
                    throw CF.LifeCyclePackage.InitializeErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                initialize (        );
            } finally {
                _releaseReply ($in);
            }
  } // initialize


  /* The purpose of the releaseObject operation is to provide a means
               by which an instantiated component may be torn down. */
  public void releaseObject () throws CF.LifeCyclePackage.ReleaseError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("releaseObject", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/LifeCycle/ReleaseError:1.0"))
                    throw CF.LifeCyclePackage.ReleaseErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                releaseObject (        );
            } finally {
                _releaseReply ($in);
            }
  } // releaseObject


  /* The runTest operation allows components to be "blackbox" tested.
               This allows Built-In Tests to be implemented which
               provides a means to isolate faults (both software and hardware)
               within the system. */
  public void runTest (int testid, CF.PropertiesHolder testValues) throws CF.TestableObjectPackage.UnknownTest, CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("runTest", true);
                $out.write_ulong (testid);
                CF.PropertiesHelper.write ($out, testValues.value);
                $in = _invoke ($out);
                testValues.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/TestableObject/UnknownTest:1.0"))
                    throw CF.TestableObjectPackage.UnknownTestHelper.read ($in);
                else if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                runTest (testid, testValues        );
            } finally {
                _releaseReply ($in);
            }
  } // runTest


  /* The purpose of this operation is to allow id/value pair
               configuration properties to be assigned to components
               implementing this interface. */
  public void configure (CF.DataType[] configProperties) throws CF.PropertySetPackage.InvalidConfiguration, CF.PropertySetPackage.PartialConfiguration
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("configure", true);
                CF.PropertiesHelper.write ($out, configProperties);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PropertySet/InvalidConfiguration:1.0"))
                    throw CF.PropertySetPackage.InvalidConfigurationHelper.read ($in);
                else if (_id.equals ("IDL:CF/PropertySet/PartialConfiguration:1.0"))
                    throw CF.PropertySetPackage.PartialConfigurationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configure (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // configure


  /* The purpose of this operation is to allow a component to be queried
               to retrieve its properties. */
  public void query (CF.PropertiesHolder configProperties) throws CF.UnknownProperties
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("query", true);
                CF.PropertiesHelper.write ($out, configProperties.value);
                $in = _invoke ($out);
                configProperties.value = CF.PropertiesHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/UnknownProperties:1.0"))
                    throw CF.UnknownPropertiesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                query (configProperties        );
            } finally {
                _releaseReply ($in);
            }
  } // query


  /* The getPort operation provides a mechanism to obtain a specific
               consumer or producer Port.  A PortSupplier may contain zero-to-many
               consumer and producer port components. */
  public org.omg.CORBA.Object getPort (String name) throws CF.PortSupplierPackage.UnknownPort
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPort", true);
                $out.write_string (name);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = org.omg.CORBA.ObjectHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/PortSupplier/UnknownPort:1.0"))
                    throw CF.PortSupplierPackage.UnknownPortHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPort (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getPort

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/ExecutableDevice:1.0", 
    "IDL:CF/LoadableDevice:1.0", 
    "IDL:CF/Device:1.0", 
    "IDL:CF/Resource:1.0", 
    "IDL:CF/LifeCycle:1.0", 
    "IDL:CF/TestableObject:1.0", 
    "IDL:CF/PropertySet:1.0", 
    "IDL:CF/PortSupplier:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ExecutableDeviceStub
