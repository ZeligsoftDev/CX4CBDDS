package CF;


/**
* CF/_ResourceFactoryStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CF.idl
* Monday, May 4, 2009 2:19:35 PM EDT
*/


/* A ResourceFactory can be used to create and tear down a Resource. */
public class _ResourceFactoryStub extends org.omg.CORBA.portable.ObjectImpl implements CF.ResourceFactory
{


  /* The readonly identifier attribute contains the unique identifier
               for a ResourceFactory instance.  */
  public String identifier ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_identifier", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return identifier (        );
            } finally {
                _releaseReply ($in);
            }
  } // identifier


  /* The createResource operation provides the capability to create
              Resources in the same process space as the ResourceFactory or
              to return a Resource that has already been created. This behavior
              is an alternative approach to the Device's execute operation for
              creating a Resource. */
  public CF.Resource createResource (String resourceId, CF.DataType[] qualifiers) throws CF.ResourceFactoryPackage.CreateResourceFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createResource", true);
                $out.write_string (resourceId);
                CF.PropertiesHelper.write ($out, qualifiers);
                $in = _invoke ($out);
                CF.Resource $result = CF.ResourceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/ResourceFactory/CreateResourceFailure:1.0"))
                    throw CF.ResourceFactoryPackage.CreateResourceFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createResource (resourceId, qualifiers        );
            } finally {
                _releaseReply ($in);
            }
  } // createResource


  /* In CORBA there is client side and server side representation of
               a Resource.  This operation provides the mechanism of releasing
               the Resource in the CORBA environment on the server side when
               all clients are through with a specific Resource. The client
               still has to release its client side reference of the Resource. */
  public void releaseResource (String resourceId) throws CF.ResourceFactoryPackage.InvalidResourceId
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("releaseResource", true);
                $out.write_string (resourceId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/ResourceFactory/InvalidResourceId:1.0"))
                    throw CF.ResourceFactoryPackage.InvalidResourceIdHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                releaseResource (resourceId        );
            } finally {
                _releaseReply ($in);
            }
  } // releaseResource


  /* In CORBA there is client side and server side representation of
               a ResourceFactory.  This operation provides the mechanism for
               releasing the ResourceFactory from the CORBA environment on the
               server side.  The client has the responsibility to release its
               client side reference of the ResourceFactory. */
  public void shutdown () throws CF.ResourceFactoryPackage.ShutdownFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CF/ResourceFactory/ShutdownFailure:1.0"))
                    throw CF.ResourceFactoryPackage.ShutdownFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CF/ResourceFactory:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ResourceFactoryStub
