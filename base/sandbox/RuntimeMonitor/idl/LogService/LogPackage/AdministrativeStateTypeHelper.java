package LogService.LogPackage;


/**
* LogService/LogPackage/AdministrativeStateTypeHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LogService.idl
* Monday, May 4, 2009 2:19:36 PM EDT
*/


/* The AdministrativeStateType denotes the active logging state of
				   an
				   operational Log. When set to UNLOCKED the Log will accept records
				   for storage, per its operational parameters. When set to LOCKED the
				   Log will not accept new log records and records can be read or
				   deleted only. */
abstract public class AdministrativeStateTypeHelper
{
  private static String  _id = "IDL:LogService/Log/AdministrativeStateType:1.0";

  public static void insert (org.omg.CORBA.Any a, LogService.LogPackage.AdministrativeStateType that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static LogService.LogPackage.AdministrativeStateType extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (LogService.LogPackage.AdministrativeStateTypeHelper.id (), "AdministrativeStateType", new String[] { "LOCKED", "UNLOCKED"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static LogService.LogPackage.AdministrativeStateType read (org.omg.CORBA.portable.InputStream istream)
  {
    return LogService.LogPackage.AdministrativeStateType.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, LogService.LogPackage.AdministrativeStateType value)
  {
    ostream.write_long (value.value ());
  }

}
