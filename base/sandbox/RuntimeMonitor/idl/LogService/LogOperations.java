package LogService;


/**
* LogService/LogOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LogService.idl
* Monday, May 4, 2009 2:19:36 PM EDT
*/


/* A Log is utilized by CF and CORBA capable application components to
		   store
		   informational messages. These informational messages are referred to as
		   log records in this document. The interface provides operations for
		   writing
		   log records to a Log, retrieving LogRecords from a Log, controlling of a
		   Log,
		   and getting the status of a Log. */
public interface LogOperations 
{

  /* This operation provides the maximum number of bytes that the Log
  				   can store.
  				   The getMaxSizeis operation returns the integer number of bytes that
  				   the Log is capable of storing.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268C6203B5 */
  long getMaxSize ();

  /* This operation sets the maximum number of bytes that the Log can
  				   store.
  				   The setMaxSize operation sets the maximum size of the log measured
  				   in number of bytes.
  				   This operation does not return a value.
  				   The setMaxSize operation raises the InvalidParam exception if the
  				   size parameter passed
  				   in is less than the current size of the Log.
  				   The setMaxSizeis operation raises the InvalidParam exception if the
  				   size parameter passed
  				   in is less than the current size of the Log
  				   @roseuid 3B268CAF0207 */
  void setMaxSize (long size) throws LogService.LogPackage.InvalidParam;

  /* The getCurrentSize operation provides the current size of the
  				   log storage in bytes.
  				   The getCurrentSize operation returns the current size of the log
  				   storage in bytes
  				   (i.e. if the log contains no records, get CurrentSize will return a
  				   value of 0.).
  				   This operation does not return any exceptions.
  				   @roseuid 3B268D1500C4 */
  long getCurrentSize ();

  /* The getNumRecords operation provides the number of records
  				   present in the Log.
  				   The getNumRecords operation returns the current number of
  				   LogRecords contained in the Log.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268D2B00D9 */
  long getNumRecords ();

  /* The getLogFullAction operation provides the action taken when
  				   the Log becomes full.
  				   The getLogFullAction operation returns the Logs full action
  				   setting.
  				   This operation does not return any exceptions.
  				   @roseuid 3B268D4603BD */
  LogService.LogPackage.LogFullActionType getLogFullAction ();

  /* The setLogFullAction operation provides the mechanism to
  				   configure the action taken by a Log when it becomes full.
  				   The setLogFullAction operation sets the action taken by a Log when
  				   its
  				   maximum size has been reached to the value specified in the action
  				   parameter.
  				   The valid values for the action parameter, WRAP and HALT, are
  				   described by LogFullActionType.
  				   This operation does not return a value.
  				   This operation does not return any exceptions.
  				   @roseuid 3B268D6503B8 */
  void setLogFullAction (LogService.LogPackage.LogFullActionType action);

  /* The getAvailabilityStatus operation is used to read the
  				   availability status of the Log.
  				   The getAvailabilityStatus operation returns the current
  				   availability status of the Log.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268DD302CF */
  LogService.LogPackage.AvailabilityStatusType getAvailabilityStatus ();

  /* The getAdministrativeState is used to read the administrative
  				   state of the Log.
  				   The getAdministrativeState operation returns the current
  				   administrative state of the Log.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268DEC0376 */
  LogService.LogPackage.AdministrativeStateType getAdministrativeState ();

  /* The setAdministrativeState operation provides write access to
  				   the administrative state value.
  				   The setAdministrativeState operation sets the administrative state of the Log.
  				   This operation does not return a value.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268E0503AE */
  void setAdministrativeState (LogService.LogPackage.AdministrativeStateType state);

  /* The getOperationalState operation returns the operational state
  				   of the Log.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B268F0B02D8 */
  LogService.LogPackage.OperationalStateType getOperationalState ();

  /* The writeRecords operation provides the method for writing log
  				   records to the Log.
  				   The operation is defined as oneway to minimize client overhead
  				   while writing to the Log.
  				   The writeRecords operation adds each log record supplied in the
  				   records parameter to the Log.
  				   When there is insufficient storage to add one of the supplied log
  				   records
  				   to the Log, and the LogFullAction is set to HALT, the writeRecords
  				   method sets the availability
  				   status logFull state to true. (i.e. if 3 records are provided in
  				   the records parameter,
  				   and while trying to write the second record to the log, the record
  				   will not fit, then the
  				   Log is considered to be full therefore the second and third records
  				   will not be stored in the
  				   Log but the first record would have been successfully stored.).
  				   The writeRecords operation writes the current local time to the
  				   time field of each record written to the Log.
  				   The writeRecords operation assigns a unique record ID to the id
  				   field of the LogRecordlog record.
  				   Log records accepted for storage by the writeRecords are made
  				   available for retrieval in the order received.
  				   This operation does not return a value.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B32456C03B8 */
  void writeRecords (LogService.ProducerLogRecordType[] records);

  /* The getRecordIDFromTime operation is used to get the record ID
  				   of the first record in the
  				   log with a time-stamp that is greater than, or equal to, the time
  				   specified in the parameter.
  				   The getRecordIdFromTime operation returns the record ID of the
  				   first record in the log with a time
  				   stamp that is greater than, or equal to, the time specified in the
  				   fromTime parameter. If the
  				   Log does not contain a record that meets the criteria provided,
  				   then the RecordIDType
  				   returned shall correspond to the next record that will be recorded
  				   in the future. In this way, if
  				   this "future" recordID is passed into the retrieveById operation,
  				   an empty record will be returned,
  				   unless since that time records have been recorded. Note that if
  				   the time specified in the fromTime
  				   parameter is in the future, there is no guarantee that the
  				   resulting records returned will have a time
  				   stamp after the fromTime parameter if the returned recordID is
  				   subsequently used as input to the retrieveByID operation.
  				   The getRecordIdFromTime operation returns the record ID of the
  				   first record in the log with a time stamp that
  				   is greater than, or equal to, the time specified in the fromTime
  				   parameter. If the Log does not contain a
  				   record that meets the criteria provided, then the RecordIDType
  				   returned corresponds to the next record that
  				   will be recorded in the future. In this way, if this "future"
  				   recordID is passed into the retrieveById operation,
  				   an empty record will be returned, unless since that time records
  				   have been recorded.
  				   This operation raises no exceptions.
  				   @roseuid 3B33581D02C4 */
  long getRecordIdFromTime (LogService.LogPackage.LogTimeType fromTime);

  /* The retrieveById operation is used to get a specified number of
  				   records from a Log.
  				   The retrieveById operation returns a list of LogRecords that begins
  				   with the record specified by
  				   the currentID parameter and contains less than or equal to the
  				   number of records specified in the howMany parameter.
  				   The retrieveById operation sets the inout parameter currentId to
  				   the LogRecord Id of next record after
  				   the last record in the LogRecordSequence returned. If the record
  				   sequence returned exhausts the log records,
  				   then the currentId parameter sets the LogRecordId of where the log
  				   will resume writing logs on the next write.
  				   The retrieveById operation returns a LogRecordSequence that begins
  				   with the record specified by the
  				   currentId parameter. The number of records in the
  				   LogRecordSequencereturned by the retrieveById operation
  				   is equal to the number of records specified by the howMany
  				   parameter, or the number of records available if
  				   the number of records specified by the howMany parameter cannot be
  				   met. If the record specified by currentId
  				   does not exist, the retrieveById operation returns an empty list of
  				   LogRecords and leave the currentId unchanged.
  				   If the Log is empty, or has been exhausted, the retrieveById
  				   operation returns an empty list of LogRecords and
  				   leave the currentId unchanged.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B32456D000C */
  LogService.LogPackage.LogRecordType[] retrieveById (org.omg.CORBA.LongHolder currentId, int howMany);

  /* The clearLog operation provides the method for removing all of
  				   the LogRecords from the Log.
  				   The clearLog operation deletes all records from the Log. The
  				   clearLog operation sets the current
  				   size of the Log storage to zero. The clearLog operation sets the
  				   current number of records in the
  				   Log to zero. The clearLog operation sets the logFull availability
  				   status element to false.
  				   The clearLog operation does not return a value.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B32456D003E */
  void clearLog ();

  /* The destroy operation provides a means by which an instantiated
  				   Log may be torn down.
  				   The destroy operation releases all internal memory and/or storage
  				   allocated by theLog.
  				   The destroy operation tears down the component (i.e. released from
  				   the CORBA environment).
  				   The destroy operation does not return a value.
  				   This operation does not raise any exceptions.
  				   @roseuid 3B32456D007A */
  void destroy ();
} // interface LogOperations
