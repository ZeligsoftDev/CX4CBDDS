/**
 * Copyright 2018 ADLINK Technology Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.zeligsoft.base.toolingmodel.provider;

import com.zeligsoft.base.toolingmodel.util.ToolingModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ToolingModelItemProviderAdapterFactory extends
		ToolingModelAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ToolingModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.Palette} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaletteItemProvider paletteItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.Palette}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaletteAdapter() {
		if (paletteItemProvider == null) {
			paletteItemProvider = new PaletteItemProvider(this);
		}

		return paletteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.Drawer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DrawerItemProvider drawerItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.Drawer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDrawerAdapter() {
		if (drawerItemProvider == null) {
			drawerItemProvider = new DrawerItemProvider(this);
		}

		return drawerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.Stack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StackItemProvider stackItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.Stack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStackAdapter() {
		if (stackItemProvider == null) {
			stackItemProvider = new StackItemProvider(this);
		}

		return stackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.CreationTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreationToolItemProvider creationToolItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.CreationTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreationToolAdapter() {
		if (creationToolItemProvider == null) {
			creationToolItemProvider = new CreationToolItemProvider(this);
		}

		return creationToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.LinkTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkToolItemProvider linkToolItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.LinkTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkToolAdapter() {
		if (linkToolItemProvider == null) {
			linkToolItemProvider = new LinkToolItemProvider(this);
		}

		return linkToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.PropertySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertySourceItemProvider propertySourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.PropertySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertySourceAdapter() {
		if (propertySourceItemProvider == null) {
			propertySourceItemProvider = new PropertySourceItemProvider(this);
		}

		return propertySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.PropertyDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyDefinitionItemProvider propertyDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.PropertyDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyDefinitionAdapter() {
		if (propertyDefinitionItemProvider == null) {
			propertyDefinitionItemProvider = new PropertyDefinitionItemProvider(
					this);
		}

		return propertyDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.PropertySheet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertySheetItemProvider propertySheetItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.PropertySheet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertySheetAdapter() {
		if (propertySheetItemProvider == null) {
			propertySheetItemProvider = new PropertySheetItemProvider(this);
		}

		return propertySheetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.TextualDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextualDefinitionItemProvider textualDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.TextualDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextualDefinitionAdapter() {
		if (textualDefinitionItemProvider == null) {
			textualDefinitionItemProvider = new TextualDefinitionItemProvider(
					this);
		}

		return textualDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.PrimitiveDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveDefinitionItemProvider primitiveDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.PrimitiveDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveDefinitionAdapter() {
		if (primitiveDefinitionItemProvider == null) {
			primitiveDefinitionItemProvider = new PrimitiveDefinitionItemProvider(
					this);
		}

		return primitiveDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.NamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementItemProvider namedElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.NamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementAdapter() {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.MenuModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuModelItemProvider menuModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.MenuModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuModelAdapter() {
		if (menuModelItemProvider == null) {
			menuModelItemProvider = new MenuModelItemProvider(this);
		}

		return menuModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.MenuInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuInstanceItemProvider menuInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.MenuInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuInstanceAdapter() {
		if (menuInstanceItemProvider == null) {
			menuInstanceItemProvider = new MenuInstanceItemProvider(this);
		}

		return menuInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.CreateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateActionItemProvider createActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.CreateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateActionAdapter() {
		if (createActionItemProvider == null) {
			createActionItemProvider = new CreateActionItemProvider(this);
		}

		return createActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.DelegateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelegateActionItemProvider delegateActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.DelegateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelegateActionAdapter() {
		if (delegateActionItemProvider == null) {
			delegateActionItemProvider = new DelegateActionItemProvider(this);
		}

		return delegateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.MenuSeparator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuSeparatorItemProvider menuSeparatorItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.MenuSeparator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuSeparatorAdapter() {
		if (menuSeparatorItemProvider == null) {
			menuSeparatorItemProvider = new MenuSeparatorItemProvider(this);
		}

		return menuSeparatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.OawExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OawExpressionItemProvider oawExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.OawExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOawExpressionAdapter() {
		if (oawExpressionItemProvider == null) {
			oawExpressionItemProvider = new OawExpressionItemProvider(this);
		}

		return oawExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.zeligsoft.base.toolingmodel.OawXtend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OawXtendItemProvider oawXtendItemProvider;

	/**
	 * This creates an adapter for a {@link com.zeligsoft.base.toolingmodel.OawXtend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOawXtendAdapter() {
		if (oawXtendItemProvider == null) {
			oawXtendItemProvider = new OawXtendItemProvider(this);
		}

		return oawXtendItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (paletteItemProvider != null)
			paletteItemProvider.dispose();
		if (drawerItemProvider != null)
			drawerItemProvider.dispose();
		if (stackItemProvider != null)
			stackItemProvider.dispose();
		if (creationToolItemProvider != null)
			creationToolItemProvider.dispose();
		if (linkToolItemProvider != null)
			linkToolItemProvider.dispose();
		if (propertySourceItemProvider != null)
			propertySourceItemProvider.dispose();
		if (propertyDefinitionItemProvider != null)
			propertyDefinitionItemProvider.dispose();
		if (propertySheetItemProvider != null)
			propertySheetItemProvider.dispose();
		if (textualDefinitionItemProvider != null)
			textualDefinitionItemProvider.dispose();
		if (primitiveDefinitionItemProvider != null)
			primitiveDefinitionItemProvider.dispose();
		if (namedElementItemProvider != null)
			namedElementItemProvider.dispose();
		if (menuModelItemProvider != null)
			menuModelItemProvider.dispose();
		if (menuInstanceItemProvider != null)
			menuInstanceItemProvider.dispose();
		if (menuItemProvider != null)
			menuItemProvider.dispose();
		if (createActionItemProvider != null)
			createActionItemProvider.dispose();
		if (delegateActionItemProvider != null)
			delegateActionItemProvider.dispose();
		if (menuSeparatorItemProvider != null)
			menuSeparatorItemProvider.dispose();
		if (oawExpressionItemProvider != null)
			oawExpressionItemProvider.dispose();
		if (oawXtendItemProvider != null)
			oawXtendItemProvider.dispose();
	}

}
