«REM»

 Copyright 2018 ADLINK Technology Limited.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

«ENDREM»

«IMPORT uml»
«IMPORT ZeligsoftDeployment»
«EXTENSION extensions::DeploymentUtilsFuncs»
«EXTENSION extensions::StringHelpers»

«REM»TI OSEck Makefile«ENDREM»

«DEFINE makefile FOR Component»
«FILE "Makefile"»
«EXPAND templates::common::Copyright::copyrightGNUMakefile FOR this»

# target to build
TARGET= «this.getQualifiedName().ToMakeVar()»

# this to go into the host make fragment for DOS
MKDIR= mkdir
RMDIR= rmdir /s /q
NUL = nul
RM = del /f

#-include host.mk

# defaults for now until we get the Path Variable look up implemented
TI_CCSTUDIO_DIR ?= C:/CCStudio_v3.3
OSECK_DIR?= C:/OSE/OSEck_3.3.1
DEFAULT ?= ./

«FOREACH this.ownedElement.typeSelect(Property) AS property»
	«IF isPartBuildEnvironment( property )»
		«IF isBuildEnvironmentMatch( property.type, "TIOSEck_DefaultBuildEnvironment" )»
			«IF InstanceValue.isInstance( property.defaultValue )»
# compiler			
CC= «getBuildEnvironmentProperty( property, "compiler" )»
DEFINES= «getBuildEnvironmentProperty( property, "define" )»
UNDEFINES= «getBuildEnvironmentProperty( property, "undefine" )»
INCLUDES= «getBuildEnvironmentProperty( property, "include" )»
CFLAGS= «getBuildEnvironmentProperty( property, "compilerFlags" )»
CPPFLAGS= «getBuildEnvironmentProperty( property, "preprocessorFlags" )» \
		 $(foreach def,$(DEFINES),-D="$(def)") \
		 $(foreach und,$(UNDEFINES),-U="$(und)") \
         $(foreach dir,$(INCLUDES),-I="$(dir)")

# linker
LD= «getBuildEnvironmentProperty( property, "linker" )»
LIBS= «getBuildEnvironmentProperty( property, "library" )»
LIBDIRS = «getBuildEnvironmentProperty( property, "libraryPath" )»
LNKCMD= «getBuildEnvironmentProperty( property, "linkCommand" )»
LDFLAGS= «getBuildEnvironmentProperty( property, "linkerFlags" )» \
		 $(foreach dir,$(LIBDIRS),-i="$(dir)") \
         $(foreach lib,$(LIBS),-l="$(lib)")         
			«ENDIF»
		«ENDIF»
	«ENDIF»
«ENDFOREACH»


#include the list of sources
-include SRCFILES.mk

# directory for build artifacts
OBJDIR= obj
OBJECTS = $(patsubst %.c,$(OBJDIR)/%.obj,$(SOURCES))

# add source paths to the include paths
INCLUDES += $(dir $(SOURCES))

all: prepare $(TARGET).out

prepare:
	-@$(MKDIR) "$(OBJDIR)" 2> $(NUL)
	
clean:
	-@$(RMDIR) "$(OBJDIR)" 2> $(NUL) 

rebuild: clean all

# include the depenency files
-include $(SOURCES:%.c=$(OBJDIR)/%.pp)

$(OBJDIR)/%.obj : %.c
	-@$(MKDIR) "$(OBJDIR)/$(dir $<)" 2> $(NUL)
	$(CC) $(CPPFLAGS) -fr="$(OBJDIR)/$(dir $<)" -ppd="$(basename $@).pp" $<
	$(CC) $(CPPFLAGS) $(CFLAGS) -fs="$(OBJDIR)/$(dir $<)" -fr="$(OBJDIR)/$(dir $<)" $<

$(TARGET).out: $(OBJECTS) $(LNKCMD) SRCFILES.mk
	-@echo $(LDFLAGS) -m $(TARGET).map -o$(TARGET).out > makefile.Custom.lkf
	-@echo $(OBJECTS)>> makefile.Custom.lkf
	-@echo $(LNKCMD)>> makefile.Custom.lkf
	$(LD) -@"makefile.Custom.lkf"
	-@$(RM) makefile.Custom.lkf


.PHONY: all clean rebuild


«ENDFILE»
«ENDDEFINE»
