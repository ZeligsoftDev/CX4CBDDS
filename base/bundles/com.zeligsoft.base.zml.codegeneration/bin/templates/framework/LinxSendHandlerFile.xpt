«REM»
 Copyright 2018 ADLINK Technology Limited.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

«ENDREM»
 
«IMPORT uml»

«EXTENSION templates::common»


«DEFINE linxSendHandlerHeaderFile FOR Model»
«FILE "fwk/C/transports/send/LinxSendHandler/zceLinxSendHandler.h"»

/**
 * @file: zceLinxSendHandler.h
 * 
 */

#ifndef __ZCELINXSENDHANDLER_H
#define __ZCELINXSENDHANDLER_H


#include "zceSendHandler.h"
#include "zce.sig"


#ifdef __cplusplus
extern "C"
{
#endif


/*************************************
 *								     *
 * LinxSendHandler struct + typedefs *
 *								     *
 *************************************/

/**
 * The zce_struct_LinxSendHandler forward declared (implementation hidden from the user)
 */
struct zce_struct_LinxSendHandler;

typedef struct zce_struct_LinxSendHandler* zceLinxSendHandler;
typedef struct zce_struct_LinxSendData* zceLinxSendData;

//typedef  SigLinxMsgHeader zceLinxMsg;
	
void zceLinxSendData_construct(zceLinxSendData self, 
	int connId,
	int poolId,
	int connected,
	char * qName
	ZCE_EXC_ENV_ARG);
	
struct zce_struct_LinxSendData
{
	int connId;
	int poolId;	
	unsigned short connected;
	char toNode[ZCE_NAMES_MAX_LEN_];
	PROCESS toNodePid;
};

zceLinxSendData zceLinxSendData_allocate(ZCE_EXC_ENV_ARG);

/**********************************
 *							      *
 * LinxSendHandler base functions *
 *                                *
 **********************************/

/**
 * zceLinxSendHandler_construct: LinxSendHandler constructor
 * Following the constructor/destructor pattern, every struct has its own matching pair of construct/destruct functions
 * @param self The zceLinxSendHandler struct to which this function applies to.
 */
void zceLinxSendHandler_construct(zceLinxSendHandler self ZCE_EXC_ENV_ARG);

/**
 * zceLinxSendHandler_destruct: C1's container destructor
 * Following the constructor/destructor pattern, every struct has its own matching pair of construct/destruct functions
 * @param self The zceLinxSendHandler struct to which this function applies to.
 */
void zceLINXSendHandler_destruct(zceLinxSendHandler self ZCE_EXC_ENV_ARG);

zceLinxSendHandler zceLinxSendHandler_allocate(ZCE_EXC_ENV_SINGLE_ARG);

void zceLinxSendHandler_init(zceLinxSendHandler self, void* commData ZCE_EXC_ENV_ARG);

/**************************************
 *							          *
 * LinxSendHandler sendData functions *
 *                                    *
 **************************************/
void zceLinxSendHandler_sendData(zceSendHandler self, void* commData, char* msg, int len ZCE_EXC_ENV_ARG);

void * zceLinxSendHandler_GetTXBuffer(zceSendHandler self, void* commData, int len  ZCE_EXC_ENV_ARG);

#ifdef __cplusplus
}
#endif

#endif     /* __ZCELINXSENDHANDLER_H */


/* End-Of-File */
/* ------------------------------------------------------------------------------ */
«ENDFILE»
«ENDDEFINE»