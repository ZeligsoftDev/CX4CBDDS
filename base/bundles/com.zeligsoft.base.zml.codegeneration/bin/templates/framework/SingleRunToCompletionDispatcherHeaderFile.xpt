«REM»
 Copyright 2018 ADLINK Technology Limited.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

«ENDREM»
 
«IMPORT uml»

«EXTENSION templates::common»


«DEFINE singleRunToCompletionDispatcherHeaderFile FOR Model»
«FILE "fwk/C/dispatchers/SingleMsgRunToCompletion/zceSingleMsgRunToCompletionDispatcher.h"»

/**
 * @file: zceSingleMsgRunToCompletionDispatcher.h
 * 
 */

#ifndef __ZCESINGLEMSGRUNTOCOMPLETIONDISPATCHER_H
#define __ZCESINGLEMSGRUNTOCOMPLETIONDISPATCHER_H

#include "zceReceiveHandler.h"

#ifdef __cplusplus
extern "C"
{
#endif


typedef void (*DispatchCallbackApiTypedef)(void* port, char* buffer, int bufLen, int iPortIndex, int iConnIndex ZCE_EXC_ENV_ARG);

struct zceDispatcherTable
{
	DispatchCallbackApiTypedef * api_;/*Ptr to array of callbck functions*/
	void *data_;
	int port_index_;
	int conn_index_;
};

typedef struct zceDispatcherTable zceDispatcherTable;

/********************************************************
 *								                        *
 * SingleMsgRunToCompletionDispatcher struct + typedefs *
 *								                        *
 ********************************************************/
struct zce_struct_SingleMsgRunToCompletionDispatcher;

typedef struct zce_struct_SingleMsgRunToCompletionDispatcher* zceSingleMsgRunToCompletionDispatcher;

/*****************************************************
 *							                         *
 * SingleMsgRunToCompletionDispatcher base functions *
 *                                                   *
 *****************************************************/

/**
  * zceSingleMsgRunToCompletionDispatcher_construct: Dispatcher constructor
  * Following the constructor/destructor pattern, every struct has its own matching pair of construct/destruct functions
  * @param dispatcher The zceDispatcher struct to which this function applies to.
  * @param numConnection The int that represents the number of receiveHandler will be created.
  */
void zceSingleMsgRunToCompletionDispatcher_construct(zceSingleMsgRunToCompletionDispatcher self, int numConnection ZCE_EXC_ENV_ARG);

/**
  * zceSingleMsgRunToCompletionDispatcher_destruct: Dispatcher destructor
  * Following the constructor/destructor pattern, every struct has its own matching pair of construct/destruct functions
  * @param dispatcher The zceDispatcher struct to which this function applies to.
  */
void zceSingleMsgRunToCompletionDispatcher_destruct(zceSingleMsgRunToCompletionDispatcher self ZCE_EXC_ENV_ARG);

zceSingleMsgRunToCompletionDispatcher zceSingleMsgRunToCompletionDispatcher_allocate(ZCE_EXC_ENV_SINGLE_ARG);

void zceSingleMsgRunToCompletionDispatcher_setComponentPortTable(zceSingleMsgRunToCompletionDispatcher self, struct zceDispatcherTable* table ZCE_EXC_ENV_ARG);

void zceSingleMsgRunToCompletionDispatcher_setComponentPortTableEntry(zceSingleMsgRunToCompletionDispatcher self, int index, DispatchCallbackApiTypedef* api, void* data, int port_index, int conn_index ZCE_EXC_ENV_ARG);

const zceDispatcherTable*  zceSingleMsgRunToCompletionDispatcher_getComponentPortTableEntry(zceSingleMsgRunToCompletionDispatcher self, int index ZCE_EXC_ENV_ARG);

void zceSingleMsgRunToCompletionDispatcher_setReceiveHandler(zceSingleMsgRunToCompletionDispatcher self, int index, zceReceiveHandler handler ZCE_EXC_ENV_ARG);

/*******************************
 *							   *
 * Dispatcher Receiving loop   *
 *							   *
 ******************************/
/**
 * zceDispatcher_receivingLoop: Dispatcher receivingLoop function
 * The receiving loop function implements RunToComplationDispatcher method to pickup message from different senders.
 */
void zceSingleMsgRunToCompletionDispatcher_receivingLoop(zceDispatcher basePtr ZCE_EXC_ENV_ARG);

void zceSingleMsgRunToCompletionDispatcher_processBuffer(zceDispatcher basePtr, char* buffer, int bufLen ZCE_EXC_ENV_ARG);

zceReceiveHandler zceSingleMsgRunToCompletionDispatcher_getReceiveHandler(zceSingleMsgRunToCompletionDispatcher self, int index ZCE_EXC_ENV_ARG);

#ifdef __cplusplus
}
#endif

#endif     /* __ZCESINGLEMSGRUNTOCOMPLETIONDISPATCHER_H */

/* End-Of-File */
/* ------------------------------------------------------------------------------ */
«ENDFILE»
«ENDDEFINE»