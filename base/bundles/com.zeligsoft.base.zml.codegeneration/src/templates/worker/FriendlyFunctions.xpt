«REM»

Copyright 2018 ADLINK Technology Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

«ENDREM»

«IMPORT uml»

«EXTENSION extensions::StringUtils»


«DEFINE zceFriendlyFunctionDefs FOR String»
/**
 * «this»_getFriendlyId: friendly id getter
 * A component may have a string based friendly id if ZCE_NAMES_ is defined. This function allows one to retrieve this friendly id.
 * @param self The «this» struct to which this function applies.
 * @return A const char holding the friendly id.
 */
const char* «this»_getFriendlyId(«this» self ZCE_EXC_ENV_ARG); 

/**
 * «this»_setFriendlyId: friendly id setter
 * A component may have a string based friendly id if ZCE_NAMES_ is defined. This function allows one to set this friendly id.
 * @param self The «this» struct to which this function applies.
 * @param pszFriendlyId The const char* that holds the new friendly id to be set.
 */
void «this»_setFriendlyId(«this» self, const char* pszFriendlyId ZCE_EXC_ENV_ARG); 
«ENDDEFINE»

«DEFINE zceFriendlyFunctionWorkerImpls FOR Type»
const char* zce«name»Worker_getFriendlyId(zce«name»Worker self ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION(NULL)
	return zce«name»Container_getFriendlyId(self->container_);
}

void zce«name»Worker_setFriendlyId(zce«name»Worker self, const char* pszFriendlyId ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION_VOID
	zce«name»Container_setFriendlyId(self->container_, pszFriendlyId);
}
«ENDDEFINE»

«DEFINE zceFriendlyFunctionImpls FOR String»
const char* «this»_getFriendlyId(«this» self ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION(NULL)
	return self->friendly_id_;
}

void «this»_setFriendlyId(«this» self, const char* pszFriendlyId ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION_VOID
	OE_STRNCPY(self->friendly_id_, pszFriendlyId, ZCE_NAMES_MAX_LEN_);
	self->friendly_id_[ZCE_NAMES_MAX_LEN_-1] = 0;
}
«ENDDEFINE»

«REM»Not needed for alpha
«DEFINE internalIdFunctionDefs FOR Component»
/**
 * zce«name»Worker_getInternalId: internal id getter
 * Allows one to retrieve internal id.
 * @param self The zce«name»Worker struct to which this function applies.
 * @return internal id.
 */
long zce«name»Worker_getInternalId(zce«name»Worker self ZCE_EXC_ENV_ARG); 

/**
 * zce«name»Worker_setInternaId: internal id setter
 * Allows one to set the internal id.
 * @param self The zce«name»Worker struct to which this function applies.
 * @param lInternalId The long that holds the new internal id to be set.
 */
void zce«name»Worker_setInternalId(zce«name»Worker self, long lInternalId ZCE_EXC_ENV_ARG); 
«ENDDEFINE»

«DEFINE internalIdFunctionImpls FOR Component»
long zce«name»Worker_getInternalId(zce«name»Worker self ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION(NULL)
	return zce«name»Container_getInternalId(self->container_);
}

void zce«name»Worker_setInternalId(zce«name»Worker self, long lInternalId ZCE_EXC_ENV_ARG)
{
	ZCE_ASSERT_EXCEPTION_VOID
	zce«name»Container_setInternalId(self->container_, lInternalId);
}
«ENDDEFINE»
«ENDREM»