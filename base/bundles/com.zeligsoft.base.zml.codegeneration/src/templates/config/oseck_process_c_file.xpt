«REM»

Copyright 2018 ADLINK Technology Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

«ENDREM»

«IMPORT uml»
«IMPORT ZML»
«EXTENSION extensions::DeploymentUtilsFuncs»
«EXTENSION extensions::FileNames»
«EXTENSION extensions::FunctionNames»
«EXTENSION extensions::CounterFactoryToString»

«DEFINE CREATE_FILES FOR ZeligsoftDeployment::DeploymentPart -»

	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS alloc -»
		«FOREACH alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS targetpart -»				
			«IF targetpart == this -»			
				«FOREACH alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS sourcepart -»
				
					
				
					«IF isStereotypeAppliedOnPart(sourcepart.type, "ZML::SwSchedulableResource")!=null -»
					
						«FILE "cfgs/"+ getNamedElementName((ZeligsoftDeployment::Deployment)this.owner)+"/"+getMySWPlatformName(this)+"/zce"+getNamedElementName(sourcepart)+".c" -»												

#include "zce«getNamedElementName(sourcepart)».h"
#include "zce«getNamedElementName(sourcepart)»Ids.h"
«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
	«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
		«IF process_target == sourcepart -»			
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
				«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»				
#include "zce«process_source.type.name»Container.h"
#include "zce«process_source.name»Configurator.h"						
				«ENDIF -»
			«ENDFOREACH -»
		«ENDIF -»
	«ENDFOREACH -»
«ENDFOREACH -»
#include "zceSingleMsgRunToCompletionDispatcher.h"
#include "zceLinxSendHandler.h"
#include "zceLinxReceiveHandler.h"

void «getNamedElementName(sourcepart)»Entry()
{
	«CreateCounter("ProcEntry_ContainerCounter") -»	
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart »			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»															                                                    
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»
						«CounterIncrement("ProcEntry_ContainerCounter") -»
					«ENDIF -»					
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	«IF IsCounterGreaterThan("ProcEntry_ContainerCounter","0")=="true" -»		
	/*num containers is: «CounterGet("ProcEntry_ContainerCounter")»*/
	void** containers = ZCE_NEW_ARRAY(void*, «CounterGet("ProcEntry_ContainerCounter")»);
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»				
	zce«process_source.type.name»Container «process_source.name»Container = 0;
	zce«process_source.name»Configurator «process_source.name»Configurator = 0;
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»	
	int task_component_count = 0;		
	«CreateCounter("ProcEntry_LinxSRIOBusConnectionsCounter")»
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS bus_target -»									
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS connection_source -»						
				«IF getModelElementForConnector(connection_source)!=null -»					
					«IF isStereotypeAppliedOnPart(bus_target.type,"ZML::SwBus")!=null -»						
						«IF isDeploymentPartTypeNamed(bus_target,"LINX_SRIO")=="true" -»
							«CounterIncrement("ProcEntry_LinxSRIOBusConnectionsCounter") -»
						«ENDIF -»						
					«ENDIF -»					
				«ENDIF -»							
			«ENDFOREACH -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true" -»
	int local_connection_count = «CounterGet("ProcEntry_LinxSRIOBusConnectionsCounter")»;
	zceSendHandler* sendHandler = ZCE_NEW_ARRAY(zceSendHandler,/*num send handlers*/(eEND_OF_«getNamedElementName(sourcepart)»_SENDHANDLER_ENUM));
	zceLinxReceiveHandler receiveHandler = 0;	
	zceSingleMsgRunToCompletionDispatcher dispatcher = 0;
	struct zceDispatcherTable* table = 0;		
	«ENDIF -»
	
	
	/* Allocate and construct all component instances */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»					
	«process_source.name»Container = zce«process_source.type.name»Container_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zce«process_source.type.name»Container_construct(«process_source.name»Container, task_component_count++ ZCE_EXC_ENV_PARAM);
	containers[e_«getNamedElementName(sourcepart)»_COMPPART_«process_source.name»] = (void*)«process_source.name»Container;
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	
	/* Allocate and construct all component configurators */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»						
	«process_source.name»Configurator = zce«process_source.name»Configurator_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zce«process_source.name»Configurator_construct(«process_source.name»Configurator, «process_source.name»Container ZCE_EXC_ENV_PARAM);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	/* Allocate and construct all send handlers */	
	«CreateCounter("ProcEntry_FunctionBusConnectionsCounter")»
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS bus_target -»									
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS connection_source -»						
				«IF getModelElementForConnector(connection_source)!=null -»					
					«IF isStereotypeAppliedOnPart(bus_target.type,"ZML::SwBus")!=null -»						
						«IF isDeploymentPartTypeNamed(bus_target,"FUNCBus")=="true" -»
							«CounterIncrement("ProcEntry_FunctionBusConnectionsCounter")»
						«ENDIF -»						
					«ENDIF -»					
				«ENDIF -»							
			«ENDFOREACH -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	«IF IsCounterGreaterThan("ProcEntry_FunctionBusConnectionsCounter","0")=="true"  -»
	«ENDIF -»
	«CreateCounter("ProcEntry_LinxSRIOBusConnectionsCounter") -»
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS bus_target -»									
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS connection_source -»						
				«IF getModelElementForConnector(connection_source)!=null -»					
					«IF isStereotypeAppliedOnPart(bus_target.type,"ZML::SwBus")!=null -»						
						«IF isDeploymentPartTypeNamed(bus_target,"LINX_SRIO")=="true" -»
							«CounterIncrement("ProcEntry_LinxSRIOBusConnectionsCounter") -»
						«ENDIF -»						
					«ENDIF -»					
				«ENDIF -»							
			«ENDFOREACH -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true" -»
	sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx] = (zceSendHandler)zceLinxSendHandler_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zceLinxSendHandler_construct((zceLinxSendHandler)sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx] ZCE_EXC_ENV_PARAM);			
	dispatcher = zceSingleMsgRunToCompletionDispatcher_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zceSingleMsgRunToCompletionDispatcher_construct(dispatcher, «CounterGet("ProcEntry_LinxSRIOBusConnectionsCounter")» ZCE_EXC_ENV_PARAM);		
	«ENDIF -»
	
	/*Create dispatcher table:*/
	table = ZCE_NEW_ARRAY(struct zceDispatcherTable, local_connection_count);
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS bus_target -»									
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS connection_source -»						
				«IF getModelElementForConnector(connection_source)!=null -»					
					«IF isStereotypeAppliedOnPart(bus_target.type,"ZML::SwBus")!=null -»						
						«IF isDeploymentPartTypeNamed(bus_target,"LINX_SRIO")=="true" -»	
	table[eCONN_«connection_source.name»_INT_ID].api_ = ZCE_NEW_ARRAY(DispatchCallbackApiTypedef, 1);
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS component_alloc -»
		«FOREACH component_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS task_target -»
			«IF task_target == sourcepart -»
				«FOREACH component_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS component_source -»
					«FOREACH component_source.type.ownedElement.typeSelect(Port) AS p -»
					«IF !p.provided.isEmpty»
					«CreateCounter("PortOperationCounter")»
						«FOREACH p.provided.getOperations() AS op -»
	table[eCONN_«connection_source.name»_INT_ID].api_[«CounterGet("PortOperationCounter")»] = zceProvidesPort_«p.provided.get(0).name»_«op.name»;
						«CounterIncrement("PortOperationCounter")»
						«ENDFOREACH -»
	table[eCONN_«connection_source.name»_INT_ID].data_ = (void*)zce«component_source.type.name»Container_get«p.name»(«component_source.name»Container ZCE_EXC_ENV_PARAM);
	table[eCONN_«connection_source.name»_INT_ID].conn_index_ = 0;
	table[eCONN_«connection_source.name»_INT_ID].port_index_ = 0;
					«ENDIF»
					«ENDFOREACH -»
				«ENDFOREACH -»
			«ENDIF -»	
		«ENDFOREACH -»
	«ENDFOREACH -»
						«ENDIF -»						
					«ENDIF -»					
				«ENDIF -»							
			«ENDFOREACH -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true"  -»
	zceSingleMsgRunToCompletionDispatcher_setComponentPortTable(dispatcher, table ZCE_EXC_ENV_PARAM);
	«ENDIF -»

	/* All component container's receive init */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»							
	zce«process_source.type.name»Container_receive_init(«process_source.name»Container, (zceBaseConfigurator)«process_source.name»Configurator ZCE_EXC_ENV_PARAM);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
		
	/* Allocate and construct all receive handlers */
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true" -»
	receiveHandler = zceLinxReceiveHandler_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zceLinxReceiveHandler_construct(receiveHandler, (zceDispatcher)dispatcher ZCE_EXC_ENV_PARAM);
	zceSingleMsgRunToCompletionDispatcher_setReceiveHandler(dispatcher, 0, (zceReceiveHandler)receiveHandler ZCE_EXC_ENV_PARAM);
	«ENDIF -»
	
	/* All component container's send init */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»
	zce«process_source.type.name»Container_send_init(«process_source.name»Container, (zceSendHandler*)sendHandler, containers ZCE_EXC_ENV_PARAM);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
		
	/*  Call start on each component container    */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»							
	zce«process_source.type.name»Container_start(«process_source.name»Container);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	/*  Call listen on each recieve handler(if any)*/
	((zceReceiveHandler)receiveHandler)->listen(((zceReceiveHandler)receiveHandler), False ZCE_EXC_ENV_PARAM);
		
	/*  Call stop on each component container    */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»
	zce«process_source.type.name»Container_stop(«process_source.name»Container);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	/*  Call release on each component container    */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»
	zce«process_source.type.name»Container_release(«process_source.name»Container);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	/* Destruct and delete all component's container and configurator */
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_target -»				
			«IF process_target == sourcepart -»			
				«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS process_source -»				
					«IF isStereotypeAppliedOnPart(process_source.type, "ZML::ComponentInterface")!=null -»	
	zce«process_source.type.name»Container_destruct(«process_source.name»Container ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(«process_source.name»Container);
	zce«process_source.name»Configurator_destruct(«process_source.name»Configurator ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(«process_source.name»Configurator);
					«ENDIF -»
				«ENDFOREACH -»
			«ENDIF -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	«FOREACH this.owner.ownedElement.typeSelect(ZeligsoftDeployment::Allocation) AS process_alloc -»
		«FOREACH process_alloc.target.typeSelect(ZeligsoftDeployment::DeploymentPart) AS bus_target -»									
			«FOREACH process_alloc.source.typeSelect(ZeligsoftDeployment::DeploymentPart) AS connection_source -»						
				«IF getModelElementForConnector(connection_source)!=null -»					
					«IF isStereotypeAppliedOnPart(bus_target.type,"ZML::SwBus")!=null -»						
						«IF isDeploymentPartTypeNamed(bus_target,"FUNCBus")=="true" -»
						«ENDIF -»						
					«ENDIF -»					
				«ENDIF -»							
			«ENDFOREACH -»
		«ENDFOREACH -»
	«ENDFOREACH -»
	
	/* Destruct and delete all send handlers */
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true" -»		
	zceLinxSendHandler_destruct((zceLinxSendHandler)sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx] ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx]);
	ZCE_DELETE(sendHandler);
	«ENDIF -»
	
	/* Destruct and delete all component's container and configurator */
	«IF IsCounterGreaterThan("ProcEntry_LinxSRIOBusConnectionsCounter","0")=="true" -»
	((zceReceiveHandler)receiveHandler)->release(((zceReceiveHandler)receiveHandler) ZCE_EXC_ENV_PARAM);
	zceLinxReceiveHandler_destruct(receiveHandler ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(receiveHandler);
	«ENDIF -»
	
	zceLinxSendHandler_destruct((zceLinxSendHandler)sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx] ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(sendHandler[e_«getNamedElementName(sourcepart)»_SENDHANDLER_Linx]);
	ZCE_DELETE(sendHandler);

	ZCE_DELETE(containers);
	«ENDIF -»	
	DBGPRINTMSG("Task: «getNamedElementName(sourcepart)» exiting!\n");
}
						«ENDFILE»
					«ENDIF»									
				«ENDFOREACH»			
			«ENDIF»			
		«ENDFOREACH»	
	«ENDFOREACH»
«ENDDEFINE»


«REM»

	/*num containers is: 1*/
	void** containers = ZCE_NEW_ARRAY(void*, 1);
	zceSendHandler* sendHandler = ZCE_NEW_ARRAY(zceSendHandler,/*num send handlers*/(eEND_OF_P1_SENDHANDLER_ENUM));

	zcec1Container c11Container = 0;
	zcec11Configurator c11Configurator = 0;
	int task_component_count = 0;

	/* Allocate and construct all component instances */
	c11Container = zcec1Container_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zcec1Container_construct(c11Container, task_component_count++ ZCE_EXC_ENV_PARAM);
	containers[e_P1_COMPPART_c11] = (void*)c11Container;

	/* Allocate and construct all component configurators */
	c11Configurator = zcec11Configurator_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zcec11Configurator_construct(c11Configurator, c11Container ZCE_EXC_ENV_PARAM);

	/* Allocate and construct all send handlers */
	sendHandler[e_P1_SENDHANDLER_Linx] = (zceSendHandler)zceLinxSendHandler_allocate(ZCE_EXC_ENV_SINGLE_PARAM);
	zceLinxSendHandler_construct((zceLinxSendHandler)sendHandler[e_P1_SENDHANDLER_Linx] ZCE_EXC_ENV_PARAM);

	
	/* All component container's receive init */
	zcec1Container_receive_init(c11Container, (zceBaseConfigurator)c11Configurator ZCE_EXC_ENV_PARAM);


	/* All component container's send init */
	zcec1Container_send_init(c11Container, (zceSendHandler*)sendHandler, containers ZCE_EXC_ENV_PARAM);

	/*  Call start on each component container    */
	zcec1Container_start(c11Container);


	/*  Call stop on each component container    */
	zcec1Container_stop(c11Container);

	/*  Call release on each component container    */
	zcec1Container_release(c11Container);

	/* Destruct and delete all component's container and configurator */
	zcec1Container_destruct(c11Container ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(c11Container);
	zcec11Configurator_destruct(c11Configurator ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(c11Configurator);

	/* Destruct and delete all send handlers */
	zceLinxSendHandler_destruct((zceLinxSendHandler)sendHandler[e_P1_SENDHANDLER_Linx] ZCE_EXC_ENV_PARAM);
	ZCE_DELETE(sendHandler[e_P1_SENDHANDLER_Linx]);
	ZCE_DELETE(sendHandler);


	ZCE_DELETE(containers);

«ENDREM»
