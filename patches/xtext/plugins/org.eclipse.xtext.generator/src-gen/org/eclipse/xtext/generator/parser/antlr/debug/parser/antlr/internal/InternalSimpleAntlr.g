/*
 * generated by Xtext
 */
grammar InternalSimpleAntlr;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.xtext.generator.parser.antlr.debug.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.generator.parser.antlr.debug.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.generator.parser.antlr.debug.services.SimpleAntlrGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SimpleAntlrGrammarAccess grammarAccess;
 	
    public InternalSimpleAntlrParser(TokenStream input, SimpleAntlrGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AntlrGrammar";	
   	}
   	
   	@Override
   	protected SimpleAntlrGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAntlrGrammar
entryRuleAntlrGrammar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAntlrGrammarRule()); }
	 iv_ruleAntlrGrammar=ruleAntlrGrammar 
	 { $current=$iv_ruleAntlrGrammar.current; } 
	 EOF 
;

// Rule AntlrGrammar
ruleAntlrGrammar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='grammar' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAntlrGrammarAccess().getGrammarKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAntlrGrammarAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAntlrGrammarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAntlrGrammarAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAntlrGrammarAccess().getOptionsOptionsParserRuleCall_3_0()); 
	    }
		lv_options_3_0=ruleOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAntlrGrammarRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Options");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAntlrGrammarAccess().getRulesRuleParserRuleCall_4_0()); 
	    }
		lv_rules_4_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAntlrGrammarRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_4_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleOptions
entryRuleOptions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionsRule()); }
	 iv_ruleOptions=ruleOptions 
	 { $current=$iv_ruleOptions.current; } 
	 EOF 
;

// Rule Options
ruleOptions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionsAccess().getOptionsAction_0(),
            $current);
    }
)	otherlv_1='options' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionsAccess().getOptionsKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionsAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionsAccess().getOptionValuesOptionValueParserRuleCall_3_0()); 
	    }
		lv_optionValues_3_0=ruleOptionValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionsRule());
	        }
       		add(
       			$current, 
       			"optionValues",
        		lv_optionValues_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OptionValue");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOptionsAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleOptionValue
entryRuleOptionValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionValueRule()); }
	 iv_ruleOptionValue=ruleOptionValue 
	 { $current=$iv_ruleOptionValue.current; } 
	 EOF 
;

// Rule OptionValue
ruleOptionValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getOptionValueAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionValueAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionValueAccess().getValueIdOrIntParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleIdOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.IdOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionValueAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleIdOrInt
entryRuleIdOrInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrIntRule()); } 
	 iv_ruleIdOrInt=ruleIdOrInt 
	 { $current=$iv_ruleIdOrInt.current.getText(); }  
	 EOF 
;

// Rule IdOrInt
ruleIdOrInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdOrIntAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIdOrIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fragment_0_0=	'fragment' 
    {
        newLeafNode(lv_fragment_0_0, grammarAccess.getRuleAccess().getFragmentFragmentKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed($current, "fragment", true, "fragment");
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getParametersParameterParserRuleCall_2_1_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getParametersParameterParserRuleCall_2_2_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getRightSquareBracketKeyword_2_3());
    }
)?	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getBodyAlternativesParserRuleCall_4_0()); 
	    }
		lv_body_8_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Alternatives");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getParameterAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
))
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativesRule()); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAlternativesAccess().getGroupParserRuleCall_0()); 
    }
    this_Group_0=ruleGroup
    { 
        $current = $this_Group_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAlternativesAccess().getAlternativesGroupsAction_1_0(),
            $current);
    }
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlternativesAccess().getVerticalLineKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativesAccess().getGroupsGroupParserRuleCall_1_1_1_0()); 
	    }
		lv_groups_3_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativesRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Group");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupAccess().getGuardedParserRuleCall_0()); 
    }
    this_Guarded_0=ruleGuarded
    { 
        $current = $this_Guarded_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupAccess().getAtomParserRuleCall_1_0()); 
    }
    this_Atom_1=ruleAtom
    { 
        $current = $this_Atom_1.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getGroupAccess().getGroupElementsAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getElementsAtomParserRuleCall_1_1_1_0()); 
	    }
		lv_elements_3_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?))
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getOtherElementParserRuleCall_0_0()); 
    }
    this_OtherElement_0=ruleOtherElement
    { 
        $current = $this_OtherElement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtomAccess().getElementWithCardinalityElementAction_0_1_0(),
            $current);
    }
)(
(
(
		lv_cardinality_2_1=	'+' 
    {
        newLeafNode(lv_cardinality_2_1, grammarAccess.getAtomAccess().getCardinalityPlusSignKeyword_0_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "cardinality", lv_cardinality_2_1, null);
	    }

    |		lv_cardinality_2_2=	'*' 
    {
        newLeafNode(lv_cardinality_2_2, grammarAccess.getAtomAccess().getCardinalityAsteriskKeyword_0_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "cardinality", lv_cardinality_2_2, null);
	    }

    |		lv_cardinality_2_3=	'?' 
    {
        newLeafNode(lv_cardinality_2_3, grammarAccess.getAtomAccess().getCardinalityQuestionMarkKeyword_0_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "cardinality", lv_cardinality_2_3, null);
	    }

)

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getRuleOptionsParserRuleCall_1()); 
    }
    this_RuleOptions_3=ruleRuleOptions
    { 
        $current = $this_RuleOptions_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOtherElement
entryRuleOtherElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherElementRule()); }
	 iv_ruleOtherElement=ruleOtherElement 
	 { $current=$iv_ruleOtherElement.current; } 
	 EOF 
;

// Rule OtherElement
ruleOtherElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOtherElementAccess().getNegatedElementAction_0_0(),
            $current);
    }
)	otherlv_1='~' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOtherElementAccess().getTildeKeyword_0_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherElementAccess().getElementParenthesizedParserRuleCall_0_2_0_0()); 
	    }
		lv_element_2_1=ruleParenthesized		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherElementRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_1, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parenthesized");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOtherElementAccess().getElementLiteralParserRuleCall_0_2_0_1()); 
	    }
		lv_element_2_2=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherElementRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_2, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Literal");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOtherElementAccess().getPredicatedParserRuleCall_1()); 
    }
    this_Predicated_3=rulePredicated
    { 
        $current = $this_Predicated_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOtherElementAccess().getParenthesizedParserRuleCall_2()); 
    }
    this_Parenthesized_4=ruleParenthesized
    { 
        $current = $this_Parenthesized_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOtherElementAccess().getLiteralParserRuleCall_3_0()); 
    }
    this_Literal_5=ruleLiteral
    { 
        $current = $this_Literal_5.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOtherElementAccess().getUntilElementLeftAction_3_1_0(),
            $current);
    }
)	otherlv_7='..' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOtherElementAccess().getFullStopFullStopKeyword_3_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherElementAccess().getRightLiteralParserRuleCall_3_1_2_0()); 
	    }
		lv_right_8_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherElementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleGuarded
entryRuleGuarded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardedRule()); }
	 iv_ruleGuarded=ruleGuarded 
	 { $current=$iv_ruleGuarded.current; } 
	 EOF 
;

// Rule Guarded
ruleGuarded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGuardedAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardedAccess().getGuardOrExpressionParserRuleCall_1_0()); 
	    }
		lv_guard_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardedRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_1_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGuardedAccess().getRightCurlyBracketKeyword_2());
    }
	otherlv_3='?' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGuardedAccess().getQuestionMarkKeyword_3());
    }
	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGuardedAccess().getEqualsSignGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardedAccess().getGuardedParenthesizedParserRuleCall_5_0()); 
	    }
		lv_guarded_5_0=ruleParenthesized		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardedRule());
	        }
       		set(
       			$current, 
       			"guarded",
        		lv_guarded_5_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Parenthesized");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); 
    }
    this_NotExpression_0=ruleNotExpression
    { 
        $current = $this_NotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getValueNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_value_3_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); 
    }
    this_ParenthesizedExpression_0=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getReferenceOrLiteralParserRuleCall_1()); 
    }
    this_ReferenceOrLiteral_1=ruleReferenceOrLiteral
    { 
        $current = $this_ReferenceOrLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPEN_0=RULE_OPEN
    { 
    newLeafNode(this_OPEN_0, grammarAccess.getParenthesizedExpressionAccess().getOPENTerminalRuleCall_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getOrExpressionParserRuleCall_1()); 
    }
    this_OrExpression_1=ruleOrExpression
    { 
        $current = $this_OrExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleReferenceOrLiteral
entryRuleReferenceOrLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceOrLiteralRule()); }
	 iv_ruleReferenceOrLiteral=ruleReferenceOrLiteral 
	 { $current=$iv_ruleReferenceOrLiteral.current; } 
	 EOF 
;

// Rule ReferenceOrLiteral
ruleReferenceOrLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceOrLiteralAccess().getNameQNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleQName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceOrLiteralRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.QName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleParenthesized
entryRuleParenthesized returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedRule()); }
	 iv_ruleParenthesized=ruleParenthesized 
	 { $current=$iv_ruleParenthesized.current; } 
	 EOF 
;

// Rule Parenthesized
ruleParenthesized returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPEN_0=RULE_OPEN
    { 
    newLeafNode(this_OPEN_0, grammarAccess.getParenthesizedAccess().getOPENTerminalRuleCall_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesizedAccess().getAlternativesParserRuleCall_1()); 
    }
    this_Alternatives_1=ruleAlternatives
    { 
        $current = $this_Alternatives_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRulePredicated
entryRulePredicated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicatedRule()); }
	 iv_rulePredicated=rulePredicated 
	 { $current=$iv_rulePredicated.current; } 
	 EOF 
;

// Rule Predicated
rulePredicated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPEN_0=RULE_OPEN
    { 
    newLeafNode(this_OPEN_0, grammarAccess.getPredicatedAccess().getOPENTerminalRuleCall_0()); 
    }
this_OPEN_1=RULE_OPEN
    { 
    newLeafNode(this_OPEN_1, grammarAccess.getPredicatedAccess().getOPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicatedAccess().getPredicateAlternativesParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicatedRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Alternatives");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicatedAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPredicatedAccess().getEqualsSignGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicatedAccess().getElementOtherElementParserRuleCall_5_0()); 
	    }
		lv_element_5_0=ruleOtherElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicatedRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_5_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OtherElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPredicatedAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleRuleOptions
entryRuleRuleOptions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleOptionsRule()); }
	 iv_ruleRuleOptions=ruleRuleOptions 
	 { $current=$iv_ruleRuleOptions.current; } 
	 EOF 
;

// Rule RuleOptions
ruleRuleOptions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleOptionsAccess().getOptionsOptionsParserRuleCall_0_0_0()); 
	    }
		lv_options_0_0=ruleOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleOptionsRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_0_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Options");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleOptionsAccess().getColonKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleOptionsAccess().getElementAtomParserRuleCall_0_2_0()); 
	    }
		lv_element_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleOptionsRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleOptionsAccess().getSkipAction_1_0(),
            $current);
    }
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleOptionsAccess().getLeftCurlyBracketKeyword_1_1());
    }
	otherlv_5='skip();' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleOptionsAccess().getSkipKeyword_1_2());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleOptionsAccess().getRightCurlyBracketKeyword_1_3());
    }
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRuleCallParserRuleCall_0()); 
    }
    this_RuleCall_0=ruleRuleCall
    { 
        $current = $this_RuleCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getKeywordParserRuleCall_1()); 
    }
    this_Keyword_1=ruleKeyword
    { 
        $current = $this_Keyword_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getWildcardParserRuleCall_2()); 
    }
    this_Wildcard_2=ruleWildcard
    { 
        $current = $this_Wildcard_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRuleCall
entryRuleRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCallRule()); }
	 iv_ruleRuleCall=ruleRuleCall 
	 { $current=$iv_ruleRuleCall.current; } 
	 EOF 
;

// Rule RuleCall
ruleRuleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_rule_0_0=RULE_ID
		{
			newLeafNode(lv_rule_0_0, grammarAccess.getRuleCallAccess().getRuleIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_0_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCallAccess().getArgumentsOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleCallAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCallAccess().getArgumentsOrExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleCallAccess().getRightSquareBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleQName
entryRuleQName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQNameRule()); } 
	 iv_ruleQName=ruleQName 
	 { $current=$iv_ruleQName.current.getText(); }  
	 EOF 
;

// Rule QName
ruleQName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleKeyword
entryRuleKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordRule()); }
	 iv_ruleKeyword=ruleKeyword 
	 { $current=$iv_ruleKeyword.current; } 
	 EOF 
;

// Rule Keyword
ruleKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getKeywordAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)
;





// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	 iv_ruleWildcard=ruleWildcard 
	 { $current=$iv_ruleWildcard.current; } 
	 EOF 
;

// Rule Wildcard
ruleWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWildcardAccess().getWildcardAction_0(),
            $current);
    }
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWildcardAccess().getFullStopKeyword_1());
    }
)
;





RULE_EMPTY_PAREN : RULE_OPEN ')';

RULE_OPEN : '(' RULE_WS*;

RULE_ID : '$'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


