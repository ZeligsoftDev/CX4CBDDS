/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.services;

import java.util.List;

import org.eclipse.papyrus.uml.alf.services.CommonGrammarAccess;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class UMLConnectionPointReferenceGrammarAccess extends AbstractGrammarElementFinder {


	public class ConnectionPointReferenceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.UMLConnectionPointReference.ConnectionPointReferenceRule");
		private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
		private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
		private final Keyword cEntryKeyword_0_0 = (Keyword) cGroup_0.eContents().get(0);
		private final Assignment cEntryAssignment_0_1 = (Assignment) cGroup_0.eContents().get(1);
		private final CrossReference cEntryPseudostateCrossReference_0_1_0 = (CrossReference) cEntryAssignment_0_1.eContents().get(0);
		private final RuleCall cEntryPseudostateIDTerminalRuleCall_0_1_0_1 = (RuleCall) cEntryPseudostateCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group) cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword) cGroup_0_2.eContents().get(0);
		private final Assignment cEntryAssignment_0_2_1 = (Assignment) cGroup_0_2.eContents().get(1);
		private final CrossReference cEntryPseudostateCrossReference_0_2_1_0 = (CrossReference) cEntryAssignment_0_2_1.eContents().get(0);
		private final RuleCall cEntryPseudostateIDTerminalRuleCall_0_2_1_0_1 = (RuleCall) cEntryPseudostateCrossReference_0_2_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
		private final Keyword cExitKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
		private final Assignment cExitAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
		private final CrossReference cExitPseudostateCrossReference_1_1_0 = (CrossReference) cExitAssignment_1_1.eContents().get(0);
		private final RuleCall cExitPseudostateIDTerminalRuleCall_1_1_0_1 = (RuleCall) cExitPseudostateCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group) cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword) cGroup_1_2.eContents().get(0);
		private final Assignment cExitAssignment_1_2_1 = (Assignment) cGroup_1_2.eContents().get(1);
		private final CrossReference cExitPseudostateCrossReference_1_2_1_0 = (CrossReference) cExitAssignment_1_2_1.eContents().get(0);
		private final RuleCall cExitPseudostateIDTerminalRuleCall_1_2_1_0_1 = (RuleCall) cExitPseudostateCrossReference_1_2_1_0.eContents().get(1);

		// ConnectionPointReferenceRule:
		// ('entry' entry+=[uml::Pseudostate] (',' entry+=[uml::Pseudostate])* | 'exit' exit+=[uml::Pseudostate] (','
		// exit+=[uml::Pseudostate])*)?;
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// ('entry' entry+=[uml::Pseudostate] (',' entry+=[uml::Pseudostate])* | 'exit' exit+=[uml::Pseudostate] (','
		// exit+=[uml::Pseudostate])*)?
		public Alternatives getAlternatives() {
			return cAlternatives;
		}

		// 'entry' entry+=[uml::Pseudostate] (',' entry+=[uml::Pseudostate])*
		public Group getGroup_0() {
			return cGroup_0;
		}

		// 'entry'
		public Keyword getEntryKeyword_0_0() {
			return cEntryKeyword_0_0;
		}

		// entry+=[uml::Pseudostate]
		public Assignment getEntryAssignment_0_1() {
			return cEntryAssignment_0_1;
		}

		// [uml::Pseudostate]
		public CrossReference getEntryPseudostateCrossReference_0_1_0() {
			return cEntryPseudostateCrossReference_0_1_0;
		}

		// ID
		public RuleCall getEntryPseudostateIDTerminalRuleCall_0_1_0_1() {
			return cEntryPseudostateIDTerminalRuleCall_0_1_0_1;
		}

		// (',' entry+=[uml::Pseudostate])*
		public Group getGroup_0_2() {
			return cGroup_0_2;
		}

		// ','
		public Keyword getCommaKeyword_0_2_0() {
			return cCommaKeyword_0_2_0;
		}

		// entry+=[uml::Pseudostate]
		public Assignment getEntryAssignment_0_2_1() {
			return cEntryAssignment_0_2_1;
		}

		// [uml::Pseudostate]
		public CrossReference getEntryPseudostateCrossReference_0_2_1_0() {
			return cEntryPseudostateCrossReference_0_2_1_0;
		}

		// ID
		public RuleCall getEntryPseudostateIDTerminalRuleCall_0_2_1_0_1() {
			return cEntryPseudostateIDTerminalRuleCall_0_2_1_0_1;
		}

		// 'exit' exit+=[uml::Pseudostate] (',' exit+=[uml::Pseudostate])*
		public Group getGroup_1() {
			return cGroup_1;
		}

		// 'exit'
		public Keyword getExitKeyword_1_0() {
			return cExitKeyword_1_0;
		}

		// exit+=[uml::Pseudostate]
		public Assignment getExitAssignment_1_1() {
			return cExitAssignment_1_1;
		}

		// [uml::Pseudostate]
		public CrossReference getExitPseudostateCrossReference_1_1_0() {
			return cExitPseudostateCrossReference_1_1_0;
		}

		// ID
		public RuleCall getExitPseudostateIDTerminalRuleCall_1_1_0_1() {
			return cExitPseudostateIDTerminalRuleCall_1_1_0_1;
		}

		// (',' exit+=[uml::Pseudostate])*
		public Group getGroup_1_2() {
			return cGroup_1_2;
		}

		// ','
		public Keyword getCommaKeyword_1_2_0() {
			return cCommaKeyword_1_2_0;
		}

		// exit+=[uml::Pseudostate]
		public Assignment getExitAssignment_1_2_1() {
			return cExitAssignment_1_2_1;
		}

		// [uml::Pseudostate]
		public CrossReference getExitPseudostateCrossReference_1_2_1_0() {
			return cExitPseudostateCrossReference_1_2_1_0;
		}

		// ID
		public RuleCall getExitPseudostateIDTerminalRuleCall_1_2_1_0_1() {
			return cExitPseudostateIDTerminalRuleCall_1_2_1_0_1;
		}
	}


	private final ConnectionPointReferenceRuleElements pConnectionPointReferenceRule;

	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UMLConnectionPointReferenceGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.gaTerminals = gaTerminals;
		this.pConnectionPointReferenceRule = new ConnectionPointReferenceRuleElements();
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.UMLConnectionPointReference".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}

	@Override
	public Grammar getGrammar() {
		return grammar;
	}


	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}


	// ConnectionPointReferenceRule:
	// ('entry' entry+=[uml::Pseudostate] (',' entry+=[uml::Pseudostate])* | 'exit' exit+=[uml::Pseudostate] (','
	// exit+=[uml::Pseudostate])*)?;
	public ConnectionPointReferenceRuleElements getConnectionPointReferenceRuleAccess() {
		return pConnectionPointReferenceRule;
	}

	public ParserRule getConnectionPointReferenceRuleRule() {
		return getConnectionPointReferenceRuleAccess().getRule();
	}

	// terminal ID:
	// ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | '\''->'\'';
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}

	// terminal STRING:
	// '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	}

	// terminal ML_COMMENT:
	// '/*' !'@'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	}

	// terminal SL_COMMENT:
	// '//' !('\n' | '\r' | '@')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	}

	// terminal INT returns ecore::EInt:
	// '0'..'9'+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	}

	// terminal INTEGER_VALUE:
	// ('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	// 'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getINTEGER_VALUERule() {
		return gaCommon.getINTEGER_VALUERule();
	}

	// terminal WS:
	// ' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}

	// terminal ANY_OTHER:
	// .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
