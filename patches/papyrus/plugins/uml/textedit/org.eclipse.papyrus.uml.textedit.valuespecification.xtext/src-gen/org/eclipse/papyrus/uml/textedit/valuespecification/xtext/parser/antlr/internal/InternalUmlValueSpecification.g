/*
 * generated by Xtext
 */
grammar InternalUmlValueSpecification;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.papyrus.uml.textedit.valuespecification.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.papyrus.uml.textedit.valuespecification.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.papyrus.uml.textedit.valuespecification.xtext.services.UmlValueSpecificationGrammarAccess;

}

@parser::members {

 	private UmlValueSpecificationGrammarAccess grammarAccess;
 	
    public InternalUmlValueSpecificationParser(TokenStream input, UmlValueSpecificationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AbstractRule";	
   	}
   	
   	@Override
   	protected UmlValueSpecificationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAbstractRule
entryRuleAbstractRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRuleRule()); }
	 iv_ruleAbstractRule=ruleAbstractRule 
	 { $current=$iv_ruleAbstractRule.current; } 
	 EOF 
;

// Rule AbstractRule
ruleAbstractRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getVisibilityVisibilityKindParserRuleCall_0_0()); 
	    }
		lv_visibility_0_0=ruleVisibilityKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"visibility",
        		lv_visibility_0_0, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.VisibilityKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_VALUE_SPECIFICATION_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAbstractRuleAccess().getNameVALUE_SPECIFICATION_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.VALUE_SPECIFICATION_ID");
	    }

)
)?((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRuleRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAbstractRuleAccess().getInstanceSpecificationInstanceSpecificationCrossReference_2_0_0()); 
	}

)
)
    |(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getValueLiteralBooleanRuleParserRuleCall_2_1_0_0()); 
	    }
		lv_value_3_1=ruleLiteralBooleanRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_1, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.LiteralBooleanRule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getValueLiteralIntegerOrUnlimitedNaturalRuleParserRuleCall_2_1_0_1()); 
	    }
		lv_value_3_2=ruleLiteralIntegerOrUnlimitedNaturalRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_2, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.LiteralIntegerOrUnlimitedNaturalRule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getValueLiteralRealRuleParserRuleCall_2_1_0_2()); 
	    }
		lv_value_3_3=ruleLiteralRealRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_3, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.LiteralRealRule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getValueLiteralNullRuleParserRuleCall_2_1_0_3()); 
	    }
		lv_value_3_4=ruleLiteralNullRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_4, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.LiteralNullRule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getValueLiteralStringRuleParserRuleCall_2_1_0_4()); 
	    }
		lv_value_3_5=ruleLiteralStringRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_5, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.LiteralStringRule");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractRuleAccess().getUndefinedUndefinedRuleParserRuleCall_2_2_0()); 
	    }
		lv_undefined_4_0=ruleUndefinedRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRuleRule());
	        }
       		set(
       			$current, 
       			"undefined",
        		lv_undefined_4_0, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.UndefinedRule");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleLiteralBooleanRule
entryRuleLiteralBooleanRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralBooleanRuleRule()); }
	 iv_ruleLiteralBooleanRule=ruleLiteralBooleanRule 
	 { $current=$iv_ruleLiteralBooleanRule.current; } 
	 EOF 
;

// Rule LiteralBooleanRule
ruleLiteralBooleanRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'true' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getLiteralBooleanRuleAccess().getValueTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralBooleanRuleRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'false' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getLiteralBooleanRuleAccess().getValueFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralBooleanRuleRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleLiteralIntegerOrUnlimitedNaturalRule
entryRuleLiteralIntegerOrUnlimitedNaturalRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule()); }
	 iv_ruleLiteralIntegerOrUnlimitedNaturalRule=ruleLiteralIntegerOrUnlimitedNaturalRule 
	 { $current=$iv_ruleLiteralIntegerOrUnlimitedNaturalRule.current; } 
	 EOF 
;

// Rule LiteralIntegerOrUnlimitedNaturalRule
ruleLiteralIntegerOrUnlimitedNaturalRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_value_0_1=RULE_INT
		{
			newLeafNode(lv_value_0_1, grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueINTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

    |		lv_value_0_2=RULE_VALUE_SPECIFICATION_NEGATIVE_INT
		{
			newLeafNode(lv_value_0_2, grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueVALUE_SPECIFICATION_NEGATIVE_INTTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.VALUE_SPECIFICATION_NEGATIVE_INT");
	    }

)

)
)
    |(
(
		lv_unlimited_1_0=	'*' 
    {
        newLeafNode(lv_unlimited_1_0, grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule());
	        }
       		setWithLastConsumed($current, "unlimited", lv_unlimited_1_0, "*");
	    }

)
))
;





// Entry rule entryRuleLiteralRealRule
entryRuleLiteralRealRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRealRuleRule()); }
	 iv_ruleLiteralRealRule=ruleLiteralRealRule 
	 { $current=$iv_ruleLiteralRealRule.current; } 
	 EOF 
;

// Rule LiteralRealRule
ruleLiteralRealRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_VALUE_SPECIFICATION_DOUBLE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralRealRuleAccess().getValueVALUE_SPECIFICATION_DOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRealRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"org.eclipse.papyrus.uml.textedit.valuespecification.xtext.UmlValueSpecification.VALUE_SPECIFICATION_DOUBLE");
	    }

)
)
;





// Entry rule entryRuleLiteralNullRule
entryRuleLiteralNullRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralNullRuleRule()); }
	 iv_ruleLiteralNullRule=ruleLiteralNullRule 
	 { $current=$iv_ruleLiteralNullRule.current; } 
	 EOF 
;

// Rule LiteralNullRule
ruleLiteralNullRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'null' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getLiteralNullRuleAccess().getValueNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralNullRuleRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "null");
	    }

)
)
;





// Entry rule entryRuleLiteralStringRule
entryRuleLiteralStringRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralStringRuleRule()); }
	 iv_ruleLiteralStringRule=ruleLiteralStringRule 
	 { $current=$iv_ruleLiteralStringRule.current; } 
	 EOF 
;

// Rule LiteralStringRule
ruleLiteralStringRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralStringRuleAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralStringRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)
;





// Entry rule entryRuleUndefinedRule
entryRuleUndefinedRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUndefinedRuleRule()); }
	 iv_ruleUndefinedRule=ruleUndefinedRule 
	 { $current=$iv_ruleUndefinedRule.current; } 
	 EOF 
;

// Rule UndefinedRule
ruleUndefinedRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'<Undefined>' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUndefinedRuleRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "<Undefined>");
	    }

)
)
;





// Entry rule entryRuleVisibilityKind
entryRuleVisibilityKind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibilityKindRule()); }
	 iv_ruleVisibilityKind=ruleVisibilityKind 
	 { $current=$iv_ruleVisibilityKind.current; } 
	 EOF 
;

// Rule VisibilityKind
ruleVisibilityKind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_public_0_0=	'+' 
    {
        newLeafNode(lv_public_0_0, grammarAccess.getVisibilityKindAccess().getPublicPlusSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibilityKindRule());
	        }
       		setWithLastConsumed($current, "public", lv_public_0_0, "+");
	    }

)
)
    |(
(
		lv_private_1_0=	'-' 
    {
        newLeafNode(lv_private_1_0, grammarAccess.getVisibilityKindAccess().getPrivateHyphenMinusKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibilityKindRule());
	        }
       		setWithLastConsumed($current, "private", lv_private_1_0, "-");
	    }

)
)
    |(
(
		lv_protected_2_0=	'#' 
    {
        newLeafNode(lv_protected_2_0, grammarAccess.getVisibilityKindAccess().getProtectedNumberSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibilityKindRule());
	        }
       		setWithLastConsumed($current, "protected", lv_protected_2_0, "#");
	    }

)
)
    |(
(
		lv_package_3_0=	'~' 
    {
        newLeafNode(lv_package_3_0, grammarAccess.getVisibilityKindAccess().getPackageTildeKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibilityKindRule());
	        }
       		setWithLastConsumed($current, "package", lv_package_3_0, "~");
	    }

)
))
;





RULE_VALUE_SPECIFICATION_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')* '=';

RULE_VALUE_SPECIFICATION_NEGATIVE_INT : '-' RULE_INT;

RULE_VALUE_SPECIFICATION_DOUBLE : '-'? (RULE_INT ('.'|',') RULE_INT|RULE_INT ('.'|',')|('.'|',') RULE_INT);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


