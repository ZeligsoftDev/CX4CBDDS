/*
 * generated by Xtext
 */
grammar InternalUmlValueSpecification;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.papyrus.uml.textedit.valuespecification.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.papyrus.uml.textedit.valuespecification.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.papyrus.uml.textedit.valuespecification.xtext.services.UmlValueSpecificationGrammarAccess;

}

@parser::members {
 
 	private UmlValueSpecificationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(UmlValueSpecificationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAbstractRule
entryRuleAbstractRule 
:
{ before(grammarAccess.getAbstractRuleRule()); }
	 ruleAbstractRule
{ after(grammarAccess.getAbstractRuleRule()); } 
	 EOF 
;

// Rule AbstractRule
ruleAbstractRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractRuleAccess().getGroup()); }
(rule__AbstractRule__Group__0)
{ after(grammarAccess.getAbstractRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralBooleanRule
entryRuleLiteralBooleanRule 
:
{ before(grammarAccess.getLiteralBooleanRuleRule()); }
	 ruleLiteralBooleanRule
{ after(grammarAccess.getLiteralBooleanRuleRule()); } 
	 EOF 
;

// Rule LiteralBooleanRule
ruleLiteralBooleanRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralBooleanRuleAccess().getValueAssignment()); }
(rule__LiteralBooleanRule__ValueAssignment)
{ after(grammarAccess.getLiteralBooleanRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralIntegerOrUnlimitedNaturalRule
entryRuleLiteralIntegerOrUnlimitedNaturalRule 
:
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule()); }
	 ruleLiteralIntegerOrUnlimitedNaturalRule
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleRule()); } 
	 EOF 
;

// Rule LiteralIntegerOrUnlimitedNaturalRule
ruleLiteralIntegerOrUnlimitedNaturalRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getAlternatives()); }
(rule__LiteralIntegerOrUnlimitedNaturalRule__Alternatives)
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralRealRule
entryRuleLiteralRealRule 
:
{ before(grammarAccess.getLiteralRealRuleRule()); }
	 ruleLiteralRealRule
{ after(grammarAccess.getLiteralRealRuleRule()); } 
	 EOF 
;

// Rule LiteralRealRule
ruleLiteralRealRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralRealRuleAccess().getValueAssignment()); }
(rule__LiteralRealRule__ValueAssignment)
{ after(grammarAccess.getLiteralRealRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNullRule
entryRuleLiteralNullRule 
:
{ before(grammarAccess.getLiteralNullRuleRule()); }
	 ruleLiteralNullRule
{ after(grammarAccess.getLiteralNullRuleRule()); } 
	 EOF 
;

// Rule LiteralNullRule
ruleLiteralNullRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralNullRuleAccess().getValueAssignment()); }
(rule__LiteralNullRule__ValueAssignment)
{ after(grammarAccess.getLiteralNullRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralStringRule
entryRuleLiteralStringRule 
:
{ before(grammarAccess.getLiteralStringRuleRule()); }
	 ruleLiteralStringRule
{ after(grammarAccess.getLiteralStringRuleRule()); } 
	 EOF 
;

// Rule LiteralStringRule
ruleLiteralStringRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralStringRuleAccess().getValueAssignment()); }
(rule__LiteralStringRule__ValueAssignment)
{ after(grammarAccess.getLiteralStringRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUndefinedRule
entryRuleUndefinedRule 
:
{ before(grammarAccess.getUndefinedRuleRule()); }
	 ruleUndefinedRule
{ after(grammarAccess.getUndefinedRuleRule()); } 
	 EOF 
;

// Rule UndefinedRule
ruleUndefinedRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUndefinedRuleAccess().getValueAssignment()); }
(rule__UndefinedRule__ValueAssignment)
{ after(grammarAccess.getUndefinedRuleAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVisibilityKind
entryRuleVisibilityKind 
:
{ before(grammarAccess.getVisibilityKindRule()); }
	 ruleVisibilityKind
{ after(grammarAccess.getVisibilityKindRule()); } 
	 EOF 
;

// Rule VisibilityKind
ruleVisibilityKind
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVisibilityKindAccess().getAlternatives()); }
(rule__VisibilityKind__Alternatives)
{ after(grammarAccess.getVisibilityKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AbstractRule__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationAssignment_2_0()); }
(rule__AbstractRule__InstanceSpecificationAssignment_2_0)
{ after(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getValueAssignment_2_1()); }
(rule__AbstractRule__ValueAssignment_2_1)
{ after(grammarAccess.getAbstractRuleAccess().getValueAssignment_2_1()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getUndefinedAssignment_2_2()); }
(rule__AbstractRule__UndefinedAssignment_2_2)
{ after(grammarAccess.getAbstractRuleAccess().getUndefinedAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__ValueAlternatives_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getValueLiteralBooleanRuleParserRuleCall_2_1_0_0()); }
	ruleLiteralBooleanRule
{ after(grammarAccess.getAbstractRuleAccess().getValueLiteralBooleanRuleParserRuleCall_2_1_0_0()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getValueLiteralIntegerOrUnlimitedNaturalRuleParserRuleCall_2_1_0_1()); }
	ruleLiteralIntegerOrUnlimitedNaturalRule
{ after(grammarAccess.getAbstractRuleAccess().getValueLiteralIntegerOrUnlimitedNaturalRuleParserRuleCall_2_1_0_1()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getValueLiteralRealRuleParserRuleCall_2_1_0_2()); }
	ruleLiteralRealRule
{ after(grammarAccess.getAbstractRuleAccess().getValueLiteralRealRuleParserRuleCall_2_1_0_2()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getValueLiteralNullRuleParserRuleCall_2_1_0_3()); }
	ruleLiteralNullRule
{ after(grammarAccess.getAbstractRuleAccess().getValueLiteralNullRuleParserRuleCall_2_1_0_3()); }
)

    |(
{ before(grammarAccess.getAbstractRuleAccess().getValueLiteralStringRuleParserRuleCall_2_1_0_4()); }
	ruleLiteralStringRule
{ after(grammarAccess.getAbstractRuleAccess().getValueLiteralStringRuleParserRuleCall_2_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralBooleanRule__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralBooleanRuleAccess().getValueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getLiteralBooleanRuleAccess().getValueTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralBooleanRuleAccess().getValueFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getLiteralBooleanRuleAccess().getValueFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIntegerOrUnlimitedNaturalRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueAssignment_0()); }
(rule__LiteralIntegerOrUnlimitedNaturalRule__ValueAssignment_0)
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAssignment_1()); }
(rule__LiteralIntegerOrUnlimitedNaturalRule__UnlimitedAssignment_1)
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIntegerOrUnlimitedNaturalRule__ValueAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueINTTerminalRuleCall_0_0_0()); }
	RULE_INT
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueINTTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueVALUE_SPECIFICATION_NEGATIVE_INTTerminalRuleCall_0_0_1()); }
	RULE_VALUE_SPECIFICATION_NEGATIVE_INT
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueVALUE_SPECIFICATION_NEGATIVE_INTTerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityKindAccess().getPublicAssignment_0()); }
(rule__VisibilityKind__PublicAssignment_0)
{ after(grammarAccess.getVisibilityKindAccess().getPublicAssignment_0()); }
)

    |(
{ before(grammarAccess.getVisibilityKindAccess().getPrivateAssignment_1()); }
(rule__VisibilityKind__PrivateAssignment_1)
{ after(grammarAccess.getVisibilityKindAccess().getPrivateAssignment_1()); }
)

    |(
{ before(grammarAccess.getVisibilityKindAccess().getProtectedAssignment_2()); }
(rule__VisibilityKind__ProtectedAssignment_2)
{ after(grammarAccess.getVisibilityKindAccess().getProtectedAssignment_2()); }
)

    |(
{ before(grammarAccess.getVisibilityKindAccess().getPackageAssignment_3()); }
(rule__VisibilityKind__PackageAssignment_3)
{ after(grammarAccess.getVisibilityKindAccess().getPackageAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRule__Group__0__Impl
	rule__AbstractRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getVisibilityAssignment_0()); }
(rule__AbstractRule__VisibilityAssignment_0)?
{ after(grammarAccess.getAbstractRuleAccess().getVisibilityAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRule__Group__1__Impl
	rule__AbstractRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getNameAssignment_1()); }
(rule__AbstractRule__NameAssignment_1)?
{ after(grammarAccess.getAbstractRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getAlternatives_2()); }
(rule__AbstractRule__Alternatives_2)
{ after(grammarAccess.getAbstractRuleAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__AbstractRule__VisibilityAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getVisibilityVisibilityKindParserRuleCall_0_0()); }
	ruleVisibilityKind{ after(grammarAccess.getAbstractRuleAccess().getVisibilityVisibilityKindParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getNameVALUE_SPECIFICATION_IDTerminalRuleCall_1_0()); }
	RULE_VALUE_SPECIFICATION_ID{ after(grammarAccess.getAbstractRuleAccess().getNameVALUE_SPECIFICATION_IDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__InstanceSpecificationAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationInstanceSpecificationCrossReference_2_0_0()); }
(
{ before(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationInstanceSpecificationIDTerminalRuleCall_2_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationInstanceSpecificationIDTerminalRuleCall_2_0_0_1()); }
)
{ after(grammarAccess.getAbstractRuleAccess().getInstanceSpecificationInstanceSpecificationCrossReference_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getValueAlternatives_2_1_0()); }
(rule__AbstractRule__ValueAlternatives_2_1_0)
{ after(grammarAccess.getAbstractRuleAccess().getValueAlternatives_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRule__UndefinedAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRuleAccess().getUndefinedUndefinedRuleParserRuleCall_2_2_0()); }
	ruleUndefinedRule{ after(grammarAccess.getAbstractRuleAccess().getUndefinedUndefinedRuleParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralBooleanRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralBooleanRuleAccess().getValueAlternatives_0()); }
(rule__LiteralBooleanRule__ValueAlternatives_0)
{ after(grammarAccess.getLiteralBooleanRuleAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIntegerOrUnlimitedNaturalRule__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueAlternatives_0_0()); }
(rule__LiteralIntegerOrUnlimitedNaturalRule__ValueAlternatives_0_0)
{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getValueAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralIntegerOrUnlimitedNaturalRule__UnlimitedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getLiteralIntegerOrUnlimitedNaturalRuleAccess().getUnlimitedAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralRealRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralRealRuleAccess().getValueVALUE_SPECIFICATION_DOUBLETerminalRuleCall_0()); }
	RULE_VALUE_SPECIFICATION_DOUBLE{ after(grammarAccess.getLiteralRealRuleAccess().getValueVALUE_SPECIFICATION_DOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNullRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNullRuleAccess().getValueNullKeyword_0()); }
(
{ before(grammarAccess.getLiteralNullRuleAccess().getValueNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getLiteralNullRuleAccess().getValueNullKeyword_0()); }
)

{ after(grammarAccess.getLiteralNullRuleAccess().getValueNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralStringRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralStringRuleAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getLiteralStringRuleAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UndefinedRule__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0()); }
(
{ before(grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0()); }

	'<Undefined>' 

{ after(grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0()); }
)

{ after(grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityKind__PublicAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityKindAccess().getPublicPlusSignKeyword_0_0()); }
(
{ before(grammarAccess.getVisibilityKindAccess().getPublicPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getVisibilityKindAccess().getPublicPlusSignKeyword_0_0()); }
)

{ after(grammarAccess.getVisibilityKindAccess().getPublicPlusSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityKind__PrivateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityKindAccess().getPrivateHyphenMinusKeyword_1_0()); }
(
{ before(grammarAccess.getVisibilityKindAccess().getPrivateHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getVisibilityKindAccess().getPrivateHyphenMinusKeyword_1_0()); }
)

{ after(grammarAccess.getVisibilityKindAccess().getPrivateHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityKind__ProtectedAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityKindAccess().getProtectedNumberSignKeyword_2_0()); }
(
{ before(grammarAccess.getVisibilityKindAccess().getProtectedNumberSignKeyword_2_0()); }

	'#' 

{ after(grammarAccess.getVisibilityKindAccess().getProtectedNumberSignKeyword_2_0()); }
)

{ after(grammarAccess.getVisibilityKindAccess().getProtectedNumberSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityKind__PackageAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityKindAccess().getPackageTildeKeyword_3_0()); }
(
{ before(grammarAccess.getVisibilityKindAccess().getPackageTildeKeyword_3_0()); }

	'~' 

{ after(grammarAccess.getVisibilityKindAccess().getPackageTildeKeyword_3_0()); }
)

{ after(grammarAccess.getVisibilityKindAccess().getPackageTildeKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VALUE_SPECIFICATION_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')* '=';

RULE_VALUE_SPECIFICATION_NEGATIVE_INT : '-' RULE_INT;

RULE_VALUE_SPECIFICATION_DOUBLE : '-'? (RULE_INT ('.'|',') RULE_INT|RULE_INT ('.'|',')|('.'|',') RULE_INT);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


