/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.textedit.common.xtext.services;

import java.util.List;

import org.eclipse.papyrus.uml.alf.services.CommonGrammarAccess;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class UmlCommonGrammarAccess extends AbstractGrammarElementFinder {


	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.QualifiedName");
		private final Group cGroup = (Group) rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment) cGroup.eContents().get(0);
		private final CrossReference cPathNamespaceCrossReference_0_0 = (CrossReference) cPathAssignment_0.eContents().get(0);
		private final RuleCall cPathNamespaceIDTerminalRuleCall_0_0_1 = (RuleCall) cPathNamespaceCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword) cGroup.eContents().get(1);
		private final Assignment cRemainingAssignment_2 = (Assignment) cGroup.eContents().get(2);
		private final RuleCall cRemainingQualifiedNameParserRuleCall_2_0 = (RuleCall) cRemainingAssignment_2.eContents().get(0);

		// QualifiedName:
		// path=[uml::Namespace] '::' remaining=QualifiedName?;
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// path=[uml::Namespace] '::' remaining=QualifiedName?
		public Group getGroup() {
			return cGroup;
		}

		// path=[uml::Namespace]
		public Assignment getPathAssignment_0() {
			return cPathAssignment_0;
		}

		// [uml::Namespace]
		public CrossReference getPathNamespaceCrossReference_0_0() {
			return cPathNamespaceCrossReference_0_0;
		}

		// ID
		public RuleCall getPathNamespaceIDTerminalRuleCall_0_0_1() {
			return cPathNamespaceIDTerminalRuleCall_0_0_1;
		}

		// '::'
		public Keyword getColonColonKeyword_1() {
			return cColonColonKeyword_1;
		}

		// remaining=QualifiedName?
		public Assignment getRemainingAssignment_2() {
			return cRemainingAssignment_2;
		}

		// QualifiedName
		public RuleCall getRemainingQualifiedNameParserRuleCall_2_0() {
			return cRemainingQualifiedNameParserRuleCall_2_0;
		}
	}

	public class TypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.TypeRule");
		private final Group cGroup = (Group) rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment) cGroup.eContents().get(0);
		private final RuleCall cPathQualifiedNameParserRuleCall_0_0 = (RuleCall) cPathAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference) cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall) cTypeTypeCrossReference_1_0.eContents().get(1);

		// TypeRule:
		// path=QualifiedName? type=[uml::Type];
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// path=QualifiedName? type=[uml::Type]
		public Group getGroup() {
			return cGroup;
		}

		// path=QualifiedName?
		public Assignment getPathAssignment_0() {
			return cPathAssignment_0;
		}

		// QualifiedName
		public RuleCall getPathQualifiedNameParserRuleCall_0_0() {
			return cPathQualifiedNameParserRuleCall_0_0;
		}

		// type=[uml::Type]
		public Assignment getTypeAssignment_1() {
			return cTypeAssignment_1;
		}

		// [uml::Type]
		public CrossReference getTypeTypeCrossReference_1_0() {
			return cTypeTypeCrossReference_1_0;
		}

		// ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() {
			return cTypeTypeIDTerminalRuleCall_1_0_1;
		}
	}

	public class MultiplicityRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.MultiplicityRule");
		private final Group cGroup = (Group) rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword) cGroup.eContents().get(0);
		private final Assignment cBoundsAssignment_1 = (Assignment) cGroup.eContents().get(1);
		private final RuleCall cBoundsBoundSpecificationParserRuleCall_1_0 = (RuleCall) cBoundsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword) cGroup_2.eContents().get(0);
		private final Assignment cBoundsAssignment_2_1 = (Assignment) cGroup_2.eContents().get(1);
		private final RuleCall cBoundsBoundSpecificationParserRuleCall_2_1_0 = (RuleCall) cBoundsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword) cGroup.eContents().get(3);

		// MultiplicityRule:
		// "[" bounds+=BoundSpecification ('..' bounds+=BoundSpecification)? "]";
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// "[" bounds+=BoundSpecification ('..' bounds+=BoundSpecification)? "]"
		public Group getGroup() {
			return cGroup;
		}

		// "["
		public Keyword getLeftSquareBracketKeyword_0() {
			return cLeftSquareBracketKeyword_0;
		}

		// bounds+=BoundSpecification
		public Assignment getBoundsAssignment_1() {
			return cBoundsAssignment_1;
		}

		// BoundSpecification
		public RuleCall getBoundsBoundSpecificationParserRuleCall_1_0() {
			return cBoundsBoundSpecificationParserRuleCall_1_0;
		}

		// ('..' bounds+=BoundSpecification)?
		public Group getGroup_2() {
			return cGroup_2;
		}

		// '..'
		public Keyword getFullStopFullStopKeyword_2_0() {
			return cFullStopFullStopKeyword_2_0;
		}

		// bounds+=BoundSpecification
		public Assignment getBoundsAssignment_2_1() {
			return cBoundsAssignment_2_1;
		}

		// BoundSpecification
		public RuleCall getBoundsBoundSpecificationParserRuleCall_2_1_0() {
			return cBoundsBoundSpecificationParserRuleCall_2_1_0;
		}

		// "]"
		public Keyword getRightSquareBracketKeyword_3() {
			return cRightSquareBracketKeyword_3;
		}
	}

	public class BoundSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.BoundSpecification");
		private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
		private final RuleCall cValueUnlimitedLiteralParserRuleCall_0 = (RuleCall) cValueAssignment.eContents().get(0);

		// BoundSpecification:
		// value=UnlimitedLiteral;
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// value=UnlimitedLiteral
		public Assignment getValueAssignment() {
			return cValueAssignment;
		}

		// UnlimitedLiteral
		public RuleCall getValueUnlimitedLiteralParserRuleCall_0() {
			return cValueUnlimitedLiteralParserRuleCall_0;
		}
	}

	public class UnlimitedLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.UnlimitedLiteral");
		private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword) cAlternatives.eContents().get(1);

		// UnlimitedLiteral:
		// INT | "*";
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// INT | "*"
		public Alternatives getAlternatives() {
			return cAlternatives;
		}

		// INT
		public RuleCall getINTTerminalRuleCall_0() {
			return cINTTerminalRuleCall_0;
		}

		// "*"
		public Keyword getAsteriskKeyword_1() {
			return cAsteriskKeyword_1;
		}
	}


	public class VisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.VisibilityKind");
		private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents().get(0);
		private final Keyword cPublicPlusSignKeyword_0_0 = (Keyword) cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents().get(1);
		private final Keyword cPrivateHyphenMinusKeyword_1_0 = (Keyword) cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents().get(2);
		private final Keyword cProtectedNumberSignKeyword_2_0 = (Keyword) cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents().get(3);
		private final Keyword cPackageTildeKeyword_3_0 = (Keyword) cPackageEnumLiteralDeclaration_3.eContents().get(0);

		// enum VisibilityKind:
		// public="+" | private="-" | protected="#" | package="~";
		public EnumRule getRule() {
			return rule;
		}

		// public="+" | private="-" | protected="#" | package="~"
		public Alternatives getAlternatives() {
			return cAlternatives;
		}

		// public="+"
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() {
			return cPublicEnumLiteralDeclaration_0;
		}

		// "+"
		public Keyword getPublicPlusSignKeyword_0_0() {
			return cPublicPlusSignKeyword_0_0;
		}

		// private="-"
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() {
			return cPrivateEnumLiteralDeclaration_1;
		}

		// "-"
		public Keyword getPrivateHyphenMinusKeyword_1_0() {
			return cPrivateHyphenMinusKeyword_1_0;
		}

		// protected="#"
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() {
			return cProtectedEnumLiteralDeclaration_2;
		}

		// "#"
		public Keyword getProtectedNumberSignKeyword_2_0() {
			return cProtectedNumberSignKeyword_2_0;
		}

		// package="~"
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() {
			return cPackageEnumLiteralDeclaration_3;
		}

		// "~"
		public Keyword getPackageTildeKeyword_3_0() {
			return cPackageTildeKeyword_3_0;
		}
	}

	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon.Direction");
		private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword) cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword) cOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents().get(2);
		private final Keyword cINOUTInoutKeyword_2_0 = (Keyword) cINOUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRETURNEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents().get(3);
		private final Keyword cRETURNReturnKeyword_3_0 = (Keyword) cRETURNEnumLiteralDeclaration_3.eContents().get(0);

		// enum Direction:
		// IN="in" | OUT="out" | INOUT="inout" | RETURN="return";
		public EnumRule getRule() {
			return rule;
		}

		// IN="in" | OUT="out" | INOUT="inout" | RETURN="return"
		public Alternatives getAlternatives() {
			return cAlternatives;
		}

		// IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() {
			return cINEnumLiteralDeclaration_0;
		}

		// "in"
		public Keyword getINInKeyword_0_0() {
			return cINInKeyword_0_0;
		}

		// OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() {
			return cOUTEnumLiteralDeclaration_1;
		}

		// "out"
		public Keyword getOUTOutKeyword_1_0() {
			return cOUTOutKeyword_1_0;
		}

		// INOUT="inout"
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_2() {
			return cINOUTEnumLiteralDeclaration_2;
		}

		// "inout"
		public Keyword getINOUTInoutKeyword_2_0() {
			return cINOUTInoutKeyword_2_0;
		}

		// RETURN="return"
		public EnumLiteralDeclaration getRETURNEnumLiteralDeclaration_3() {
			return cRETURNEnumLiteralDeclaration_3;
		}

		// "return"
		public Keyword getRETURNReturnKeyword_3_0() {
			return cRETURNReturnKeyword_3_0;
		}
	}

	private final QualifiedNameElements pQualifiedName;
	private final TypeRuleElements pTypeRule;
	private final VisibilityKindElements eVisibilityKind;
	private final MultiplicityRuleElements pMultiplicityRule;
	private final BoundSpecificationElements pBoundSpecification;
	private final UnlimitedLiteralElements pUnlimitedLiteral;
	private final DirectionElements eDirection;

	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UmlCommonGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.gaTerminals = gaTerminals;
		this.pQualifiedName = new QualifiedNameElements();
		this.pTypeRule = new TypeRuleElements();
		this.eVisibilityKind = new VisibilityKindElements();
		this.pMultiplicityRule = new MultiplicityRuleElements();
		this.pBoundSpecification = new BoundSpecificationElements();
		this.pUnlimitedLiteral = new UnlimitedLiteralElements();
		this.eDirection = new DirectionElements();
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrus.uml.textedit.common.xtext.UmlCommon".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}

	@Override
	public Grammar getGrammar() {
		return grammar;
	}


	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}


	// QualifiedName:
	// path=[uml::Namespace] '::' remaining=QualifiedName?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}

	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	// TypeRule:
	// path=QualifiedName? type=[uml::Type];
	public TypeRuleElements getTypeRuleAccess() {
		return pTypeRule;
	}

	public ParserRule getTypeRuleRule() {
		return getTypeRuleAccess().getRule();
	}

	// enum VisibilityKind:
	// public="+" | private="-" | protected="#" | package="~";
	public VisibilityKindElements getVisibilityKindAccess() {
		return eVisibilityKind;
	}

	public EnumRule getVisibilityKindRule() {
		return getVisibilityKindAccess().getRule();
	}

	// MultiplicityRule:
	// "[" bounds+=BoundSpecification ('..' bounds+=BoundSpecification)? "]";
	public MultiplicityRuleElements getMultiplicityRuleAccess() {
		return pMultiplicityRule;
	}

	public ParserRule getMultiplicityRuleRule() {
		return getMultiplicityRuleAccess().getRule();
	}

	// BoundSpecification:
	// value=UnlimitedLiteral;
	public BoundSpecificationElements getBoundSpecificationAccess() {
		return pBoundSpecification;
	}

	public ParserRule getBoundSpecificationRule() {
		return getBoundSpecificationAccess().getRule();
	}

	// UnlimitedLiteral:
	// INT | "*";
	public UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return pUnlimitedLiteral;
	}

	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	// enum Direction:
	// IN="in" | OUT="out" | INOUT="inout" | RETURN="return";
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}

	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	// terminal ID:
	// ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | '\''->'\'';
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}

	// terminal STRING:
	// '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	}

	// terminal ML_COMMENT:
	// '/*' !'@'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	}

	// terminal SL_COMMENT:
	// '//' !('\n' | '\r' | '@')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	}

	// terminal INT returns ecore::EInt:
	// '0'..'9'+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	}

	// terminal INTEGER_VALUE:
	// ('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	// 'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getINTEGER_VALUERule() {
		return gaCommon.getINTEGER_VALUERule();
	}

	// terminal WS:
	// ' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}

	// terminal ANY_OTHER:
	// .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
