/*
 * generated by Xtext
 */
grammar InternalUmlTransition;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.papyrus.uml.textedit.transition.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.papyrus.uml.textedit.transition.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.papyrus.uml.textedit.transition.xtext.services.UmlTransitionGrammarAccess;

}

@parser::members {
 
 	private UmlTransitionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(UmlTransitionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTransitionRule
entryRuleTransitionRule 
:
{ before(grammarAccess.getTransitionRuleRule()); }
	 ruleTransitionRule
{ after(grammarAccess.getTransitionRuleRule()); } 
	 EOF 
;

// Rule TransitionRule
ruleTransitionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionRuleAccess().getGroup()); }
(rule__TransitionRule__Group__0)
{ after(grammarAccess.getTransitionRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventRule
entryRuleEventRule 
:
{ before(grammarAccess.getEventRuleRule()); }
	 ruleEventRule
{ after(grammarAccess.getEventRuleRule()); } 
	 EOF 
;

// Rule EventRule
ruleEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventRuleAccess().getAlternatives()); }
(rule__EventRule__Alternatives)
{ after(grammarAccess.getEventRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCallOrSignalEventRule
entryRuleCallOrSignalEventRule 
:
{ before(grammarAccess.getCallOrSignalEventRuleRule()); }
	 ruleCallOrSignalEventRule
{ after(grammarAccess.getCallOrSignalEventRuleRule()); } 
	 EOF 
;

// Rule CallOrSignalEventRule
ruleCallOrSignalEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalAssignment()); }
(rule__CallOrSignalEventRule__OperationOrSignalAssignment)
{ after(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnyReceiveEventRule
entryRuleAnyReceiveEventRule 
:
{ before(grammarAccess.getAnyReceiveEventRuleRule()); }
	 ruleAnyReceiveEventRule
{ after(grammarAccess.getAnyReceiveEventRuleRule()); } 
	 EOF 
;

// Rule AnyReceiveEventRule
ruleAnyReceiveEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAssignment()); }
(rule__AnyReceiveEventRule__IsAReceiveEventAssignment)
{ after(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeEventRule
entryRuleTimeEventRule 
:
{ before(grammarAccess.getTimeEventRuleRule()); }
	 ruleTimeEventRule
{ after(grammarAccess.getTimeEventRuleRule()); } 
	 EOF 
;

// Rule TimeEventRule
ruleTimeEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeEventRuleAccess().getAlternatives()); }
(rule__TimeEventRule__Alternatives)
{ after(grammarAccess.getTimeEventRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelativeTimeEventRule
entryRuleRelativeTimeEventRule 
:
{ before(grammarAccess.getRelativeTimeEventRuleRule()); }
	 ruleRelativeTimeEventRule
{ after(grammarAccess.getRelativeTimeEventRuleRule()); } 
	 EOF 
;

// Rule RelativeTimeEventRule
ruleRelativeTimeEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelativeTimeEventRuleAccess().getGroup()); }
(rule__RelativeTimeEventRule__Group__0)
{ after(grammarAccess.getRelativeTimeEventRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbsoluteTimeEventRule
entryRuleAbsoluteTimeEventRule 
:
{ before(grammarAccess.getAbsoluteTimeEventRuleRule()); }
	 ruleAbsoluteTimeEventRule
{ after(grammarAccess.getAbsoluteTimeEventRuleRule()); } 
	 EOF 
;

// Rule AbsoluteTimeEventRule
ruleAbsoluteTimeEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbsoluteTimeEventRuleAccess().getGroup()); }
(rule__AbsoluteTimeEventRule__Group__0)
{ after(grammarAccess.getAbsoluteTimeEventRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChangeEventRule
entryRuleChangeEventRule 
:
{ before(grammarAccess.getChangeEventRuleRule()); }
	 ruleChangeEventRule
{ after(grammarAccess.getChangeEventRuleRule()); } 
	 EOF 
;

// Rule ChangeEventRule
ruleChangeEventRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChangeEventRuleAccess().getGroup()); }
(rule__ChangeEventRule__Group__0)
{ after(grammarAccess.getChangeEventRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGuardRule
entryRuleGuardRule 
:
{ before(grammarAccess.getGuardRuleRule()); }
	 ruleGuardRule
{ after(grammarAccess.getGuardRuleRule()); } 
	 EOF 
;

// Rule GuardRule
ruleGuardRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGuardRuleAccess().getGroup()); }
(rule__GuardRule__Group__0)
{ after(grammarAccess.getGuardRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEffectRule
entryRuleEffectRule 
:
{ before(grammarAccess.getEffectRuleRule()); }
	 ruleEffectRule
{ after(grammarAccess.getEffectRuleRule()); } 
	 EOF 
;

// Rule EffectRule
ruleEffectRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectRuleAccess().getGroup()); }
(rule__EffectRule__Group__0)
{ after(grammarAccess.getEffectRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BehaviorKind
ruleBehaviorKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorKindAccess().getAlternatives()); }
(rule__BehaviorKind__Alternatives)
{ after(grammarAccess.getBehaviorKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EventRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRuleAccess().getCallOrSignalEventRuleParserRuleCall_0()); }
	ruleCallOrSignalEventRule
{ after(grammarAccess.getEventRuleAccess().getCallOrSignalEventRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEventRuleAccess().getAnyReceiveEventRuleParserRuleCall_1()); }
	ruleAnyReceiveEventRule
{ after(grammarAccess.getEventRuleAccess().getAnyReceiveEventRuleParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEventRuleAccess().getTimeEventRuleParserRuleCall_2()); }
	ruleTimeEventRule
{ after(grammarAccess.getEventRuleAccess().getTimeEventRuleParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEventRuleAccess().getChangeEventRuleParserRuleCall_3()); }
	ruleChangeEventRule
{ after(grammarAccess.getEventRuleAccess().getChangeEventRuleParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventRuleAccess().getRelativeTimeEventRuleParserRuleCall_0()); }
	ruleRelativeTimeEventRule
{ after(grammarAccess.getTimeEventRuleAccess().getRelativeTimeEventRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTimeEventRuleAccess().getAbsoluteTimeEventRuleParserRuleCall_1()); }
	ruleAbsoluteTimeEventRule
{ after(grammarAccess.getTimeEventRuleAccess().getAbsoluteTimeEventRuleParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0()); }
(	'Activity' 
)
{ after(grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1()); }
(	'StateMachine' 
)
{ after(grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2()); }
(	'OpaqueBehavior' 
)
{ after(grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TransitionRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group__0__Impl
	rule__TransitionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getGroup_0()); }
(rule__TransitionRule__Group_0__0)?
{ after(grammarAccess.getTransitionRuleAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group__1__Impl
	rule__TransitionRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getGuardAssignment_1()); }
(rule__TransitionRule__GuardAssignment_1)?
{ after(grammarAccess.getTransitionRuleAccess().getGuardAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getEffectAssignment_2()); }
(rule__TransitionRule__EffectAssignment_2)?
{ after(grammarAccess.getTransitionRuleAccess().getEffectAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TransitionRule__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group_0__0__Impl
	rule__TransitionRule__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_0()); }
(rule__TransitionRule__TriggersAssignment_0_0)
{ after(grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRule__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getGroup_0_1()); }
(rule__TransitionRule__Group_0_1__0)*
{ after(grammarAccess.getTransitionRuleAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionRule__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group_0_1__0__Impl
	rule__TransitionRule__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getTransitionRuleAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRule__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRule__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_1_1()); }
(rule__TransitionRule__TriggersAssignment_0_1_1)
{ after(grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelativeTimeEventRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeTimeEventRule__Group__0__Impl
	rule__RelativeTimeEventRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTimeEventRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeTimeEventRuleAccess().getAfterKeyword_0()); }

	'after' 

{ after(grammarAccess.getRelativeTimeEventRuleAccess().getAfterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeTimeEventRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativeTimeEventRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTimeEventRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeTimeEventRuleAccess().getExprAssignment_1()); }
(rule__RelativeTimeEventRule__ExprAssignment_1)
{ after(grammarAccess.getRelativeTimeEventRuleAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbsoluteTimeEventRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteTimeEventRule__Group__0__Impl
	rule__AbsoluteTimeEventRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteTimeEventRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteTimeEventRuleAccess().getAtKeyword_0()); }

	'at' 

{ after(grammarAccess.getAbsoluteTimeEventRuleAccess().getAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteTimeEventRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbsoluteTimeEventRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteTimeEventRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteTimeEventRuleAccess().getExprAssignment_1()); }
(rule__AbsoluteTimeEventRule__ExprAssignment_1)
{ after(grammarAccess.getAbsoluteTimeEventRuleAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChangeEventRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChangeEventRule__Group__0__Impl
	rule__ChangeEventRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeEventRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChangeEventRuleAccess().getWhenKeyword_0()); }

	'when' 

{ after(grammarAccess.getChangeEventRuleAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeEventRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChangeEventRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeEventRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChangeEventRuleAccess().getExpAssignment_1()); }
(rule__ChangeEventRule__ExpAssignment_1)
{ after(grammarAccess.getChangeEventRuleAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GuardRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GuardRule__Group__0__Impl
	rule__GuardRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GuardRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardRuleAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getGuardRuleAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GuardRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GuardRule__Group__1__Impl
	rule__GuardRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GuardRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardRuleAccess().getConstraintAssignment_1()); }
(rule__GuardRule__ConstraintAssignment_1)
{ after(grammarAccess.getGuardRuleAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GuardRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GuardRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GuardRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardRuleAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getGuardRuleAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EffectRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectRule__Group__0__Impl
	rule__EffectRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectRuleAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getEffectRuleAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EffectRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectRule__Group__1__Impl
	rule__EffectRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectRuleAccess().getKindAssignment_1()); }
(rule__EffectRule__KindAssignment_1)
{ after(grammarAccess.getEffectRuleAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EffectRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectRuleAccess().getBehaviorNameAssignment_2()); }
(rule__EffectRule__BehaviorNameAssignment_2)
{ after(grammarAccess.getEffectRuleAccess().getBehaviorNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__TransitionRule__TriggersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_0_0()); }
	ruleEventRule{ after(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__TriggersAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_1_1_0()); }
	ruleEventRule{ after(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__GuardAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getGuardGuardRuleParserRuleCall_1_0()); }
	ruleGuardRule{ after(grammarAccess.getTransitionRuleAccess().getGuardGuardRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRule__EffectAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRuleAccess().getEffectEffectRuleParserRuleCall_2_0()); }
	ruleEffectRule{ after(grammarAccess.getTransitionRuleAccess().getEffectEffectRuleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallOrSignalEventRule__OperationOrSignalAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementCrossReference_0()); }
(
{ before(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnyReceiveEventRule__IsAReceiveEventAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0()); }
(
{ before(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0()); }

	'all' 

{ after(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0()); }
)

{ after(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTimeEventRule__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativeTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getRelativeTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteTimeEventRule__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbsoluteTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAbsoluteTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeEventRule__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChangeEventRuleAccess().getExpSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getChangeEventRuleAccess().getExpSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GuardRule__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardRuleAccess().getConstraintSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getGuardRuleAccess().getConstraintSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EffectRule__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectRuleAccess().getKindBehaviorKindEnumRuleCall_1_0()); }
	ruleBehaviorKind{ after(grammarAccess.getEffectRuleAccess().getKindBehaviorKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EffectRule__BehaviorNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEffectRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'\'' ( options {greedy=false;} : . )*'\'');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ~('@') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'|'@'))* ('\r'? '\n')?;

RULE_INT : ('0'..'9')+;

RULE_INTEGER_VALUE : (('0'|'1'..'9' ('_'? '0'..'9')*)|('0b'|'0B') '0'..'1' ('_'? '0'..'1')*|('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') ('_'? ('0'..'9'|'a'..'f'|'A'..'F'))*|'0' '_'? '0'..'7' ('_'? '0'..'7')*);

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


