/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.textedit.message.xtext.services;

import java.util.List;

import org.eclipse.papyrus.uml.alf.services.CommonGrammarAccess;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class UmlMessageGrammarAccess extends AbstractGrammarElementFinder {


	public class MessageRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage.MessageRule");
		private final Group cGroup = (Group) rule.eContents().get(1);
		private final Assignment cSequenceTermAssignment_0 = (Assignment) cGroup.eContents().get(0);
		private final RuleCall cSequenceTermSequenceTermRuleParserRuleCall_0_0 = (RuleCall) cSequenceTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
		private final Assignment cSequenceTermAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
		private final RuleCall cSequenceTermSequenceTermRuleParserRuleCall_1_1_0 = (RuleCall) cSequenceTermAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword) cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment) cGroup.eContents().get(3);
		private final RuleCall cNameNAME_RULETerminalRuleCall_3_0 = (RuleCall) cNameAssignment_3.eContents().get(0);

		// MessageRule:
		// sequenceTerm+=SequenceTermRule ('.' sequenceTerm+=SequenceTermRule)* ':' name=NAME_RULE;
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// sequenceTerm+=SequenceTermRule ('.' sequenceTerm+=SequenceTermRule)* ':' name=NAME_RULE
		public Group getGroup() {
			return cGroup;
		}

		// sequenceTerm+=SequenceTermRule
		public Assignment getSequenceTermAssignment_0() {
			return cSequenceTermAssignment_0;
		}

		// SequenceTermRule
		public RuleCall getSequenceTermSequenceTermRuleParserRuleCall_0_0() {
			return cSequenceTermSequenceTermRuleParserRuleCall_0_0;
		}

		// ('.' sequenceTerm+=SequenceTermRule)*
		public Group getGroup_1() {
			return cGroup_1;
		}

		// '.'
		public Keyword getFullStopKeyword_1_0() {
			return cFullStopKeyword_1_0;
		}

		// sequenceTerm+=SequenceTermRule
		public Assignment getSequenceTermAssignment_1_1() {
			return cSequenceTermAssignment_1_1;
		}

		// SequenceTermRule
		public RuleCall getSequenceTermSequenceTermRuleParserRuleCall_1_1_0() {
			return cSequenceTermSequenceTermRuleParserRuleCall_1_1_0;
		}

		// ':'
		public Keyword getColonKeyword_2() {
			return cColonKeyword_2;
		}

		// name=NAME_RULE
		public Assignment getNameAssignment_3() {
			return cNameAssignment_3;
		}

		// NAME_RULE
		public RuleCall getNameNAME_RULETerminalRuleCall_3_0() {
			return cNameNAME_RULETerminalRuleCall_3_0;
		}
	}

	public class SequenceTermRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage.SequenceTermRule");
		private final Group cGroup = (Group) rule.eContents().get(1);
		private final Assignment cSequencialOrderAssignment_0 = (Assignment) cGroup.eContents().get(0);
		private final RuleCall cSequencialOrderINTTerminalRuleCall_0_0 = (RuleCall) cSequencialOrderAssignment_0.eContents().get(0);
		private final Assignment cSequenceNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
		private final RuleCall cSequenceNameIDTerminalRuleCall_1_0 = (RuleCall) cSequenceNameAssignment_1.eContents().get(0);
		private final Assignment cRecurrenceAssignment_2 = (Assignment) cGroup.eContents().get(2);
		private final RuleCall cRecurrenceRecurrenceRuleParserRuleCall_2_0 = (RuleCall) cRecurrenceAssignment_2.eContents().get(0);

		// SequenceTermRule:
		// sequencialOrder=INT
		// //represents the sequential order of the Message within the next higher level of procedural calling
		// sequenceName=ID?
		// // represents a concurrent thread of control. Messages that differ in the final name are concurrent at that level of nesting
		//
		// recurrence=RecurrenceRule? // The recurrence represents conditional or iterative execution.
		//
		// //('.' leftTerms += LeftSequenceTermRule)*
		// ;
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// sequencialOrder=INT //represents the sequential order of the Message within the next higher level of procedural calling
		//
		// sequenceName=ID?
		//// represents a concurrent thread of control. Messages that differ in the final name are concurrent at that level of nesting
		//
		// recurrence=RecurrenceRule?
		public Group getGroup() {
			return cGroup;
		}

		// sequencialOrder=INT
		public Assignment getSequencialOrderAssignment_0() {
			return cSequencialOrderAssignment_0;
		}

		// INT
		public RuleCall getSequencialOrderINTTerminalRuleCall_0_0() {
			return cSequencialOrderINTTerminalRuleCall_0_0;
		}

		//// represents the sequential order of the Message within the next higher level of procedural calling
		// sequenceName=ID?
		public Assignment getSequenceNameAssignment_1() {
			return cSequenceNameAssignment_1;
		}

		// ID
		public RuleCall getSequenceNameIDTerminalRuleCall_1_0() {
			return cSequenceNameIDTerminalRuleCall_1_0;
		}

		//// represents a concurrent thread of control. Messages that differ in the final name are concurrent at that level of nesting
		//
		// recurrence=RecurrenceRule?
		public Assignment getRecurrenceAssignment_2() {
			return cRecurrenceAssignment_2;
		}

		// RecurrenceRule
		public RuleCall getRecurrenceRecurrenceRuleParserRuleCall_2_0() {
			return cRecurrenceRecurrenceRuleParserRuleCall_2_0;
		}
	}

	public class RecurrenceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage.RecurrenceRule");
		private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
		private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword) cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword) cGroup_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall) cGroup_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword) cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword) cGroup_1.eContents().get(2);

		// RecurrenceRule:
		// '*' '[' STRING ']' | '[' STRING ']';
		@Override
		public ParserRule getRule() {
			return rule;
		}

		// '*' '[' STRING ']' | '[' STRING ']'
		public Alternatives getAlternatives() {
			return cAlternatives;
		}

		// '*' '[' STRING ']'
		public Group getGroup_0() {
			return cGroup_0;
		}

		// '*'
		public Keyword getAsteriskKeyword_0_0() {
			return cAsteriskKeyword_0_0;
		}

		// '['
		public Keyword getLeftSquareBracketKeyword_0_1() {
			return cLeftSquareBracketKeyword_0_1;
		}

		// STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() {
			return cSTRINGTerminalRuleCall_0_2;
		}

		// ']'
		public Keyword getRightSquareBracketKeyword_0_3() {
			return cRightSquareBracketKeyword_0_3;
		}

		// '[' STRING ']'
		public Group getGroup_1() {
			return cGroup_1;
		}

		// '['
		public Keyword getLeftSquareBracketKeyword_1_0() {
			return cLeftSquareBracketKeyword_1_0;
		}

		// STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() {
			return cSTRINGTerminalRuleCall_1_1;
		}

		// ']'
		public Keyword getRightSquareBracketKeyword_1_2() {
			return cRightSquareBracketKeyword_1_2;
		}
	}


	private final MessageRuleElements pMessageRule;
	private final SequenceTermRuleElements pSequenceTermRule;
	private final TerminalRule tNAME_RULE;
	private final RecurrenceRuleElements pRecurrenceRule;

	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UmlMessageGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.gaTerminals = gaTerminals;
		this.pMessageRule = new MessageRuleElements();
		this.pSequenceTermRule = new SequenceTermRuleElements();
		this.tNAME_RULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage.NAME_RULE");
		this.pRecurrenceRule = new RecurrenceRuleElements();
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}

	@Override
	public Grammar getGrammar() {
		return grammar;
	}


	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}


	// MessageRule:
	// sequenceTerm+=SequenceTermRule ('.' sequenceTerm+=SequenceTermRule)* ':' name=NAME_RULE;
	public MessageRuleElements getMessageRuleAccess() {
		return pMessageRule;
	}

	public ParserRule getMessageRuleRule() {
		return getMessageRuleAccess().getRule();
	}

	// SequenceTermRule:
	// sequencialOrder=INT
	// //represents the sequential order of the Message within the next higher level of procedural calling
	// sequenceName=ID?
	// // represents a concurrent thread of control. Messages that differ in the final name are concurrent at that level of nesting
	//
	// recurrence=RecurrenceRule? // The recurrence represents conditional or iterative execution.
	//
	// //('.' leftTerms += LeftSequenceTermRule)*
	// ;
	public SequenceTermRuleElements getSequenceTermRuleAccess() {
		return pSequenceTermRule;
	}

	public ParserRule getSequenceTermRuleRule() {
		return getSequenceTermRuleAccess().getRule();
	}

	// terminal NAME_RULE:
	// ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '(' | ')')*;
	public TerminalRule getNAME_RULERule() {
		return tNAME_RULE;
	}

	// RecurrenceRule:
	// '*' '[' STRING ']' | '[' STRING ']';
	public RecurrenceRuleElements getRecurrenceRuleAccess() {
		return pRecurrenceRule;
	}

	public ParserRule getRecurrenceRuleRule() {
		return getRecurrenceRuleAccess().getRule();
	}

	// terminal ID:
	// ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | '\''->'\'';
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}

	// terminal STRING:
	// '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	}

	// terminal ML_COMMENT:
	// '/*' !'@'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	}

	// terminal SL_COMMENT:
	// '//' !('\n' | '\r' | '@')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	}

	// terminal INT returns ecore::EInt:
	// '0'..'9'+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	}

	// terminal INTEGER_VALUE:
	// ('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	// 'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getINTEGER_VALUERule() {
		return gaCommon.getINTEGER_VALUERule();
	}

	// terminal WS:
	// ' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}

	// terminal ANY_OTHER:
	// .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
