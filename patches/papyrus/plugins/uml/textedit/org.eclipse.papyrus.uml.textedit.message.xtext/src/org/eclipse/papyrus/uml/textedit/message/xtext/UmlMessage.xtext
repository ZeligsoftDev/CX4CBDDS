grammar org.eclipse.papyrus.uml.textedit.message.xtext.UmlMessage with org.eclipse.papyrus.uml.alf.Common

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
generate umlMessage "http://www.eclipse.org/papyrus/uml/textedit/message/xtext/UmlMessage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MessageRule:
	sequenceTerm+=SequenceTermRule
	('.' sequenceTerm+=SequenceTermRule)*
	':'
	name=NAME_RULE;

SequenceTermRule:
	sequencialOrder=INT //represents the sequential order of the Message within the next higher level of procedural calling
	(sequenceName=ID)? // represents a concurrent thread of control. Messages that differ in the final name are concurrent at that level of nesting
	(recurrence=RecurrenceRule)? // The recurrence represents conditional or iterative execution.
	//('.' leftTerms += LeftSequenceTermRule)*
;

terminal NAME_RULE returns ecore::EString:
	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '(' | ')')*;

RecurrenceRule:
	('*' '[' STRING ']') | ('[' STRING ']');

	//terminal STRING :
//( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* ;


/* messagename= sequenceterm ('.' sequenceterm)* (':' name);
terminal name:
('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal sequenceterm:
(INT)(name)?(recurrence)?;
terminal recurrence:
('*''[' STRING ']')|('[' STRING ']'); 

sequenceTerm1 = SequenceTermRule
('.' sequenceTerm2 = SequenceTermRule )* 

*/


