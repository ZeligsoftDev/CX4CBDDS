/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.antlr.runtime.RecognitionException;
import org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.services.UMLConnectionPointReferenceGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

public class UMLConnectionPointReferenceParser extends AbstractContentAssistParser {

	@Inject
	private UMLConnectionPointReferenceGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr.internal.InternalUMLConnectionPointReferenceParser createParser() {
		org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr.internal.InternalUMLConnectionPointReferenceParser result = new org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr.internal.InternalUMLConnectionPointReferenceParser(
				null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getAlternatives(), "rule__ConnectionPointReferenceRule__Alternatives");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getGroup_0(), "rule__ConnectionPointReferenceRule__Group_0__0");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getGroup_0_2(), "rule__ConnectionPointReferenceRule__Group_0_2__0");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getGroup_1(), "rule__ConnectionPointReferenceRule__Group_1__0");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getGroup_1_2(), "rule__ConnectionPointReferenceRule__Group_1_2__0");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getEntryAssignment_0_1(), "rule__ConnectionPointReferenceRule__EntryAssignment_0_1");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getEntryAssignment_0_2_1(), "rule__ConnectionPointReferenceRule__EntryAssignment_0_2_1");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getExitAssignment_1_1(), "rule__ConnectionPointReferenceRule__ExitAssignment_1_1");
					put(grammarAccess.getConnectionPointReferenceRuleAccess().getExitAssignment_1_2_1(), "rule__ConnectionPointReferenceRule__ExitAssignment_1_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr.internal.InternalUMLConnectionPointReferenceParser typedParser = (org.eclipse.papyrus.uml.textedit.connectionpointreference.xtext.ui.contentassist.antlr.internal.InternalUMLConnectionPointReferenceParser) parser;
			typedParser.entryRuleConnectionPointReferenceRule();
			return typedParser.getFollowElements();
		} catch (RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UMLConnectionPointReferenceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UMLConnectionPointReferenceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
