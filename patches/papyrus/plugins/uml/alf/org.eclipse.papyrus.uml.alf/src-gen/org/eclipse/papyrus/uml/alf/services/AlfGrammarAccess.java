/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.alf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class AlfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNameNamespaceDeclarationParserRuleCall_0_0 = (RuleCall)cNamespaceNameAssignment_0.eContents().get(0);
		private final Assignment cImportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportImportDeclarationParserRuleCall_1_0 = (RuleCall)cImportAssignment_1.eContents().get(0);
		private final Assignment cDocumentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_2_0 = (RuleCall)cDocumentationAssignment_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionNamespaceDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		
		/// *********
		// * UNITS *
		// ********* / UnitDefinition:
		//	namespaceName=NamespaceDeclaration?
		//	^import+=ImportDeclaration*
		//	documentation+=DOCUMENTATION_COMMENT?
		//	annotation+=StereotypeAnnotation*
		//	definition=NamespaceDefinition;
		@Override public ParserRule getRule() { return rule; }

		//namespaceName=NamespaceDeclaration? ^import+=ImportDeclaration* documentation+=DOCUMENTATION_COMMENT?
		//annotation+=StereotypeAnnotation* definition=NamespaceDefinition
		public Group getGroup() { return cGroup; }

		//namespaceName=NamespaceDeclaration?
		public Assignment getNamespaceNameAssignment_0() { return cNamespaceNameAssignment_0; }

		//NamespaceDeclaration
		public RuleCall getNamespaceNameNamespaceDeclarationParserRuleCall_0_0() { return cNamespaceNameNamespaceDeclarationParserRuleCall_0_0; }

		//^import+=ImportDeclaration*
		public Assignment getImportAssignment_1() { return cImportAssignment_1; }

		//ImportDeclaration
		public RuleCall getImportImportDeclarationParserRuleCall_1_0() { return cImportImportDeclarationParserRuleCall_1_0; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_2() { return cDocumentationAssignment_2; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_2_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_2_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_3_0() { return cAnnotationStereotypeAnnotationParserRuleCall_3_0; }

		//definition=NamespaceDefinition
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }

		//NamespaceDefinition
		public RuleCall getDefinitionNamespaceDefinitionParserRuleCall_4_0() { return cDefinitionNamespaceDefinitionParserRuleCall_4_0; }
	}

	public class StereotypeAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.StereotypeAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStereotypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStereotypeNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cStereotypeNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNamesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNamesQualifiedNameListParserRuleCall_2_1_0_0 = (RuleCall)cNamesAssignment_2_1_0.eContents().get(0);
		private final Assignment cTaggedValuesAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTaggedValuesTaggedValueListParserRuleCall_2_1_1_0 = (RuleCall)cTaggedValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//StereotypeAnnotation:
		//	'@' stereotypeName=QualifiedName ('(' (names=QualifiedNameList | taggedValues=TaggedValueList) ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'@' stereotypeName=QualifiedName ('(' (names=QualifiedNameList | taggedValues=TaggedValueList) ')')?
		public Group getGroup() { return cGroup; }

		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//stereotypeName=QualifiedName
		public Assignment getStereotypeNameAssignment_1() { return cStereotypeNameAssignment_1; }

		//QualifiedName
		public RuleCall getStereotypeNameQualifiedNameParserRuleCall_1_0() { return cStereotypeNameQualifiedNameParserRuleCall_1_0; }

		//('(' (names=QualifiedNameList | taggedValues=TaggedValueList) ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(names=QualifiedNameList | taggedValues=TaggedValueList)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//names=QualifiedNameList
		public Assignment getNamesAssignment_2_1_0() { return cNamesAssignment_2_1_0; }

		//QualifiedNameList
		public RuleCall getNamesQualifiedNameListParserRuleCall_2_1_0_0() { return cNamesQualifiedNameListParserRuleCall_2_1_0_0; }

		//taggedValues=TaggedValueList
		public Assignment getTaggedValuesAssignment_2_1_1() { return cTaggedValuesAssignment_2_1_1; }

		//TaggedValueList
		public RuleCall getTaggedValuesTaggedValueListParserRuleCall_2_1_1_0() { return cTaggedValuesTaggedValueListParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TaggedValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TaggedValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTaggedValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTaggedValueTaggedValueParserRuleCall_0_0 = (RuleCall)cTaggedValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTaggedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTaggedValueTaggedValueParserRuleCall_1_1_0 = (RuleCall)cTaggedValueAssignment_1_1.eContents().get(0);
		
		//TaggedValueList:
		//	taggedValue+=TaggedValue ("," taggedValue+=TaggedValue)*;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Made taggedValue composite in the metamodel.
		//taggedValue+=TaggedValue ("," taggedValue+=TaggedValue)*
		public Group getGroup() { return cGroup; }

		//// CHANGE: Made taggedValue composite in the metamodel.
		//taggedValue+=TaggedValue
		public Assignment getTaggedValueAssignment_0() { return cTaggedValueAssignment_0; }

		//TaggedValue
		public RuleCall getTaggedValueTaggedValueParserRuleCall_0_0() { return cTaggedValueTaggedValueParserRuleCall_0_0; }

		//("," taggedValue+=TaggedValue)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//taggedValue+=TaggedValue
		public Assignment getTaggedValueAssignment_1_1() { return cTaggedValueAssignment_1_1; }

		//TaggedValue
		public RuleCall getTaggedValueTaggedValueParserRuleCall_1_1_0() { return cTaggedValueTaggedValueParserRuleCall_1_1_0; }
	}

	public class TaggedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TaggedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueBOOLEAN_VALUETerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOperatorNumericUnaryOperatorParserRuleCall_2_1_0_0 = (RuleCall)cOperatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueNATURAL_VALUETerminalRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Assignment cValueAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cValueAsteriskKeyword_2_2_0 = (Keyword)cValueAssignment_2_2.eContents().get(0);
		private final Assignment cValueAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cValueAssignment_2_3.eContents().get(0);
		
		//TaggedValue:
		//	name=Name '=>' (value=BOOLEAN_VALUE | operator=NumericUnaryOperator? value=NATURAL_VALUE | value='*' | value=STRING);
		@Override public ParserRule getRule() { return rule; }

		//name=Name '=>' (value=BOOLEAN_VALUE | operator=NumericUnaryOperator? value=NATURAL_VALUE | value='*' | value=STRING)
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//(value=BOOLEAN_VALUE | operator=NumericUnaryOperator? value=NATURAL_VALUE | value='*' | value=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=BOOLEAN_VALUE
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//BOOLEAN_VALUE
		public RuleCall getValueBOOLEAN_VALUETerminalRuleCall_2_0_0() { return cValueBOOLEAN_VALUETerminalRuleCall_2_0_0; }

		//operator=NumericUnaryOperator? value=NATURAL_VALUE
		public Group getGroup_2_1() { return cGroup_2_1; }

		//operator=NumericUnaryOperator?
		public Assignment getOperatorAssignment_2_1_0() { return cOperatorAssignment_2_1_0; }

		//NumericUnaryOperator
		public RuleCall getOperatorNumericUnaryOperatorParserRuleCall_2_1_0_0() { return cOperatorNumericUnaryOperatorParserRuleCall_2_1_0_0; }

		//value=NATURAL_VALUE
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//NATURAL_VALUE
		public RuleCall getValueNATURAL_VALUETerminalRuleCall_2_1_1_0() { return cValueNATURAL_VALUETerminalRuleCall_2_1_1_0; }

		//value='*'
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//'*'
		public Keyword getValueAsteriskKeyword_2_2_0() { return cValueAsteriskKeyword_2_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_3() { return cValueAssignment_2_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_3_0() { return cValueSTRINGTerminalRuleCall_2_3_0; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NamespaceDeclaration QualifiedName:
		//	'namespace' QualifiedName ';'
		@Override public ParserRule getRule() { return rule; }

		//'namespace' QualifiedName ';'
		public Group getGroup() { return cGroup; }

		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPackageImportReferenceParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cElementImportReferenceParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImportDeclaration ImportReference:
		//	(PackageImportReference | ElementImportReference) ';'
		@Override public ParserRule getRule() { return rule; }

		//(PackageImportReference | ElementImportReference) ';'
		public Group getGroup() { return cGroup; }

		//(PackageImportReference | ElementImportReference)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PackageImportReference
		public RuleCall getPackageImportReferenceParserRuleCall_0_0() { return cPackageImportReferenceParserRuleCall_0_0; }

		//ElementImportReference
		public RuleCall getElementImportReferenceParserRuleCall_0_1() { return cElementImportReferenceParserRuleCall_0_1; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ElementImportReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ElementImportReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityImportVisibilityIndicatorParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferentNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferentNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cReferentNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasNameParserRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		
		//ElementImportReference:
		//	visibility=ImportVisibilityIndicator 'import' referentName=QualifiedName ('as' alias=Name)?;
		@Override public ParserRule getRule() { return rule; }

		//visibility=ImportVisibilityIndicator 'import' referentName=QualifiedName ('as' alias=Name)?
		public Group getGroup() { return cGroup; }

		//visibility=ImportVisibilityIndicator
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//ImportVisibilityIndicator
		public RuleCall getVisibilityImportVisibilityIndicatorParserRuleCall_0_0() { return cVisibilityImportVisibilityIndicatorParserRuleCall_0_0; }

		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//referentName=QualifiedName
		public Assignment getReferentNameAssignment_2() { return cReferentNameAssignment_2; }

		//QualifiedName
		public RuleCall getReferentNameQualifiedNameParserRuleCall_2_0() { return cReferentNameQualifiedNameParserRuleCall_2_0; }

		//('as' alias=Name)?
		public Group getGroup_3() { return cGroup_3; }

		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//alias=Name
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }

		//Name
		public RuleCall getAliasNameParserRuleCall_3_1_0() { return cAliasNameParserRuleCall_3_1_0; }
	}

	public class PackageImportReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackageImportReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityImportVisibilityIndicatorParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferentNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferentNamePackageImportQualifiedNameParserRuleCall_2_0 = (RuleCall)cReferentNameAssignment_2.eContents().get(0);
		
		//PackageImportReference:
		//	visibility=ImportVisibilityIndicator 'import' referentName=PackageImportQualifiedName
		//	//  ( 
		//	//    referentName = UnqualifiedName ('::' | '.') '*' |
		//	//    referentName = ColonQualifiedName '::' '*' | 
		//	//    referentName = DotQualifiedName '.' '*'
		//	//  )
		//;
		@Override public ParserRule getRule() { return rule; }

		//visibility=ImportVisibilityIndicator 'import' referentName=PackageImportQualifiedName
		public Group getGroup() { return cGroup; }

		//visibility=ImportVisibilityIndicator
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//ImportVisibilityIndicator
		public RuleCall getVisibilityImportVisibilityIndicatorParserRuleCall_0_0() { return cVisibilityImportVisibilityIndicatorParserRuleCall_0_0; }

		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//referentName=PackageImportQualifiedName
		public Assignment getReferentNameAssignment_2() { return cReferentNameAssignment_2; }

		//PackageImportQualifiedName
		public RuleCall getReferentNamePackageImportQualifiedNameParserRuleCall_2_0() { return cReferentNamePackageImportQualifiedNameParserRuleCall_2_0; }
	}

	public class PackageImportQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackageImportQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBindingNameBindingParserRuleCall_0_0 = (RuleCall)cNameBindingAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_0_0_1_0 = (RuleCall)cNameBindingAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0_1_0 = (RuleCall)cNameBindingAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//PackageImportQualifiedName QualifiedName:
		//	nameBinding+=NameBinding (('::' nameBinding+=NameBinding)* '::' '*' | ('.' nameBinding+=NameBinding)* '.' '*')
		@Override public ParserRule getRule() { return rule; }

		//nameBinding+=NameBinding (('::' nameBinding+=NameBinding)* '::' '*' | ('.' nameBinding+=NameBinding)* '.' '*')
		public Group getGroup() { return cGroup; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_0() { return cNameBindingAssignment_0; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_0_0() { return cNameBindingNameBindingParserRuleCall_0_0; }

		//(('::' nameBinding+=NameBinding)* '::' '*' | ('.' nameBinding+=NameBinding)* '.' '*')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//('::' nameBinding+=NameBinding)* '::' '*'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//('::' nameBinding+=NameBinding)*
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//'::'
		public Keyword getColonColonKeyword_1_0_0_0() { return cColonColonKeyword_1_0_0_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_0_0_1() { return cNameBindingAssignment_1_0_0_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_0_0_1_0() { return cNameBindingNameBindingParserRuleCall_1_0_0_1_0; }

		//'::'
		public Keyword getColonColonKeyword_1_0_1() { return cColonColonKeyword_1_0_1; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_2() { return cAsteriskKeyword_1_0_2; }

		//('.' nameBinding+=NameBinding)* '.' '*'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//('.' nameBinding+=NameBinding)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_1_0_0() { return cFullStopKeyword_1_1_0_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1_0_1() { return cNameBindingAssignment_1_1_0_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//'*'
		public Keyword getAsteriskKeyword_1_1_2() { return cAsteriskKeyword_1_1_2; }
	}

	public class ImportVisibilityIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ImportVisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ImportVisibilityIndicator:
		//	'public' | 'private';
		@Override public ParserRule getRule() { return rule; }

		//'public' | 'private'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//'private'
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }
	}

	public class NamespaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NamespaceDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * NAMESPACES * / NamespaceDefinition:
		//	PackageDefinition | ClassifierDefinition;
		@Override public ParserRule getRule() { return rule; }

		//PackageDefinition | ClassifierDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }

		//ClassifierDefinition
		public RuleCall getClassifierDefinitionParserRuleCall_1() { return cClassifierDefinitionParserRuleCall_1; }
	}

	public class VisibilityIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportVisibilityIndicatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cProtectedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//VisibilityIndicator:
		//	ImportVisibilityIndicator | 'protected';
		@Override public ParserRule getRule() { return rule; }

		//ImportVisibilityIndicator | 'protected'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ImportVisibilityIndicator
		public RuleCall getImportVisibilityIndicatorParserRuleCall_0() { return cImportVisibilityIndicatorParserRuleCall_0; }

		//'protected'
		public Keyword getProtectedKeyword_1() { return cProtectedKeyword_1; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedMemberPackagedElementParserRuleCall_3_0 = (RuleCall)cOwnedMemberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// CHANGE: Separated Member into Member with a composite reference to MemberDefinition.
		/// * PACKAGES * / PackageDefinition:
		//	'package' name=Name '{' ownedMember+=PackagedElement* '}';
		@Override public ParserRule getRule() { return rule; }

		//'package' name=Name '{' ownedMember+=PackagedElement* '}'
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ownedMember+=PackagedElement*
		public Assignment getOwnedMemberAssignment_3() { return cOwnedMemberAssignment_3; }

		//PackagedElement
		public RuleCall getOwnedMemberPackagedElementParserRuleCall_3_0() { return cOwnedMemberPackagedElementParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PackageDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackageDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIsStubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_2_0_0 = (Keyword)cIsStubAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedMemberPackagedElementParserRuleCall_2_1_1_0 = (RuleCall)cOwnedMemberAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//PackageDefinitionOrStub PackageDefinition:
		//	'package' name=Name (isStub?=';' | '{' ownedMember+=PackagedElement* '}')
		@Override public ParserRule getRule() { return rule; }

		//'package' name=Name (isStub?=';' | '{' ownedMember+=PackagedElement* '}')
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//(isStub?=';' | '{' ownedMember+=PackagedElement* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//isStub?=';'
		public Assignment getIsStubAssignment_2_0() { return cIsStubAssignment_2_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_2_0_0() { return cIsStubSemicolonKeyword_2_0_0; }

		//'{' ownedMember+=PackagedElement* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//ownedMember+=PackagedElement*
		public Assignment getOwnedMemberAssignment_2_1_1() { return cOwnedMemberAssignment_2_1_1; }

		//PackagedElement
		public RuleCall getOwnedMemberPackagedElementParserRuleCall_2_1_1_0() { return cOwnedMemberPackagedElementParserRuleCall_2_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class PackagedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackagedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityImportVisibilityIndicatorParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionPackagedElementDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//// PackageBody : 
		//// 	{PackageBody}'{' ( packagedElement += PackagedElement )* '}'
		//// ;
		//PackagedElement Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	annotation+=StereotypeAnnotation*
		//	visibility=ImportVisibilityIndicator
		//	definition=PackagedElementDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? annotation+=StereotypeAnnotation* visibility=ImportVisibilityIndicator
		//definition=PackagedElementDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_1_0() { return cAnnotationStereotypeAnnotationParserRuleCall_1_0; }

		//visibility=ImportVisibilityIndicator
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//ImportVisibilityIndicator
		public RuleCall getVisibilityImportVisibilityIndicatorParserRuleCall_2_0() { return cVisibilityImportVisibilityIndicatorParserRuleCall_2_0; }

		//definition=PackagedElementDefinition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//PackagedElementDefinition
		public RuleCall getDefinitionPackagedElementDefinitionParserRuleCall_3_0() { return cDefinitionPackagedElementDefinitionParserRuleCall_3_0; }
	}

	public class PackagedElementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PackagedElementDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionOrStubParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackagedElementDefinition MemberDefinition:
		//	PackageDefinitionOrStub | ClassifierDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//PackageDefinitionOrStub | ClassifierDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinitionOrStub
		public RuleCall getPackageDefinitionOrStubParserRuleCall_0() { return cPackageDefinitionOrStubParserRuleCall_0; }

		//ClassifierDefinitionOrStub
		public RuleCall getClassifierDefinitionOrStubParserRuleCall_1() { return cClassifierDefinitionOrStubParserRuleCall_1; }
	}

	public class ClassifierDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifierDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActiveClassDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerationDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssociationDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSignalDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cActivityDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// ***************
		// * CLASSIFIERS *
		// *************** / ClassifierDefinition:
		//	ClassDefinition | ActiveClassDefinition | DataTypeDefinition | EnumerationDefinition | AssociationDefinition |
		//	SignalDefinition | ActivityDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ClassDefinition | ActiveClassDefinition | DataTypeDefinition | EnumerationDefinition | AssociationDefinition |
		//SignalDefinition | ActivityDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_0() { return cClassDefinitionParserRuleCall_0; }

		//ActiveClassDefinition
		public RuleCall getActiveClassDefinitionParserRuleCall_1() { return cActiveClassDefinitionParserRuleCall_1; }

		//DataTypeDefinition
		public RuleCall getDataTypeDefinitionParserRuleCall_2() { return cDataTypeDefinitionParserRuleCall_2; }

		//EnumerationDefinition
		public RuleCall getEnumerationDefinitionParserRuleCall_3() { return cEnumerationDefinitionParserRuleCall_3; }

		//AssociationDefinition
		public RuleCall getAssociationDefinitionParserRuleCall_4() { return cAssociationDefinitionParserRuleCall_4; }

		//SignalDefinition
		public RuleCall getSignalDefinitionParserRuleCall_5() { return cSignalDefinitionParserRuleCall_5; }

		//ActivityDefinition
		public RuleCall getActivityDefinitionParserRuleCall_6() { return cActivityDefinitionParserRuleCall_6; }
	}

	public class ClassifierDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifierDefinitionOrStub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDefinitionOrStubParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActiveClassDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeDefinitionOrStubParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerationDefinitionOrStubParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssociationDefinitionOrStubParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSignalDefinitionOrStubParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cActivityDefinitionOrStubParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ClassifierDefinitionOrStub ClassifierDefinition:
		//	ClassDefinitionOrStub | ActiveClassDefinitionOrStub | DataTypeDefinitionOrStub | EnumerationDefinitionOrStub |
		//	AssociationDefinitionOrStub | SignalDefinitionOrStub | ActivityDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//ClassDefinitionOrStub | ActiveClassDefinitionOrStub | DataTypeDefinitionOrStub | EnumerationDefinitionOrStub |
		//AssociationDefinitionOrStub | SignalDefinitionOrStub | ActivityDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDefinitionOrStub
		public RuleCall getClassDefinitionOrStubParserRuleCall_0() { return cClassDefinitionOrStubParserRuleCall_0; }

		//ActiveClassDefinitionOrStub
		public RuleCall getActiveClassDefinitionOrStubParserRuleCall_1() { return cActiveClassDefinitionOrStubParserRuleCall_1; }

		//DataTypeDefinitionOrStub
		public RuleCall getDataTypeDefinitionOrStubParserRuleCall_2() { return cDataTypeDefinitionOrStubParserRuleCall_2; }

		//EnumerationDefinitionOrStub
		public RuleCall getEnumerationDefinitionOrStubParserRuleCall_3() { return cEnumerationDefinitionOrStubParserRuleCall_3; }

		//AssociationDefinitionOrStub
		public RuleCall getAssociationDefinitionOrStubParserRuleCall_4() { return cAssociationDefinitionOrStubParserRuleCall_4; }

		//SignalDefinitionOrStub
		public RuleCall getSignalDefinitionOrStubParserRuleCall_5() { return cSignalDefinitionOrStubParserRuleCall_5; }

		//ActivityDefinitionOrStub
		public RuleCall getActivityDefinitionOrStubParserRuleCall_6() { return cActivityDefinitionOrStubParserRuleCall_6; }
	}

	public class ClassifierSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifierSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_1_2_1_0 = (RuleCall)cOwnedMemberAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSpecializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_2_0 = (RuleCall)cSpecializationAssignment_2.eContents().get(0);
		
		//ClassifierSignature ClassifierDefinition:
		//	name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		//specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_1() { return cGroup_1; }

		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_1_1() { return cOwnedMemberAssignment_1_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_1_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_1_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_1_2_1() { return cOwnedMemberAssignment_1_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_1_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_1_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_2() { return cSpecializationAssignment_2; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_2_0() { return cSpecializationSpecializationClauseParserRuleCall_2_0; }
	}

	public class ClassifierTemplateParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifierTemplateParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionClassifierTemplateParameterDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		
		//ClassifierTemplateParameter Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	definition=ClassifierTemplateParameterDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? definition=ClassifierTemplateParameterDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//definition=ClassifierTemplateParameterDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//ClassifierTemplateParameterDefinition
		public RuleCall getDefinitionClassifierTemplateParameterDefinitionParserRuleCall_1_0() { return cDefinitionClassifierTemplateParameterDefinitionParserRuleCall_1_0; }
	}

	public class ClassifierTemplateParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifierTemplateParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSpecializesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSpecializationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSpecializationTemplateParameterConstraintParserRuleCall_1_1_0 = (RuleCall)cSpecializationAssignment_1_1.eContents().get(0);
		
		//ClassifierTemplateParameterDefinition ClassifierTemplateParameter:
		//	name=Name ('specializes' specialization=TemplateParameterConstraint)?
		@Override public ParserRule getRule() { return rule; }

		//name=Name ('specializes' specialization=TemplateParameterConstraint)?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//('specializes' specialization=TemplateParameterConstraint)?
		public Group getGroup_1() { return cGroup_1; }

		//'specializes'
		public Keyword getSpecializesKeyword_1_0() { return cSpecializesKeyword_1_0; }

		//specialization=TemplateParameterConstraint
		public Assignment getSpecializationAssignment_1_1() { return cSpecializationAssignment_1_1; }

		//TemplateParameterConstraint
		public RuleCall getSpecializationTemplateParameterConstraintParserRuleCall_1_1_0() { return cSpecializationTemplateParameterConstraintParserRuleCall_1_1_0; }
	}

	public class TemplateParameterConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TemplateParameterConstraint");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TemplateParameterConstraint QualifiedNameList:
		//	name+=QualifiedName
		@Override public ParserRule getRule() { return rule; }

		//name+=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class SpecializationClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SpecializationClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecializesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SpecializationClause QualifiedNameList:
		//	'specializes' QualifiedNameList
		@Override public ParserRule getRule() { return rule; }

		//'specializes' QualifiedNameList
		public Group getGroup() { return cGroup; }

		//'specializes'
		public Keyword getSpecializesKeyword_0() { return cSpecializesKeyword_0; }

		//QualifiedNameList
		public RuleCall getQualifiedNameListParserRuleCall_1() { return cQualifiedNameListParserRuleCall_1; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0 = (RuleCall)cOwnedMemberAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0 = (RuleCall)cOwnedMemberAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSpecializationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_4_0 = (RuleCall)cSpecializationAssignment_4.eContents().get(0);
		
		/// * CLASSES * / ClassDeclaration ClassDefinition:
		//	isAbstract?='abstract'? 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//	ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//ownedMember+=ClassifierTemplateParameter)* '>')? specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_3() { return cGroup_3; }

		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_1() { return cOwnedMemberAssignment_3_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_2_1() { return cOwnedMemberAssignment_3_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_4() { return cSpecializationAssignment_4; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_4_0() { return cSpecializationSpecializationClauseParserRuleCall_4_0; }
	}

	public class ClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberClassMemberParserRuleCall_2_0 = (RuleCall)cOwnedMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDefinition:
		//	ClassDeclaration
		//	'{' ownedMember+=ClassMember* '}';
		@Override public ParserRule getRule() { return rule; }

		//ClassDeclaration '{' ownedMember+=ClassMember* '}'
		public Group getGroup() { return cGroup; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedMember+=ClassMember*
		public Assignment getOwnedMemberAssignment_2() { return cOwnedMemberAssignment_2; }

		//ClassMember
		public RuleCall getOwnedMemberClassMemberParserRuleCall_2_0() { return cOwnedMemberClassMemberParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClassDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberClassMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ClassDefinitionOrStub ClassDefinition:
		//	ClassDeclaration (isStub?=';' | '{' ownedMember+=ClassMember* '}')
		@Override public ParserRule getRule() { return rule; }

		//ClassDeclaration (isStub?=';' | '{' ownedMember+=ClassMember* '}')
		public Group getGroup() { return cGroup; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=ClassMember* '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=ClassMember* '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=ClassMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//ClassMember
		public RuleCall getOwnedMemberClassMemberParserRuleCall_1_1_1_0() { return cOwnedMemberClassMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityIndicatorParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionClassMemberDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//ClassMember Member:
		//	documentation+=DOCUMENTATION_COMMENT*
		//	annotation+=StereotypeAnnotation*
		//	visibility=VisibilityIndicator?
		//	definition=ClassMemberDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT* annotation+=StereotypeAnnotation* visibility=VisibilityIndicator?
		//definition=ClassMemberDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT*
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_1_0() { return cAnnotationStereotypeAnnotationParserRuleCall_1_0; }

		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorParserRuleCall_2_0() { return cVisibilityVisibilityIndicatorParserRuleCall_2_0; }

		//definition=ClassMemberDefinition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//ClassMemberDefinition
		public RuleCall getDefinitionClassMemberDefinitionParserRuleCall_3_0() { return cDefinitionClassMemberDefinitionParserRuleCall_3_0; }
	}

	public class ClassMemberDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassMemberDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierDefinitionOrStubParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassMemberDefinition MemberDefinition:
		//	ClassifierDefinitionOrStub | FeatureDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//ClassifierDefinitionOrStub | FeatureDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierDefinitionOrStub
		public RuleCall getClassifierDefinitionOrStubParserRuleCall_0() { return cClassifierDefinitionOrStubParserRuleCall_0; }

		//FeatureDefinitionOrStub
		public RuleCall getFeatureDefinitionOrStubParserRuleCall_1() { return cFeatureDefinitionOrStubParserRuleCall_1; }
	}

	public class ActiveClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cActiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_4_1_0 = (RuleCall)cOwnedMemberAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_4_2_1_0 = (RuleCall)cOwnedMemberAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cSpecializationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_5_0 = (RuleCall)cSpecializationAssignment_5.eContents().get(0);
		
		/// * ACTIVE CLASSES * / ActiveClassDeclaration ActiveClassDefinition:
		//	isAbstract?='abstract'? 'active' 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//	ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? 'active' 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//ownedMember+=ClassifierTemplateParameter)* '>')? specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//'active'
		public Keyword getActiveKeyword_1() { return cActiveKeyword_1; }

		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//name=Name
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_4() { return cGroup_4; }

		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_4_1() { return cOwnedMemberAssignment_4_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_4_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_4_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_4_2_1() { return cOwnedMemberAssignment_4_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_4_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_4_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_5() { return cSpecializationAssignment_5; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_5_0() { return cSpecializationSpecializationClauseParserRuleCall_5_0; }
	}

	public class ActiveClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActiveClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberActiveClassMemberParserRuleCall_2_0 = (RuleCall)cOwnedMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassifierBehaviorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cClassifierBehaviorBehaviorClauseParserRuleCall_4_1_0 = (RuleCall)cClassifierBehaviorAssignment_4_1.eContents().get(0);
		
		//ActiveClassDefinition:
		//	ActiveClassDeclaration
		//	'{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?;
		@Override public ParserRule getRule() { return rule; }

		//ActiveClassDeclaration '{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?
		public Group getGroup() { return cGroup; }

		//ActiveClassDeclaration
		public RuleCall getActiveClassDeclarationParserRuleCall_0() { return cActiveClassDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedMember+=ActiveClassMember*
		public Assignment getOwnedMemberAssignment_2() { return cOwnedMemberAssignment_2; }

		//ActiveClassMember
		public RuleCall getOwnedMemberActiveClassMemberParserRuleCall_2_0() { return cOwnedMemberActiveClassMemberParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//('do' classifierBehavior=BehaviorClause)?
		public Group getGroup_4() { return cGroup_4; }

		//'do'
		public Keyword getDoKeyword_4_0() { return cDoKeyword_4_0; }

		//classifierBehavior=BehaviorClause
		public Assignment getClassifierBehaviorAssignment_4_1() { return cClassifierBehaviorAssignment_4_1; }

		//BehaviorClause
		public RuleCall getClassifierBehaviorBehaviorClauseParserRuleCall_4_1_0() { return cClassifierBehaviorBehaviorClauseParserRuleCall_4_1_0; }
	}

	public class ActiveClassDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveClassDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActiveClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberActiveClassMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cDoKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cClassifierBehaviorAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cClassifierBehaviorBehaviorClauseParserRuleCall_1_1_3_1_0 = (RuleCall)cClassifierBehaviorAssignment_1_1_3_1.eContents().get(0);
		
		//ActiveClassDefinitionOrStub ActiveClassDefinition:
		//	ActiveClassDeclaration (isStub?=';' |
		//	'{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?)
		@Override public ParserRule getRule() { return rule; }

		//ActiveClassDeclaration (isStub?=';' | '{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?)
		public Group getGroup() { return cGroup; }

		//ActiveClassDeclaration
		public RuleCall getActiveClassDeclarationParserRuleCall_0() { return cActiveClassDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=ActiveClassMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//ActiveClassMember
		public RuleCall getOwnedMemberActiveClassMemberParserRuleCall_1_1_1_0() { return cOwnedMemberActiveClassMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//('do' classifierBehavior=BehaviorClause)?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//'do'
		public Keyword getDoKeyword_1_1_3_0() { return cDoKeyword_1_1_3_0; }

		//classifierBehavior=BehaviorClause
		public Assignment getClassifierBehaviorAssignment_1_1_3_1() { return cClassifierBehaviorAssignment_1_1_3_1; }

		//BehaviorClause
		public RuleCall getClassifierBehaviorBehaviorClauseParserRuleCall_1_1_3_1_0() { return cClassifierBehaviorBehaviorClauseParserRuleCall_1_1_3_1_0; }
	}

	public class BehaviorClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BehaviorClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BehaviorClause ActivityDefinition:
		//	body=Block | name=Name
		@Override public ParserRule getRule() { return rule; }

		//body=Block | name=Name
		public Alternatives getAlternatives() { return cAlternatives; }

		//body=Block
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_0_0() { return cBodyBlockParserRuleCall_0_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}

	public class ActiveClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveClassMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityIndicatorParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionActiveClassMemberDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//ActiveClassMember Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	annotation+=StereotypeAnnotation*
		//	visibility=VisibilityIndicator?
		//	definition=ActiveClassMemberDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? annotation+=StereotypeAnnotation* visibility=VisibilityIndicator?
		//definition=ActiveClassMemberDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_1_0() { return cAnnotationStereotypeAnnotationParserRuleCall_1_0; }

		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorParserRuleCall_2_0() { return cVisibilityVisibilityIndicatorParserRuleCall_2_0; }

		//definition=ActiveClassMemberDefinition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//ActiveClassMemberDefinition
		public RuleCall getDefinitionActiveClassMemberDefinitionParserRuleCall_3_0() { return cDefinitionActiveClassMemberDefinitionParserRuleCall_3_0; }
	}

	public class ActiveClassMemberDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveClassMemberDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassMemberDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActiveFeatureDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActiveClassMemberDefinition MemberDefinition:
		//	ClassMemberDefinition | ActiveFeatureDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//ClassMemberDefinition | ActiveFeatureDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassMemberDefinition
		public RuleCall getClassMemberDefinitionParserRuleCall_0() { return cClassMemberDefinitionParserRuleCall_0; }

		//ActiveFeatureDefinitionOrStub
		public RuleCall getActiveFeatureDefinitionOrStubParserRuleCall_1() { return cActiveFeatureDefinitionOrStubParserRuleCall_1; }
	}

	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0 = (RuleCall)cOwnedMemberAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0 = (RuleCall)cOwnedMemberAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSpecializationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_4_0 = (RuleCall)cSpecializationAssignment_4.eContents().get(0);
		
		/// * DATA TYPES * / DataTypeDeclaration DataTypeDefinition:
		//	isAbstract?='abstract'? 'datatype' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//	ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? 'datatype' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//ownedMember+=ClassifierTemplateParameter)* '>')? specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_3() { return cGroup_3; }

		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_1() { return cOwnedMemberAssignment_3_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_2_1() { return cOwnedMemberAssignment_3_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_4() { return cSpecializationAssignment_4; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_4_0() { return cSpecializationSpecializationClauseParserRuleCall_4_0; }
	}

	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DataTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDataTypeDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_2_0 = (RuleCall)cOwnedMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeDefinition:
		//	DataTypeDeclaration
		//	'{' ownedMember+=StructuredMember* '}';
		@Override public ParserRule getRule() { return rule; }

		//DataTypeDeclaration '{' ownedMember+=StructuredMember* '}'
		public Group getGroup() { return cGroup; }

		//DataTypeDeclaration
		public RuleCall getDataTypeDeclarationParserRuleCall_0() { return cDataTypeDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_2() { return cOwnedMemberAssignment_2; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_2_0() { return cOwnedMemberStructuredMemberParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DataTypeDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DataTypeDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDataTypeDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//DataTypeDefinitionOrStub DataTypeDefinition:
		//	DataTypeDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		@Override public ParserRule getRule() { return rule; }

		//DataTypeDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Group getGroup() { return cGroup; }

		//DataTypeDeclaration
		public RuleCall getDataTypeDeclarationParserRuleCall_0() { return cDataTypeDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=StructuredMember* '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_1_1_1_0() { return cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class StructuredMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.StructuredMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cVisibilityPublicKeyword_2_0 = (Keyword)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionPropertyDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//StructuredMember Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	annotation+=StereotypeAnnotation*
		//	visibility='public'?
		//	definition=PropertyDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? annotation+=StereotypeAnnotation* visibility='public'?
		//definition=PropertyDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_1_0() { return cAnnotationStereotypeAnnotationParserRuleCall_1_0; }

		//visibility='public'?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//'public'
		public Keyword getVisibilityPublicKeyword_2_0() { return cVisibilityPublicKeyword_2_0; }

		//definition=PropertyDefinition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//PropertyDefinition
		public RuleCall getDefinitionPropertyDefinitionParserRuleCall_3_0() { return cDefinitionPropertyDefinitionParserRuleCall_3_0; }
	}

	public class AssociationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AssociationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0 = (RuleCall)cOwnedMemberAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0 = (RuleCall)cOwnedMemberAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSpecializationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_4_0 = (RuleCall)cSpecializationAssignment_4.eContents().get(0);
		
		/// * ASSOCIATIONS * / AssociationDeclaration AssociationDefinition:
		//	isAbstract?='abstract'? 'assoc' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//	ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? 'assoc' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//ownedMember+=ClassifierTemplateParameter)* '>')? specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_3() { return cGroup_3; }

		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_1() { return cOwnedMemberAssignment_3_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_2_1() { return cOwnedMemberAssignment_3_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_4() { return cSpecializationAssignment_4; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_4_0() { return cSpecializationSpecializationClauseParserRuleCall_4_0; }
	}

	public class AssociationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AssociationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssociationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_2_0 = (RuleCall)cOwnedMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssociationDefinition:
		//	AssociationDeclaration
		//	'{' ownedMember+=StructuredMember* '}';
		@Override public ParserRule getRule() { return rule; }

		//AssociationDeclaration '{' ownedMember+=StructuredMember* '}'
		public Group getGroup() { return cGroup; }

		//AssociationDeclaration
		public RuleCall getAssociationDeclarationParserRuleCall_0() { return cAssociationDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_2() { return cOwnedMemberAssignment_2; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_2_0() { return cOwnedMemberStructuredMemberParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AssociationDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AssociationDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssociationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//AssociationDefinitionOrStub AssociationDefinition:
		//	AssociationDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		@Override public ParserRule getRule() { return rule; }

		//AssociationDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Group getGroup() { return cGroup; }

		//AssociationDeclaration
		public RuleCall getAssociationDeclarationParserRuleCall_0() { return cAssociationDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=StructuredMember* '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_1_1_1_0() { return cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class EnumerationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EnumerationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_2_0 = (RuleCall)cSpecializationAssignment_2.eContents().get(0);
		
		/// * ENUMERATIONS * / EnumerationDeclaration EnumerationDefinition:
		//	'enum' name=Name specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//'enum' name=Name specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_2() { return cSpecializationAssignment_2; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_2_0() { return cSpecializationSpecializationClauseParserRuleCall_2_0; }
	}

	public class EnumerationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EnumerationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEnumerationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOwnedMemberAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedMemberEnumerationLiteralNameParserRuleCall_2_0_0 = (RuleCall)cOwnedMemberAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedMemberEnumerationLiteralNameParserRuleCall_2_1_1_0 = (RuleCall)cOwnedMemberAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumerationDefinition:
		//	EnumerationDeclaration
		//	'{' (ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//EnumerationDeclaration '{' (ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)? '}'
		public Group getGroup() { return cGroup; }

		//EnumerationDeclaration
		public RuleCall getEnumerationDeclarationParserRuleCall_0() { return cEnumerationDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)?
		public Group getGroup_2() { return cGroup_2; }

		//ownedMember+=EnumerationLiteralName
		public Assignment getOwnedMemberAssignment_2_0() { return cOwnedMemberAssignment_2_0; }

		//EnumerationLiteralName
		public RuleCall getOwnedMemberEnumerationLiteralNameParserRuleCall_2_0_0() { return cOwnedMemberEnumerationLiteralNameParserRuleCall_2_0_0; }

		//(',' ownedMember+=EnumerationLiteralName)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//ownedMember+=EnumerationLiteralName
		public Assignment getOwnedMemberAssignment_2_1_1() { return cOwnedMemberAssignment_2_1_1; }

		//EnumerationLiteralName
		public RuleCall getOwnedMemberEnumerationLiteralNameParserRuleCall_2_1_1_0() { return cOwnedMemberEnumerationLiteralNameParserRuleCall_2_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EnumerationDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EnumerationDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEnumerationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_0_0 = (RuleCall)cOwnedMemberAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//EnumerationDefinitionOrStub EnumerationDefinition:
		//	EnumerationDeclaration (isStub?=';' | '{' (ownedMember+=EnumerationLiteralName (','
		//	ownedMember+=EnumerationLiteralName)*)? '}')
		@Override public ParserRule getRule() { return rule; }

		//EnumerationDeclaration (isStub?=';' | '{' (ownedMember+=EnumerationLiteralName (','
		//ownedMember+=EnumerationLiteralName)*)? '}')
		public Group getGroup() { return cGroup; }

		//EnumerationDeclaration
		public RuleCall getEnumerationDeclarationParserRuleCall_0() { return cEnumerationDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' (ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)? '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' (ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)? '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//(ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//ownedMember+=EnumerationLiteralName
		public Assignment getOwnedMemberAssignment_1_1_1_0() { return cOwnedMemberAssignment_1_1_1_0; }

		//EnumerationLiteralName
		public RuleCall getOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_0_0() { return cOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_0_0; }

		//(',' ownedMember+=EnumerationLiteralName)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//ownedMember+=EnumerationLiteralName
		public Assignment getOwnedMemberAssignment_1_1_1_1_1() { return cOwnedMemberAssignment_1_1_1_1_1; }

		//EnumerationLiteralName
		public RuleCall getOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_1_1_0() { return cOwnedMemberEnumerationLiteralNameParserRuleCall_1_1_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class EnumerationLiteralNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EnumerationLiteralName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionEnumerationLiteralNameDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		
		//EnumerationLiteralName Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	// TODO: visibility = 'public'
		//	definition=EnumerationLiteralNameDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? // TODO: visibility = 'public'
		//definition=EnumerationLiteralNameDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//// TODO: visibility = 'public'
		//definition=EnumerationLiteralNameDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//EnumerationLiteralNameDefinition
		public RuleCall getDefinitionEnumerationLiteralNameDefinitionParserRuleCall_1_0() { return cDefinitionEnumerationLiteralNameDefinitionParserRuleCall_1_0; }
	}

	public class EnumerationLiteralNameDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EnumerationLiteralNameDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteralNameDefinition EnumerationLiteralName:
		//	name=Name
		@Override public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SignalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0 = (RuleCall)cOwnedMemberAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0 = (RuleCall)cOwnedMemberAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSpecializationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_4_0 = (RuleCall)cSpecializationAssignment_4.eContents().get(0);
		
		/// * SIGNALS * / SignalDeclaration SignalDefinition:
		//	isAbstract?='abstract'? 'signal' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//	ownedMember+=ClassifierTemplateParameter)* '>')?
		//	specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? 'signal' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
		//ownedMember+=ClassifierTemplateParameter)* '>')? specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_3() { return cGroup_3; }

		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_1() { return cOwnedMemberAssignment_3_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_3_2_1() { return cOwnedMemberAssignment_3_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_3_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_4() { return cSpecializationAssignment_4; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_4_0() { return cSpecializationSpecializationClauseParserRuleCall_4_0; }
	}

	public class SignalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SignalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_2_0 = (RuleCall)cOwnedMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SignalDefinition:
		//	SignalDeclaration
		//	'{' ownedMember+=StructuredMember* '}';
		@Override public ParserRule getRule() { return rule; }

		//SignalDeclaration '{' ownedMember+=StructuredMember* '}'
		public Group getGroup() { return cGroup; }

		//SignalDeclaration
		public RuleCall getSignalDeclarationParserRuleCall_0() { return cSignalDeclarationParserRuleCall_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_2() { return cOwnedMemberAssignment_2; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_2_0() { return cOwnedMemberStructuredMemberParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SignalDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SignalDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//SignalDefinitionOrStub SignalDefinition:
		//	SignalDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		@Override public ParserRule getRule() { return rule; }

		//SignalDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Group getGroup() { return cGroup; }

		//SignalDeclaration
		public RuleCall getSignalDeclarationParserRuleCall_0() { return cSignalDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=StructuredMember* '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_1_1_1_0() { return cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class ActivityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActivityDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_2_1_0 = (RuleCall)cOwnedMemberAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOwnedMemberClassifierTemplateParameterParserRuleCall_2_2_1_0 = (RuleCall)cOwnedMemberAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedMemberAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedMemberFormalParameterParserRuleCall_4_0_0 = (RuleCall)cOwnedMemberAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedMemberFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cOwnedMemberAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnedMemberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedMemberReturnParameterParserRuleCall_6_0 = (RuleCall)cOwnedMemberAssignment_6.eContents().get(0);
		
		/// * ACTIVITIES * / ActivityDeclaration ActivityDefinition:
		//	'activity' name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)*
		//	'>')?
		//	'(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')'
		//	ownedMember+=ReturnParameter?
		@Override public ParserRule getRule() { return rule; }

		//'activity' name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		//'(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')' ownedMember+=ReturnParameter?
		public Group getGroup() { return cGroup; }

		//'activity'
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
		public Group getGroup_2() { return cGroup_2; }

		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_2_1() { return cOwnedMemberAssignment_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_2_1_0; }

		//(',' ownedMember+=ClassifierTemplateParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//ownedMember+=ClassifierTemplateParameter
		public Assignment getOwnedMemberAssignment_2_2_1() { return cOwnedMemberAssignment_2_2_1; }

		//ClassifierTemplateParameter
		public RuleCall getOwnedMemberClassifierTemplateParameterParserRuleCall_2_2_1_0() { return cOwnedMemberClassifierTemplateParameterParserRuleCall_2_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//ownedMember+=FormalParameter
		public Assignment getOwnedMemberAssignment_4_0() { return cOwnedMemberAssignment_4_0; }

		//FormalParameter
		public RuleCall getOwnedMemberFormalParameterParserRuleCall_4_0_0() { return cOwnedMemberFormalParameterParserRuleCall_4_0_0; }

		//(',' ownedMember+=FormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedMember+=FormalParameter
		public Assignment getOwnedMemberAssignment_4_1_1() { return cOwnedMemberAssignment_4_1_1; }

		//FormalParameter
		public RuleCall getOwnedMemberFormalParameterParserRuleCall_4_1_1_0() { return cOwnedMemberFormalParameterParserRuleCall_4_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//ownedMember+=ReturnParameter?
		public Assignment getOwnedMemberAssignment_6() { return cOwnedMemberAssignment_6; }

		//ReturnParameter
		public RuleCall getOwnedMemberReturnParameterParserRuleCall_6_0() { return cOwnedMemberReturnParameterParserRuleCall_6_0; }
	}

	public class ActivityDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActivityDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActivityDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ActivityDefinition:
		//	ActivityDeclaration
		//	body=Block;
		@Override public ParserRule getRule() { return rule; }

		//ActivityDeclaration body=Block
		public Group getGroup() { return cGroup; }

		//ActivityDeclaration
		public RuleCall getActivityDeclarationParserRuleCall_0() { return cActivityDeclarationParserRuleCall_0; }

		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }
	}

	public class ActivityDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActivityDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActivityDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		
		//ActivityDefinitionOrStub ActivityDefinition:
		//	ActivityDeclaration (isStub?=';' | body=Block)
		@Override public ParserRule getRule() { return rule; }

		//ActivityDeclaration (isStub?=';' | body=Block)
		public Group getGroup() { return cGroup; }

		//ActivityDeclaration
		public RuleCall getActivityDeclarationParserRuleCall_0() { return cActivityDeclarationParserRuleCall_0; }

		//(isStub?=';' | body=Block)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//body=Block
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_1_0() { return cBodyBlockParserRuleCall_1_1_0; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationStereotypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionFormalParameterDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		
		//FormalParameter Member:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	annotation+=StereotypeAnnotation*
		//	definition=FormalParameterDefinition
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? annotation+=StereotypeAnnotation* definition=FormalParameterDefinition
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//annotation+=StereotypeAnnotation*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//StereotypeAnnotation
		public RuleCall getAnnotationStereotypeAnnotationParserRuleCall_1_0() { return cAnnotationStereotypeAnnotationParserRuleCall_1_0; }

		//definition=FormalParameterDefinition
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//FormalParameterDefinition
		public RuleCall getDefinitionFormalParameterDefinitionParserRuleCall_2_0() { return cDefinitionFormalParameterDefinitionParserRuleCall_2_0; }
	}

	public class FormalParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.FormalParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterDirectionParserRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypePartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePartTypePartParserRuleCall_3_0 = (RuleCall)cTypePartAssignment_3.eContents().get(0);
		
		//FormalParameterDefinition NonReturnParameter:
		//	direction=ParameterDirection name=Name ':'
		//	// CHANGE: Made TypedElementDefinition a composite part of FormalParameter, rather than the supertype
		//	typePart=TypePart
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
		//direction=ParameterDirection name=Name ':' // CHANGE: Made TypedElementDefinition a composite part of FormalParameter, rather than the supertype
		//typePart=TypePart
		public Group getGroup() { return cGroup; }

		//// CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
		//direction=ParameterDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//ParameterDirection
		public RuleCall getDirectionParameterDirectionParserRuleCall_0_0() { return cDirectionParameterDirectionParserRuleCall_0_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//// CHANGE: Made TypedElementDefinition a composite part of FormalParameter, rather than the supertype
		//typePart=TypePart
		public Assignment getTypePartAssignment_3() { return cTypePartAssignment_3; }

		//TypePart
		public RuleCall getTypePartTypePartParserRuleCall_3_0() { return cTypePartTypePartParserRuleCall_3_0; }
	}

	public class ReturnParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ReturnParameter");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionReturnParameterDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		//ReturnParameter Member:
		//	definition=ReturnParameterDefinition
		@Override public ParserRule getRule() { return rule; }

		//definition=ReturnParameterDefinition
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }

		//ReturnParameterDefinition
		public RuleCall getDefinitionReturnParameterDefinitionParserRuleCall_0() { return cDefinitionReturnParameterDefinitionParserRuleCall_0; }
	}

	public class ReturnParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ReturnParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypePartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePartTypePartParserRuleCall_1_0 = (RuleCall)cTypePartAssignment_1.eContents().get(0);
		
		//ReturnParameterDefinition ReturnParameter: // CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
		//	':' typePart=TypePart
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
		//':' typePart=TypePart
		public Group getGroup() { return cGroup; }

		//// CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//typePart=TypePart
		public Assignment getTypePartAssignment_1() { return cTypePartAssignment_1; }

		//TypePart
		public RuleCall getTypePartTypePartParserRuleCall_1_0() { return cTypePartTypePartParserRuleCall_1_0; }
	}

	public class ParameterDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ParameterDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInoutKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ParameterDirection:
		//	'in' | 'out' | 'inout';
		@Override public ParserRule getRule() { return rule; }

		//'in' | 'out' | 'inout'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//'out'
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }

		//'inout'
		public Keyword getInoutKeyword_2() { return cInoutKeyword_2; }
	}

	public class FeatureDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.FeatureDefinitionOrStub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * FEATURES * / FeatureDefinitionOrStub MemberDefinition:
		//	AttributeDefinition | OperationDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//AttributeDefinition | OperationDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_0() { return cAttributeDefinitionParserRuleCall_0; }

		//OperationDefinitionOrStub
		public RuleCall getOperationDefinitionOrStubParserRuleCall_1() { return cOperationDefinitionOrStubParserRuleCall_1; }
	}

	public class ActiveFeatureDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ActiveFeatureDefinitionOrStub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReceptionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalReceptionDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActiveFeatureDefinitionOrStub MemberDefinition:
		//	ReceptionDefinition | SignalReceptionDefinitionOrStub
		@Override public ParserRule getRule() { return rule; }

		//ReceptionDefinition | SignalReceptionDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReceptionDefinition
		public RuleCall getReceptionDefinitionParserRuleCall_0() { return cReceptionDefinitionParserRuleCall_0; }

		//SignalReceptionDefinitionOrStub
		public RuleCall getSignalReceptionDefinitionOrStubParserRuleCall_1() { return cSignalReceptionDefinitionOrStubParserRuleCall_1; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// * PROPERTIES * / PropertyDefinition:
		//	PropertyDeclaration ';';
		@Override public ParserRule getRule() { return rule; }

		//PropertyDeclaration ';'
		public Group getGroup() { return cGroup; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_0() { return cPropertyDeclarationParserRuleCall_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cInitializerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitializerAttributeInitializerParserRuleCall_1_0 = (RuleCall)cInitializerAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttributeDefinition PropertyDefinition:
		//	PropertyDeclaration initializer=AttributeInitializer? ';'
		@Override public ParserRule getRule() { return rule; }

		//PropertyDeclaration initializer=AttributeInitializer? ';'
		public Group getGroup() { return cGroup; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_0() { return cPropertyDeclarationParserRuleCall_0; }

		//initializer=AttributeInitializer?
		public Assignment getInitializerAssignment_1() { return cInitializerAssignment_1; }

		//AttributeInitializer
		public RuleCall getInitializerAttributeInitializerParserRuleCall_1_0() { return cInitializerAttributeInitializerParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AttributeInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AttributeInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInitializationExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AttributeInitializer Expression:
		//	'=' InitializationExpression
		@Override public ParserRule getRule() { return rule; }

		//'=' InitializationExpression
		public Group getGroup() { return cGroup; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//InitializationExpression
		public RuleCall getInitializationExpressionParserRuleCall_1() { return cInitializationExpressionParserRuleCall_1; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsCompositeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsCompositeComposeKeyword_2_0 = (Keyword)cIsCompositeAssignment_2.eContents().get(0);
		private final Assignment cTypePartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePartTypePartParserRuleCall_3_0 = (RuleCall)cTypePartAssignment_3.eContents().get(0);
		
		//PropertyDeclaration PropertyDefinition:
		//	name=Name ':' isComposite?='compose'?
		//	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
		//	typePart=TypePart
		@Override public ParserRule getRule() { return rule; }

		//name=Name ':' isComposite?='compose'? // CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
		//typePart=TypePart
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//isComposite?='compose'?
		public Assignment getIsCompositeAssignment_2() { return cIsCompositeAssignment_2; }

		//'compose'
		public Keyword getIsCompositeComposeKeyword_2_0() { return cIsCompositeComposeKeyword_2_0; }

		//// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
		//typePart=TypePart
		public Assignment getTypePartAssignment_3() { return cTypePartAssignment_3; }

		//TypePart
		public RuleCall getTypePartTypePartParserRuleCall_3_0() { return cTypePartTypePartParserRuleCall_3_0; }
	}

	public class TypePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TypePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsAnyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_0_0_0 = (Keyword)cIsAnyAssignment_0_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cTypeNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cIsMultiplicityAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cIsMultiplicityRightSquareBracketKeyword_1_0_1_0_0 = (Keyword)cIsMultiplicityAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cAlternatives_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_1_1_0 = (Group)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1_0_1_1_0_0 = (Assignment)cGroup_1_0_1_1_0.eContents().get(0);
		private final RuleCall cLowerBoundNATURAL_VALUETerminalRuleCall_1_0_1_1_0_0_0 = (RuleCall)cLowerBoundAssignment_1_0_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_0_1_1_0_1 = (Keyword)cGroup_1_0_1_1_0.eContents().get(1);
		private final Assignment cUpperBoundAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cUpperBoundUnlimitedNaturalLiteralParserRuleCall_1_0_1_1_1_0 = (RuleCall)cUpperBoundAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1_1_2 = (Keyword)cGroup_1_0_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_1_1_0_0_0 = (Keyword)cIsOrderedAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_0_1_0 = (Keyword)cIsNonuniqueAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cIsNonuniqueAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_1_0_0 = (Keyword)cIsNonuniqueAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Keyword cIsOrderedOrderedKeyword_1_1_1_1_0 = (Keyword)cIsOrderedAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cIsSequenceAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cIsSequenceSequenceKeyword_1_1_2_0 = (Keyword)cIsSequenceAssignment_1_1_2.eContents().get(0);
		
		//TypePart TypedElementDefinition:
		//	(isAny?='any' | typeName=QualifiedName) (('[' (isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')?
		//	upperBound=UnlimitedNaturalLiteral ']'))? (isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique'
		//	isOrdered?='ordered'? | isSequence?='sequence')?)?
		@Override public ParserRule getRule() { return rule; }

		//(isAny?='any' | typeName=QualifiedName) (('[' (isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')?
		//upperBound=UnlimitedNaturalLiteral ']'))? (isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique'
		//isOrdered?='ordered'? | isSequence?='sequence')?)?
		public Group getGroup() { return cGroup; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_0_0() { return cIsAnyAssignment_0_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_0_0_0() { return cIsAnyAnyKeyword_0_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_0_1() { return cTypeNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_0_1_0() { return cTypeNameQualifiedNameParserRuleCall_0_1_0; }

		//(('[' (isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')? upperBound=UnlimitedNaturalLiteral ']'))?
		//(isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique' isOrdered?='ordered'? |
		//isSequence?='sequence')?)?
		public Group getGroup_1() { return cGroup_1; }

		//('[' (isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')? upperBound=UnlimitedNaturalLiteral ']'))?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//(isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')? upperBound=UnlimitedNaturalLiteral ']')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//isMultiplicity?=']'
		public Assignment getIsMultiplicityAssignment_1_0_1_0() { return cIsMultiplicityAssignment_1_0_1_0; }

		//']'
		public Keyword getIsMultiplicityRightSquareBracketKeyword_1_0_1_0_0() { return cIsMultiplicityRightSquareBracketKeyword_1_0_1_0_0; }

		//(lowerBound=NATURAL_VALUE '..')? upperBound=UnlimitedNaturalLiteral ']'
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }

		//(lowerBound=NATURAL_VALUE '..')?
		public Group getGroup_1_0_1_1_0() { return cGroup_1_0_1_1_0; }

		//lowerBound=NATURAL_VALUE
		public Assignment getLowerBoundAssignment_1_0_1_1_0_0() { return cLowerBoundAssignment_1_0_1_1_0_0; }

		//NATURAL_VALUE
		public RuleCall getLowerBoundNATURAL_VALUETerminalRuleCall_1_0_1_1_0_0_0() { return cLowerBoundNATURAL_VALUETerminalRuleCall_1_0_1_1_0_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_1_0_1_1_0_1() { return cFullStopFullStopKeyword_1_0_1_1_0_1; }

		//upperBound=UnlimitedNaturalLiteral
		public Assignment getUpperBoundAssignment_1_0_1_1_1() { return cUpperBoundAssignment_1_0_1_1_1; }

		//UnlimitedNaturalLiteral
		public RuleCall getUpperBoundUnlimitedNaturalLiteralParserRuleCall_1_0_1_1_1_0() { return cUpperBoundUnlimitedNaturalLiteralParserRuleCall_1_0_1_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_0_1_1_2() { return cRightSquareBracketKeyword_1_0_1_1_2; }

		//(isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique' isOrdered?='ordered'? |
		//isSequence?='sequence')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//isOrdered?='ordered' isNonunique?='nonunique'?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//isOrdered?='ordered'
		public Assignment getIsOrderedAssignment_1_1_0_0() { return cIsOrderedAssignment_1_1_0_0; }

		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_0_0_0() { return cIsOrderedOrderedKeyword_1_1_0_0_0; }

		//isNonunique?='nonunique'?
		public Assignment getIsNonuniqueAssignment_1_1_0_1() { return cIsNonuniqueAssignment_1_1_0_1; }

		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_0_1_0() { return cIsNonuniqueNonuniqueKeyword_1_1_0_1_0; }

		//isNonunique?='nonunique' isOrdered?='ordered'?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//isNonunique?='nonunique'
		public Assignment getIsNonuniqueAssignment_1_1_1_0() { return cIsNonuniqueAssignment_1_1_1_0; }

		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_1_0_0() { return cIsNonuniqueNonuniqueKeyword_1_1_1_0_0; }

		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_1_1_1_1() { return cIsOrderedAssignment_1_1_1_1; }

		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_1_1_0() { return cIsOrderedOrderedKeyword_1_1_1_1_0; }

		//isSequence?='sequence'
		public Assignment getIsSequenceAssignment_1_1_2() { return cIsSequenceAssignment_1_1_2; }

		//'sequence'
		public Keyword getIsSequenceSequenceKeyword_1_1_2_0() { return cIsSequenceSequenceKeyword_1_1_2_0; }
	}

	public class UnlimitedNaturalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UnlimitedNaturalLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNATURAL_VALUETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// *
		//TypeName returns QualifiedName :
		//	'any' | QualifiedName
		//;
		// * / UnlimitedNaturalLiteral:
		//	NATURAL_VALUE | '*';
		@Override public ParserRule getRule() { return rule; }

		//NATURAL_VALUE | '*'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NATURAL_VALUE
		public RuleCall getNATURAL_VALUETerminalRuleCall_0() { return cNATURAL_VALUETerminalRuleCall_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class OperationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.OperationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOwnedMemberAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOwnedMemberFormalParameterParserRuleCall_3_0_0 = (RuleCall)cOwnedMemberAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOwnedMemberFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cOwnedMemberAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOwnedMemberAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedMemberReturnParameterParserRuleCall_5_0 = (RuleCall)cOwnedMemberAssignment_5.eContents().get(0);
		private final Assignment cRedefinitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRedefinitionRedefinitionClauseParserRuleCall_6_0 = (RuleCall)cRedefinitionAssignment_6.eContents().get(0);
		
		/// * OPERATIONS * / OperationDeclaration OperationDefinition:
		//	isAbstract?='abstract'? name=Name
		//	'(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')'
		//	ownedMember+=ReturnParameter?
		//	redefinition=RedefinitionClause?
		@Override public ParserRule getRule() { return rule; }

		//isAbstract?='abstract'? name=Name '(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')'
		//ownedMember+=ReturnParameter? redefinition=RedefinitionClause?
		public Group getGroup() { return cGroup; }

		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }

		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//ownedMember+=FormalParameter
		public Assignment getOwnedMemberAssignment_3_0() { return cOwnedMemberAssignment_3_0; }

		//FormalParameter
		public RuleCall getOwnedMemberFormalParameterParserRuleCall_3_0_0() { return cOwnedMemberFormalParameterParserRuleCall_3_0_0; }

		//(',' ownedMember+=FormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//ownedMember+=FormalParameter
		public Assignment getOwnedMemberAssignment_3_1_1() { return cOwnedMemberAssignment_3_1_1; }

		//FormalParameter
		public RuleCall getOwnedMemberFormalParameterParserRuleCall_3_1_1_0() { return cOwnedMemberFormalParameterParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//ownedMember+=ReturnParameter?
		public Assignment getOwnedMemberAssignment_5() { return cOwnedMemberAssignment_5; }

		//ReturnParameter
		public RuleCall getOwnedMemberReturnParameterParserRuleCall_5_0() { return cOwnedMemberReturnParameterParserRuleCall_5_0; }

		//redefinition=RedefinitionClause?
		public Assignment getRedefinitionAssignment_6() { return cRedefinitionAssignment_6; }

		//RedefinitionClause
		public RuleCall getRedefinitionRedefinitionClauseParserRuleCall_6_0() { return cRedefinitionRedefinitionClauseParserRuleCall_6_0; }
	}

	public class OperationDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.OperationDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOperationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		
		//OperationDefinitionOrStub OperationDefinition:
		//	OperationDeclaration (isStub?=';' | body=Block)
		@Override public ParserRule getRule() { return rule; }

		//OperationDeclaration (isStub?=';' | body=Block)
		public Group getGroup() { return cGroup; }

		//OperationDeclaration
		public RuleCall getOperationDeclarationParserRuleCall_0() { return cOperationDeclarationParserRuleCall_0; }

		//(isStub?=';' | body=Block)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//body=Block
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_1_0() { return cBodyBlockParserRuleCall_1_1_0; }
	}

	public class RedefinitionClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.RedefinitionClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedefinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RedefinitionClause QualifiedNameList:
		//	'redefines' QualifiedNameList
		@Override public ParserRule getRule() { return rule; }

		//'redefines' QualifiedNameList
		public Group getGroup() { return cGroup; }

		//'redefines'
		public Keyword getRedefinesKeyword_0() { return cRedefinesKeyword_0; }

		//QualifiedNameList
		public RuleCall getQualifiedNameListParserRuleCall_1() { return cQualifiedNameListParserRuleCall_1; }
	}

	public class ReceptionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ReceptionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cSignalNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// * RECEPTIONS * / ReceptionDefinition:
		//	'receive' signalName=QualifiedName ';'
		//	// TODO: name = signal.nameBinding->last().name
		//;
		@Override public ParserRule getRule() { return rule; }

		//'receive' signalName=QualifiedName ';'
		public Group getGroup() { return cGroup; }

		//'receive'
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }

		//signalName=QualifiedName
		public Assignment getSignalNameAssignment_1() { return cSignalNameAssignment_1; }

		//QualifiedName
		public RuleCall getSignalNameQualifiedNameParserRuleCall_1_0() { return cSignalNameQualifiedNameParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SignalReceptionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SignalReceptionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSpecializationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecializationSpecializationClauseParserRuleCall_3_0 = (RuleCall)cSpecializationAssignment_3.eContents().get(0);
		
		//SignalReceptionDeclaration SignalReceptionDefinition:
		//	'receive' 'signal' name=Name specialization=SpecializationClause?
		@Override public ParserRule getRule() { return rule; }

		//'receive' 'signal' name=Name specialization=SpecializationClause?
		public Group getGroup() { return cGroup; }

		//'receive'
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }

		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//specialization=SpecializationClause?
		public Assignment getSpecializationAssignment_3() { return cSpecializationAssignment_3; }

		//SpecializationClause
		public RuleCall getSpecializationSpecializationClauseParserRuleCall_3_0() { return cSpecializationSpecializationClauseParserRuleCall_3_0; }
	}

	public class SignalReceptionDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SignalReceptionDefinitionOrStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalReceptionDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsStubAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsStubSemicolonKeyword_1_0_0 = (Keyword)cIsStubAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//SignalReceptionDefinitionOrStub SignalReceptionDefinition:
		//	SignalReceptionDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		@Override public ParserRule getRule() { return rule; }

		//SignalReceptionDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Group getGroup() { return cGroup; }

		//SignalReceptionDeclaration
		public RuleCall getSignalReceptionDeclarationParserRuleCall_0() { return cSignalReceptionDeclarationParserRuleCall_0; }

		//(isStub?=';' | '{' ownedMember+=StructuredMember* '}')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isStub?=';'
		public Assignment getIsStubAssignment_1_0() { return cIsStubAssignment_1_0; }

		//';'
		public Keyword getIsStubSemicolonKeyword_1_0_0() { return cIsStubSemicolonKeyword_1_0_0; }

		//'{' ownedMember+=StructuredMember* '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//ownedMember+=StructuredMember*
		public Assignment getOwnedMemberAssignment_1_1_1() { return cOwnedMemberAssignment_1_1_1; }

		//StructuredMember
		public RuleCall getOwnedMemberStructuredMemberParserRuleCall_1_1_1_0() { return cOwnedMemberStructuredMemberParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ***************
		// * NAMES        *
		// *************** / Name:
		//	ID | UNRESTRICTED_NAME;
		@Override public ParserRule getRule() { return rule; }

		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_0_1_0 = (RuleCall)cNameBindingAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_1_0 = (RuleCall)cNameBindingAssignment_1_1_1.eContents().get(0);
		
		//QualifiedName:
		//	UnqualifiedName (('::' nameBinding+=NameBinding)+ | ('.' nameBinding+=NameBinding)+)?;
		@Override public ParserRule getRule() { return rule; }

		//UnqualifiedName (('::' nameBinding+=NameBinding)+ | ('.' nameBinding+=NameBinding)+)?
		public Group getGroup() { return cGroup; }

		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }

		//(('::' nameBinding+=NameBinding)+ | ('.' nameBinding+=NameBinding)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//('::' nameBinding+=NameBinding)+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'::'
		public Keyword getColonColonKeyword_1_0_0() { return cColonColonKeyword_1_0_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_0_1() { return cNameBindingAssignment_1_0_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_0_1_0() { return cNameBindingNameBindingParserRuleCall_1_0_1_0; }

		//('.' nameBinding+=NameBinding)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1_1() { return cNameBindingAssignment_1_1_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_1_0; }
	}

	public class PotentiallyAmbiguousQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PotentiallyAmbiguousQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_0_1_0 = (RuleCall)cNameBindingAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIsAmbiguousAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIsAmbiguousFullStopKeyword_1_1_0_0 = (Keyword)cIsAmbiguousAssignment_1_1_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_1_0 = (RuleCall)cNameBindingAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_2_1_0 = (RuleCall)cNameBindingAssignment_1_1_2_1.eContents().get(0);
		
		//PotentiallyAmbiguousQualifiedName QualifiedName:
		//	UnqualifiedName (('::' nameBinding+=NameBinding)+ | isAmbiguous?='.' nameBinding+=NameBinding ('.'
		//	nameBinding+=NameBinding)*)?
		@Override public ParserRule getRule() { return rule; }

		//UnqualifiedName (('::' nameBinding+=NameBinding)+ | isAmbiguous?='.' nameBinding+=NameBinding ('.'
		//nameBinding+=NameBinding)*)?
		public Group getGroup() { return cGroup; }

		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }

		//(('::' nameBinding+=NameBinding)+ | isAmbiguous?='.' nameBinding+=NameBinding ('.' nameBinding+=NameBinding)*)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//('::' nameBinding+=NameBinding)+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'::'
		public Keyword getColonColonKeyword_1_0_0() { return cColonColonKeyword_1_0_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_0_1() { return cNameBindingAssignment_1_0_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_0_1_0() { return cNameBindingNameBindingParserRuleCall_1_0_1_0; }

		//isAmbiguous?='.' nameBinding+=NameBinding ('.' nameBinding+=NameBinding)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//isAmbiguous?='.'
		public Assignment getIsAmbiguousAssignment_1_1_0() { return cIsAmbiguousAssignment_1_1_0; }

		//'.'
		public Keyword getIsAmbiguousFullStopKeyword_1_1_0_0() { return cIsAmbiguousFullStopKeyword_1_1_0_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1_1() { return cNameBindingAssignment_1_1_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_1_0; }

		//('.' nameBinding+=NameBinding)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//'.'
		public Keyword getFullStopKeyword_1_1_2_0() { return cFullStopKeyword_1_1_2_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1_2_1() { return cNameBindingAssignment_1_1_2_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_2_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_2_1_0; }
	}

	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		
		//ColonQualifiedName QualifiedName:
		//	UnqualifiedName ('::' nameBinding+=NameBinding)+
		@Override public ParserRule getRule() { return rule; }

		//UnqualifiedName ('::' nameBinding+=NameBinding)+
		public Group getGroup() { return cGroup; }

		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }

		//('::' nameBinding+=NameBinding)+
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
	}

	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		
		//DotQualifiedName QualifiedName:
		//	UnqualifiedName ('.' nameBinding+=NameBinding)+
		@Override public ParserRule getRule() { return rule; }

		//UnqualifiedName ('.' nameBinding+=NameBinding)+
		public Group getGroup() { return cGroup; }

		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }

		//('.' nameBinding+=NameBinding)+
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
	}

	public class UnqualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UnqualifiedName");
		private final Assignment cNameBindingAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_0 = (RuleCall)cNameBindingAssignment.eContents().get(0);
		
		//UnqualifiedName QualifiedName:
		//	nameBinding+=NameBinding
		@Override public ParserRule getRule() { return rule; }

		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment() { return cNameBindingAssignment; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_0() { return cNameBindingNameBindingParserRuleCall_0; }
	}

	public class NameBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NameBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBindingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingTemplateBindingParserRuleCall_1_0 = (RuleCall)cBindingAssignment_1.eContents().get(0);
		
		//NameBinding:
		//	name=Name binding=TemplateBinding?;
		@Override public ParserRule getRule() { return rule; }

		//name=Name binding=TemplateBinding?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//binding=TemplateBinding?
		public Assignment getBindingAssignment_1() { return cBindingAssignment_1; }

		//TemplateBinding
		public RuleCall getBindingTemplateBindingParserRuleCall_1_0() { return cBindingTemplateBindingParserRuleCall_1_0; }
	}

	public class TemplateBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TemplateBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNamedTemplateBindingParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPositionalTemplateBindingParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		//QualifiedNameWithoutBinding :
		//	// unqualified = UnqualifiedName (nameCompletion = (ColonQualifiedNameCompletion | DotQualifiedNameCompletion))?
		//	unqualified = Name (nameCompletion = (ColonQualifiedNameCompletionWithoutBinding))?
		//;
		// * / / *
		//ColonQualifiedNameCompletionWithoutBinding : 
		//	( '::' names+=Name)+
		//;
		// * / / * Unbounded lookahead required here * / TemplateBinding:
		//	'<' (NamedTemplateBinding | PositionalTemplateBinding) '>';
		@Override public ParserRule getRule() { return rule; }

		//'<' (NamedTemplateBinding | PositionalTemplateBinding) '>'
		public Group getGroup() { return cGroup; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//(NamedTemplateBinding | PositionalTemplateBinding)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NamedTemplateBinding
		public RuleCall getNamedTemplateBindingParserRuleCall_1_0() { return cNamedTemplateBindingParserRuleCall_1_0; }

		//PositionalTemplateBinding
		public RuleCall getPositionalTemplateBindingParserRuleCall_1_1() { return cPositionalTemplateBindingParserRuleCall_1_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class PositionalTemplateBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PositionalTemplateBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cArgumentNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cArgumentNameAssignment_1_1.eContents().get(0);
		
		//PositionalTemplateBinding:
		//	argumentName+=QualifiedName (',' argumentName+=QualifiedName)*;
		@Override public ParserRule getRule() { return rule; }

		//argumentName+=QualifiedName (',' argumentName+=QualifiedName)*
		public Group getGroup() { return cGroup; }

		//argumentName+=QualifiedName
		public Assignment getArgumentNameAssignment_0() { return cArgumentNameAssignment_0; }

		//QualifiedName
		public RuleCall getArgumentNameQualifiedNameParserRuleCall_0_0() { return cArgumentNameQualifiedNameParserRuleCall_0_0; }

		//(',' argumentName+=QualifiedName)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//argumentName+=QualifiedName
		public Assignment getArgumentNameAssignment_1_1() { return cArgumentNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getArgumentNameQualifiedNameParserRuleCall_1_1_0() { return cArgumentNameQualifiedNameParserRuleCall_1_1_0; }
	}

	public class NamedTemplateBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NamedTemplateBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubstitutionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubstitutionTemplateParameterSubstitutionParserRuleCall_0_0 = (RuleCall)cSubstitutionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubstitutionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubstitutionTemplateParameterSubstitutionParserRuleCall_1_1_0 = (RuleCall)cSubstitutionAssignment_1_1.eContents().get(0);
		
		//NamedTemplateBinding:
		//	substitution+=TemplateParameterSubstitution (',' substitution+=TemplateParameterSubstitution)*;
		@Override public ParserRule getRule() { return rule; }

		//substitution+=TemplateParameterSubstitution (',' substitution+=TemplateParameterSubstitution)*
		public Group getGroup() { return cGroup; }

		//substitution+=TemplateParameterSubstitution
		public Assignment getSubstitutionAssignment_0() { return cSubstitutionAssignment_0; }

		//TemplateParameterSubstitution
		public RuleCall getSubstitutionTemplateParameterSubstitutionParserRuleCall_0_0() { return cSubstitutionTemplateParameterSubstitutionParserRuleCall_0_0; }

		//(',' substitution+=TemplateParameterSubstitution)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//substitution+=TemplateParameterSubstitution
		public Assignment getSubstitutionAssignment_1_1() { return cSubstitutionAssignment_1_1; }

		//TemplateParameterSubstitution
		public RuleCall getSubstitutionTemplateParameterSubstitutionParserRuleCall_1_1_0() { return cSubstitutionTemplateParameterSubstitutionParserRuleCall_1_1_0; }
	}

	public class TemplateParameterSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.TemplateParameterSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterNameNameParserRuleCall_0_0 = (RuleCall)cParameterNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cArgumentNameAssignment_2.eContents().get(0);
		
		//TemplateParameterSubstitution:
		//	parameterName=Name "=>" argumentName=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//parameterName=Name "=>" argumentName=QualifiedName
		public Group getGroup() { return cGroup; }

		//parameterName=Name
		public Assignment getParameterNameAssignment_0() { return cParameterNameAssignment_0; }

		//Name
		public RuleCall getParameterNameNameParserRuleCall_0_0() { return cParameterNameNameParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//argumentName=QualifiedName
		public Assignment getArgumentNameAssignment_2() { return cArgumentNameAssignment_2; }

		//QualifiedName
		public RuleCall getArgumentNameQualifiedNameParserRuleCall_2_0() { return cArgumentNameQualifiedNameParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ***************
		// * EXPRESSIONS *
		// *************** / Expression:
		//	AssignmentExpression | ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }

		//AssignmentExpression | ConditionalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_1() { return cConditionalExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cFeatureReferenceExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameBindingAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_0_2_0 = (RuleCall)cNameBindingAssignment_1_0_2.eContents().get(0);
		private final Action cFeatureInvocationExpressionTargetAction_1_0_3 = (Action)cGroup_1_0.eContents().get(3);
		private final Assignment cTupleAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cTupleTupleParserRuleCall_1_0_4_0 = (RuleCall)cTupleAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cFeatureReferenceExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNameBindingAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_2_0 = (RuleCall)cNameBindingAssignment_1_1_2.eContents().get(0);
		private final Action cPropertyAccessExpressionFeatureReferenceAction_1_1_3 = (Action)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExtentOrExpressionNonNameExpressionAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Alternatives cAlternatives_1_2_2 = (Alternatives)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_2_0 = (Group)cAlternatives_1_2_2.eContents().get(0);
		private final Action cSequenceOperationExpressionPrimaryAction_1_2_2_0_0 = (Action)cGroup_1_2_2_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_2_2_0_1 = (Assignment)cGroup_1_2_2_0.eContents().get(1);
		private final RuleCall cOperationQualifiedNameParserRuleCall_1_2_2_0_1_0 = (RuleCall)cOperationAssignment_1_2_2_0_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_2_2_0_2 = (Assignment)cGroup_1_2_2_0.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_1_2_2_0_2_0 = (RuleCall)cTupleAssignment_1_2_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_2_1 = (Group)cAlternatives_1_2_2.eContents().get(1);
		private final Action cSequenceReductionExpressionPrimaryAction_1_2_2_1_0 = (Action)cGroup_1_2_2_1.eContents().get(0);
		private final Keyword cReduceKeyword_1_2_2_1_1 = (Keyword)cGroup_1_2_2_1.eContents().get(1);
		private final Assignment cIsOrderedAssignment_1_2_2_1_2 = (Assignment)cGroup_1_2_2_1.eContents().get(2);
		private final Keyword cIsOrderedOrderedKeyword_1_2_2_1_2_0 = (Keyword)cIsOrderedAssignment_1_2_2_1_2.eContents().get(0);
		private final Assignment cBehaviorNameAssignment_1_2_2_1_3 = (Assignment)cGroup_1_2_2_1.eContents().get(3);
		private final RuleCall cBehaviorNameQualifiedNameParserRuleCall_1_2_2_1_3_0 = (RuleCall)cBehaviorNameAssignment_1_2_2_1_3.eContents().get(0);
		private final Group cGroup_1_2_2_2 = (Group)cAlternatives_1_2_2.eContents().get(2);
		private final Action cSequenceExpansionExpressionPrimaryAction_1_2_2_2_0 = (Action)cGroup_1_2_2_2.eContents().get(0);
		private final Assignment cOperationAssignment_1_2_2_2_1 = (Assignment)cGroup_1_2_2_2.eContents().get(1);
		private final RuleCall cOperationIDTerminalRuleCall_1_2_2_2_1_0 = (RuleCall)cOperationAssignment_1_2_2_2_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_2_2_2_2 = (Assignment)cGroup_1_2_2_2.eContents().get(2);
		private final RuleCall cVariableNameParserRuleCall_1_2_2_2_2_0 = (RuleCall)cVariableAssignment_1_2_2_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_2_2_3 = (Keyword)cGroup_1_2_2_2.eContents().get(3);
		private final Assignment cArgumentAssignment_1_2_2_2_4 = (Assignment)cGroup_1_2_2_2.eContents().get(4);
		private final RuleCall cArgumentExpressionParserRuleCall_1_2_2_2_4_0 = (RuleCall)cArgumentAssignment_1_2_2_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2_2_5 = (Keyword)cGroup_1_2_2_2.eContents().get(5);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cSequenceAccessExpressionPrimaryAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cIndexAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_3_1_0 = (RuleCall)cIndexAssignment_1_3_1.eContents().get(0);
		
		/// * PRIMARY EXPRESSIONS * / PrimaryExpression Expression:
		//	BaseExpression ({FeatureReference.expression=current} '.' nameBinding=NameBinding
		//	{FeatureInvocationExpression.target=current} tuple=Tuple | {FeatureReference.expression=current} '.'
		//	nameBinding=NameBinding {PropertyAccessExpression.featureReference=current} |
		//	{ExtentOrExpression.nonNameExpression=current} '->' ({SequenceOperationExpression.primary=current}
		//	operation=QualifiedName tuple=Tuple
		//	| {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
		//	// CHANGE: Made SequenceExpansionExpression concrete.
		//	| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')') |
		//	{SequenceAccessExpression.primary=current} index=Index)*
		@Override public ParserRule getRule() { return rule; }

		//BaseExpression ({FeatureReference.expression=current} '.' nameBinding=NameBinding
		//{FeatureInvocationExpression.target=current} tuple=Tuple | {FeatureReference.expression=current} '.'
		//nameBinding=NameBinding {PropertyAccessExpression.featureReference=current} |
		//{ExtentOrExpression.nonNameExpression=current} '->' ({SequenceOperationExpression.primary=current}
		//operation=QualifiedName tuple=Tuple | {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'?
		//behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')') |
		//{SequenceAccessExpression.primary=current} index=Index)*
		public Group getGroup() { return cGroup; }

		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }

		//({FeatureReference.expression=current} '.' nameBinding=NameBinding {FeatureInvocationExpression.target=current}
		//tuple=Tuple | {FeatureReference.expression=current} '.' nameBinding=NameBinding
		//{PropertyAccessExpression.featureReference=current} | {ExtentOrExpression.nonNameExpression=current} '->'
		//({SequenceOperationExpression.primary=current} operation=QualifiedName tuple=Tuple |
		//{SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')') |
		//{SequenceAccessExpression.primary=current} index=Index)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{FeatureReference.expression=current} '.' nameBinding=NameBinding {FeatureInvocationExpression.target=current}
		//tuple=Tuple
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{FeatureReference.expression=current}
		public Action getFeatureReferenceExpressionAction_1_0_0() { return cFeatureReferenceExpressionAction_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//nameBinding=NameBinding
		public Assignment getNameBindingAssignment_1_0_2() { return cNameBindingAssignment_1_0_2; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_0_2_0() { return cNameBindingNameBindingParserRuleCall_1_0_2_0; }

		//{FeatureInvocationExpression.target=current}
		public Action getFeatureInvocationExpressionTargetAction_1_0_3() { return cFeatureInvocationExpressionTargetAction_1_0_3; }

		//tuple=Tuple
		public Assignment getTupleAssignment_1_0_4() { return cTupleAssignment_1_0_4; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_0_4_0() { return cTupleTupleParserRuleCall_1_0_4_0; }

		//{FeatureReference.expression=current} '.' nameBinding=NameBinding {PropertyAccessExpression.featureReference=current}
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{FeatureReference.expression=current}
		public Action getFeatureReferenceExpressionAction_1_1_0() { return cFeatureReferenceExpressionAction_1_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//nameBinding=NameBinding
		public Assignment getNameBindingAssignment_1_1_2() { return cNameBindingAssignment_1_1_2; }

		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_2_0() { return cNameBindingNameBindingParserRuleCall_1_1_2_0; }

		//{PropertyAccessExpression.featureReference=current}
		public Action getPropertyAccessExpressionFeatureReferenceAction_1_1_3() { return cPropertyAccessExpressionFeatureReferenceAction_1_1_3; }

		//{ExtentOrExpression.nonNameExpression=current} '->' ({SequenceOperationExpression.primary=current}
		//operation=QualifiedName tuple=Tuple | {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'?
		//behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{ExtentOrExpression.nonNameExpression=current}
		public Action getExtentOrExpressionNonNameExpressionAction_1_2_0() { return cExtentOrExpressionNonNameExpressionAction_1_2_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2_1() { return cHyphenMinusGreaterThanSignKeyword_1_2_1; }

		//({SequenceOperationExpression.primary=current} operation=QualifiedName tuple=Tuple |
		//{SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
		public Alternatives getAlternatives_1_2_2() { return cAlternatives_1_2_2; }

		//{SequenceOperationExpression.primary=current} operation=QualifiedName tuple=Tuple
		public Group getGroup_1_2_2_0() { return cGroup_1_2_2_0; }

		//{SequenceOperationExpression.primary=current}
		public Action getSequenceOperationExpressionPrimaryAction_1_2_2_0_0() { return cSequenceOperationExpressionPrimaryAction_1_2_2_0_0; }

		//operation=QualifiedName
		public Assignment getOperationAssignment_1_2_2_0_1() { return cOperationAssignment_1_2_2_0_1; }

		//QualifiedName
		public RuleCall getOperationQualifiedNameParserRuleCall_1_2_2_0_1_0() { return cOperationQualifiedNameParserRuleCall_1_2_2_0_1_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_1_2_2_0_2() { return cTupleAssignment_1_2_2_0_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_2_2_0_2_0() { return cTupleTupleParserRuleCall_1_2_2_0_2_0; }

		//{SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
		public Group getGroup_1_2_2_1() { return cGroup_1_2_2_1; }

		//{SequenceReductionExpression.primary=current}
		public Action getSequenceReductionExpressionPrimaryAction_1_2_2_1_0() { return cSequenceReductionExpressionPrimaryAction_1_2_2_1_0; }

		//'reduce'
		public Keyword getReduceKeyword_1_2_2_1_1() { return cReduceKeyword_1_2_2_1_1; }

		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_1_2_2_1_2() { return cIsOrderedAssignment_1_2_2_1_2; }

		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_2_2_1_2_0() { return cIsOrderedOrderedKeyword_1_2_2_1_2_0; }

		//behaviorName=QualifiedName
		public Assignment getBehaviorNameAssignment_1_2_2_1_3() { return cBehaviorNameAssignment_1_2_2_1_3; }

		//QualifiedName
		public RuleCall getBehaviorNameQualifiedNameParserRuleCall_1_2_2_1_3_0() { return cBehaviorNameQualifiedNameParserRuleCall_1_2_2_1_3_0; }

		//{SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')'
		public Group getGroup_1_2_2_2() { return cGroup_1_2_2_2; }

		//{SequenceExpansionExpression.primary=current}
		public Action getSequenceExpansionExpressionPrimaryAction_1_2_2_2_0() { return cSequenceExpansionExpressionPrimaryAction_1_2_2_2_0; }

		//operation=ID
		public Assignment getOperationAssignment_1_2_2_2_1() { return cOperationAssignment_1_2_2_2_1; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_1_2_2_2_1_0() { return cOperationIDTerminalRuleCall_1_2_2_2_1_0; }

		//variable=Name
		public Assignment getVariableAssignment_1_2_2_2_2() { return cVariableAssignment_1_2_2_2_2; }

		//Name
		public RuleCall getVariableNameParserRuleCall_1_2_2_2_2_0() { return cVariableNameParserRuleCall_1_2_2_2_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2_2_2_3() { return cLeftParenthesisKeyword_1_2_2_2_3; }

		//argument=Expression
		public Assignment getArgumentAssignment_1_2_2_2_4() { return cArgumentAssignment_1_2_2_2_4; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_1_2_2_2_4_0() { return cArgumentExpressionParserRuleCall_1_2_2_2_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2_2_2_5() { return cRightParenthesisKeyword_1_2_2_2_5; }

		//{SequenceAccessExpression.primary=current} index=Index
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{SequenceAccessExpression.primary=current}
		public Action getSequenceAccessExpressionPrimaryAction_1_3_0() { return cSequenceAccessExpressionPrimaryAction_1_3_0; }

		//index=Index
		public Assignment getIndexAssignment_1_3_1() { return cIndexAssignment_1_3_1; }

		//Index
		public RuleCall getIndexIndexParserRuleCall_1_3_1_0() { return cIndexIndexParserRuleCall_1_3_1_0; }
	}

	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSuperInvocationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInstanceCreationOrSequenceConstructionExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassExtentExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLinkOperationExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSequenceConstructionExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSequenceOperationOrReductionOrExpansionExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBehaviorInvocationExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNameExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cParenthesizedExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		////NonNamePrimaryExpression returns Expression :
		////  NonNameBaseExpression |
		////  BaseExpression
		////  // CHANGE: Made FeatureReference and ExtentOrExpression subtypes of Expression.
		////  ( {FeatureReference.expression = current} '.' nameBinding = NameBinding {FeatureInvocationExpression.target = current} tuple = Tuple |
		////    {FeatureReference.expression = current} '.' nameBinding = NameBinding {PropertyAccessExpression.featureReference = current} | 
		////    {ExtentOrExpression.nonNameExpression = current} '->' 
		////      ( {SequenceOperationExpression.primary = current} operation = QualifiedName tuple = Tuple
		////      | {SequenceReductionExpression.primary = current} 'reduce' ( isOrdered ?= 'ordered' )? behaviorName = QualifiedName 
		////      // CHANGE: Made SequenceExpansionExpression concrete.
		////      | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
		////      ) | 
		////    {SequenceAccessExpression.primary = current} index = Index
		////  )+
		////;
		//BaseExpression Expression:
		//	LiteralExpression | ThisExpression | SuperInvocationExpression | InstanceCreationOrSequenceConstructionExpression |
		//	ClassExtentExpression | LinkOperationExpression | SequenceConstructionExpression |
		//	SequenceOperationOrReductionOrExpansionExpression | BehaviorInvocationExpression | NameExpression |
		//	ParenthesizedExpression
		@Override public ParserRule getRule() { return rule; }

		//LiteralExpression | ThisExpression | SuperInvocationExpression | InstanceCreationOrSequenceConstructionExpression |
		//ClassExtentExpression | LinkOperationExpression | SequenceConstructionExpression |
		//SequenceOperationOrReductionOrExpansionExpression | BehaviorInvocationExpression | NameExpression |
		//ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }

		//ThisExpression
		public RuleCall getThisExpressionParserRuleCall_1() { return cThisExpressionParserRuleCall_1; }

		//SuperInvocationExpression
		public RuleCall getSuperInvocationExpressionParserRuleCall_2() { return cSuperInvocationExpressionParserRuleCall_2; }

		//InstanceCreationOrSequenceConstructionExpression
		public RuleCall getInstanceCreationOrSequenceConstructionExpressionParserRuleCall_3() { return cInstanceCreationOrSequenceConstructionExpressionParserRuleCall_3; }

		//ClassExtentExpression
		public RuleCall getClassExtentExpressionParserRuleCall_4() { return cClassExtentExpressionParserRuleCall_4; }

		//LinkOperationExpression
		public RuleCall getLinkOperationExpressionParserRuleCall_5() { return cLinkOperationExpressionParserRuleCall_5; }

		//SequenceConstructionExpression
		public RuleCall getSequenceConstructionExpressionParserRuleCall_6() { return cSequenceConstructionExpressionParserRuleCall_6; }

		//SequenceOperationOrReductionOrExpansionExpression
		public RuleCall getSequenceOperationOrReductionOrExpansionExpressionParserRuleCall_7() { return cSequenceOperationOrReductionOrExpansionExpressionParserRuleCall_7; }

		//BehaviorInvocationExpression
		public RuleCall getBehaviorInvocationExpressionParserRuleCall_8() { return cBehaviorInvocationExpressionParserRuleCall_8; }

		//NameExpression
		public RuleCall getNameExpressionParserRuleCall_9() { return cNameExpressionParserRuleCall_9; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_10() { return cParenthesizedExpressionParserRuleCall_10; }
	}

	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnboundedLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// * LITERAL EXPRESSIONS * / LiteralExpression:
		//	BooleanLiteralExpression | NaturalLiteralExpression | UnboundedLiteralExpression | StringLiteralExpression;
		@Override public ParserRule getRule() { return rule; }

		//BooleanLiteralExpression | NaturalLiteralExpression | UnboundedLiteralExpression | StringLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_0() { return cBooleanLiteralExpressionParserRuleCall_0; }

		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_1() { return cNaturalLiteralExpressionParserRuleCall_1; }

		//UnboundedLiteralExpression
		public RuleCall getUnboundedLiteralExpressionParserRuleCall_2() { return cUnboundedLiteralExpressionParserRuleCall_2; }

		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_3() { return cStringLiteralExpressionParserRuleCall_3; }
	}

	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BooleanLiteralExpression");
		private final Assignment cImageAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImageBOOLEAN_VALUETerminalRuleCall_0 = (RuleCall)cImageAssignment.eContents().get(0);
		
		//BooleanLiteralExpression:
		//	image=BOOLEAN_VALUE;
		@Override public ParserRule getRule() { return rule; }

		//image=BOOLEAN_VALUE
		public Assignment getImageAssignment() { return cImageAssignment; }

		//BOOLEAN_VALUE
		public RuleCall getImageBOOLEAN_VALUETerminalRuleCall_0() { return cImageBOOLEAN_VALUETerminalRuleCall_0; }
	}

	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NaturalLiteralExpression");
		private final Assignment cImageAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImageNATURAL_VALUETerminalRuleCall_0 = (RuleCall)cImageAssignment.eContents().get(0);
		
		//NaturalLiteralExpression:
		//	image=NATURAL_VALUE;
		@Override public ParserRule getRule() { return rule; }

		//image=NATURAL_VALUE
		public Assignment getImageAssignment() { return cImageAssignment; }

		//NATURAL_VALUE
		public RuleCall getImageNATURAL_VALUETerminalRuleCall_0() { return cImageNATURAL_VALUETerminalRuleCall_0; }
	}

	public class UnboundedLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UnboundedLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnboundedLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnboundedLiteralExpression:
		//	{UnboundedLiteralExpression} '*';
		@Override public ParserRule getRule() { return rule; }

		//{UnboundedLiteralExpression} '*'
		public Group getGroup() { return cGroup; }

		//{UnboundedLiteralExpression}
		public Action getUnboundedLiteralExpressionAction_0() { return cUnboundedLiteralExpressionAction_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.StringLiteralExpression");
		private final Assignment cImageAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImageSTRINGTerminalRuleCall_0 = (RuleCall)cImageAssignment.eContents().get(0);
		
		//StringLiteralExpression:
		//	image=STRING;
		@Override public ParserRule getRule() { return rule; }

		//image=STRING
		public Assignment getImageAssignment() { return cImageAssignment; }

		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_0() { return cImageSTRINGTerminalRuleCall_0; }
	}

	public class NameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NameExpression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// * Name EXPRESSIONS * / NameExpression:
		//	name=PotentiallyAmbiguousQualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//name=PotentiallyAmbiguousQualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0() { return cNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0; }
	}

	public class ThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ThisExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFeatureInvocationExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cThisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTupleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_0_2_0 = (RuleCall)cTupleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cThisExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		/// * THIS EXPRESSIONS * / ThisExpression Expression:
		//	{FeatureInvocationExpression} 'this' tuple=Tuple | {ThisExpression} 'this'
		@Override public ParserRule getRule() { return rule; }

		//{FeatureInvocationExpression} 'this' tuple=Tuple | {ThisExpression} 'this'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FeatureInvocationExpression} 'this' tuple=Tuple
		public Group getGroup_0() { return cGroup_0; }

		//{FeatureInvocationExpression}
		public Action getFeatureInvocationExpressionAction_0_0() { return cFeatureInvocationExpressionAction_0_0; }

		//'this'
		public Keyword getThisKeyword_0_1() { return cThisKeyword_0_1; }

		//tuple=Tuple
		public Assignment getTupleAssignment_0_2() { return cTupleAssignment_0_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_0_2_0() { return cTupleTupleParserRuleCall_0_2_0; }

		//{ThisExpression} 'this'
		public Group getGroup_1() { return cGroup_1; }

		//{ThisExpression}
		public Action getThisExpressionAction_1_0() { return cThisExpressionAction_1_0; }

		//'this'
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// * PARENTHESIZED EXPRESSIONS * / ParenthesizedExpression Expression:
		//	'(' Expression ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' Expression ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class BehaviorInvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BehaviorInvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cTupleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_0 = (RuleCall)cTupleAssignment_1.eContents().get(0);
		
		/// * PROPERTY ACCESS EXPRESSIONS * / //FeatureReference :
		////  expression = PrimaryExpression // '.' nameBinding = NameBinding
		////;
		////FeatureTargetExpression returns Expression :
		////  NonNamePrimaryExpression | NameTargetExpression
		////;
		////
		////NameTargetExpression returns NameExpression :
		////  name = ColonQualifiedName
		////;
		/// * INVOCATION EXPRESSIONS * / BehaviorInvocationExpression:
		//	target=PotentiallyAmbiguousQualifiedName tuple=Tuple;
		@Override public ParserRule getRule() { return rule; }

		//target=PotentiallyAmbiguousQualifiedName tuple=Tuple
		public Group getGroup() { return cGroup; }

		//target=PotentiallyAmbiguousQualifiedName
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0() { return cTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_1() { return cTupleAssignment_1; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_0() { return cTupleTupleParserRuleCall_1_0; }
	}

	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNamedTupleExpressionListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPositionalTupleExpressionListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Tuple:
		/// * {Tuple}'(' ( namedTupleExpressionList = NamedTupleExpressionList | ( positionalTupleExpressionList = PositionalTupleExpressionList )? ) ')' * /
		//	'(' (NamedTupleExpressionList | PositionalTupleExpressionList) ')';
		@Override public ParserRule getRule() { return rule; }

		/// * {Tuple}'(' ( namedTupleExpressionList = NamedTupleExpressionList | ( positionalTupleExpressionList = PositionalTupleExpressionList )? ) ')' * /
		//'(' (NamedTupleExpressionList | PositionalTupleExpressionList) ')'
		public Group getGroup() { return cGroup; }

		/// * {Tuple}'(' ( namedTupleExpressionList = NamedTupleExpressionList | ( positionalTupleExpressionList = PositionalTupleExpressionList )? ) ')' * /
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(NamedTupleExpressionList | PositionalTupleExpressionList)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NamedTupleExpressionList
		public RuleCall getNamedTupleExpressionListParserRuleCall_1_0() { return cNamedTupleExpressionListParserRuleCall_1_0; }

		//PositionalTupleExpressionList
		public RuleCall getPositionalTupleExpressionListParserRuleCall_1_1() { return cPositionalTupleExpressionListParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PositionalTupleExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PositionalTupleExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPositionalTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		
		//PositionalTupleExpressionList PositionalTuple:
		//	{PositionalTuple} (expression+=Expression (',' expression+=Expression)*)?
		@Override public ParserRule getRule() { return rule; }

		//{PositionalTuple} (expression+=Expression (',' expression+=Expression)*)?
		public Group getGroup() { return cGroup; }

		//{PositionalTuple}
		public Action getPositionalTupleAction_0() { return cPositionalTupleAction_0; }

		//(expression+=Expression (',' expression+=Expression)*)?
		public Group getGroup_1() { return cGroup_1; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }

		//(',' expression+=Expression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }
	}

	public class NamedTupleExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NamedTupleExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamedExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamedExpressionNamedExpressionParserRuleCall_0_0 = (RuleCall)cNamedExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamedExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamedExpressionNamedExpressionParserRuleCall_1_1_0 = (RuleCall)cNamedExpressionAssignment_1_1.eContents().get(0);
		
		//NamedTupleExpressionList NamedTuple:
		//	namedExpression+=NamedExpression (',' namedExpression+=NamedExpression)*
		@Override public ParserRule getRule() { return rule; }

		//namedExpression+=NamedExpression (',' namedExpression+=NamedExpression)*
		public Group getGroup() { return cGroup; }

		//namedExpression+=NamedExpression
		public Assignment getNamedExpressionAssignment_0() { return cNamedExpressionAssignment_0; }

		//NamedExpression
		public RuleCall getNamedExpressionNamedExpressionParserRuleCall_0_0() { return cNamedExpressionNamedExpressionParserRuleCall_0_0; }

		//(',' namedExpression+=NamedExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//namedExpression+=NamedExpression
		public Assignment getNamedExpressionAssignment_1_1() { return cNamedExpressionAssignment_1_1; }

		//NamedExpression
		public RuleCall getNamedExpressionNamedExpressionParserRuleCall_1_1_0() { return cNamedExpressionNamedExpressionParserRuleCall_1_1_0; }
	}

	public class NamedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NamedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//NamedExpression:
		//	name=Name '=>' expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//name=Name '=>' expression=Expression
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SuperInvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SuperInvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_2_0 = (RuleCall)cTupleAssignment_2.eContents().get(0);
		
		//SuperInvocationExpression:
		//	'super' ('.' target=QualifiedName)? tuple=Tuple;
		@Override public ParserRule getRule() { return rule; }

		//'super' ('.' target=QualifiedName)? tuple=Tuple
		public Group getGroup() { return cGroup; }

		//'super'
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }

		//('.' target=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//target=QualifiedName
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }

		//QualifiedName
		public RuleCall getTargetQualifiedNameParserRuleCall_1_1_0() { return cTargetQualifiedNameParserRuleCall_1_1_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_2() { return cTupleAssignment_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_2_0() { return cTupleTupleParserRuleCall_2_0; }
	}

	public class InstanceCreationOrSequenceConstructionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.InstanceCreationOrSequenceConstructionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSequenceConstructionExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_1_0_1_0 = (RuleCall)cTypeNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cHasMultiplicityAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cHasMultiplicityMultiplicityIndicatorParserRuleCall_1_0_2_0 = (RuleCall)cHasMultiplicityAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cElementsAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cElementsSequenceElementsParserRuleCall_1_0_4_0 = (RuleCall)cElementsAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInstanceCreationExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cConstructorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstructorQualifiedNameParserRuleCall_1_1_1_0 = (RuleCall)cConstructorAssignment_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_1_1_2_0 = (RuleCall)cTupleAssignment_1_1_2.eContents().get(0);
		
		/// * INSTANCE CREATION EXPRESSIONS * / InstanceCreationOrSequenceConstructionExpression Expression:
		//	'new' ({SequenceConstructionExpression} typeName=QualifiedName hasMultiplicity?=MultiplicityIndicator? '{'
		//	elements=SequenceElements? '}' | {InstanceCreationExpression} constructor=QualifiedName tuple=Tuple)
		@Override public ParserRule getRule() { return rule; }

		//'new' ({SequenceConstructionExpression} typeName=QualifiedName hasMultiplicity?=MultiplicityIndicator? '{'
		//elements=SequenceElements? '}' | {InstanceCreationExpression} constructor=QualifiedName tuple=Tuple)
		public Group getGroup() { return cGroup; }

		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//({SequenceConstructionExpression} typeName=QualifiedName hasMultiplicity?=MultiplicityIndicator? '{'
		//elements=SequenceElements? '}' | {InstanceCreationExpression} constructor=QualifiedName tuple=Tuple)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{SequenceConstructionExpression} typeName=QualifiedName hasMultiplicity?=MultiplicityIndicator? '{'
		//elements=SequenceElements? '}'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{SequenceConstructionExpression}
		public Action getSequenceConstructionExpressionAction_1_0_0() { return cSequenceConstructionExpressionAction_1_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_1_0_1() { return cTypeNameAssignment_1_0_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_1_0_1_0() { return cTypeNameQualifiedNameParserRuleCall_1_0_1_0; }

		//hasMultiplicity?=MultiplicityIndicator?
		public Assignment getHasMultiplicityAssignment_1_0_2() { return cHasMultiplicityAssignment_1_0_2; }

		//MultiplicityIndicator
		public RuleCall getHasMultiplicityMultiplicityIndicatorParserRuleCall_1_0_2_0() { return cHasMultiplicityMultiplicityIndicatorParserRuleCall_1_0_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_3() { return cLeftCurlyBracketKeyword_1_0_3; }

		//elements=SequenceElements?
		public Assignment getElementsAssignment_1_0_4() { return cElementsAssignment_1_0_4; }

		//SequenceElements
		public RuleCall getElementsSequenceElementsParserRuleCall_1_0_4_0() { return cElementsSequenceElementsParserRuleCall_1_0_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_5() { return cRightCurlyBracketKeyword_1_0_5; }

		//{InstanceCreationExpression} constructor=QualifiedName tuple=Tuple
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{InstanceCreationExpression}
		public Action getInstanceCreationExpressionAction_1_1_0() { return cInstanceCreationExpressionAction_1_1_0; }

		//constructor=QualifiedName
		public Assignment getConstructorAssignment_1_1_1() { return cConstructorAssignment_1_1_1; }

		//QualifiedName
		public RuleCall getConstructorQualifiedNameParserRuleCall_1_1_1_0() { return cConstructorQualifiedNameParserRuleCall_1_1_1_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_1_1_2() { return cTupleAssignment_1_1_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_1_2_0() { return cTupleTupleParserRuleCall_1_1_2_0; }
	}

	public class LinkOperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LinkOperationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssociationNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssociationNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0 = (RuleCall)cAssociationNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationLinkOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleLinkOperationTupleParserRuleCall_3_0 = (RuleCall)cTupleAssignment_3.eContents().get(0);
		
		/// * LINK OPERATION EXPRESSIONS * / LinkOperationExpression:
		//	associationName=PotentiallyAmbiguousQualifiedName '.' operation=LinkOperation tuple=LinkOperationTuple;
		@Override public ParserRule getRule() { return rule; }

		//associationName=PotentiallyAmbiguousQualifiedName '.' operation=LinkOperation tuple=LinkOperationTuple
		public Group getGroup() { return cGroup; }

		//associationName=PotentiallyAmbiguousQualifiedName
		public Assignment getAssociationNameAssignment_0() { return cAssociationNameAssignment_0; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getAssociationNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0() { return cAssociationNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//operation=LinkOperation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//LinkOperation
		public RuleCall getOperationLinkOperationParserRuleCall_2_0() { return cOperationLinkOperationParserRuleCall_2_0; }

		//tuple=LinkOperationTuple
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }

		//LinkOperationTuple
		public RuleCall getTupleLinkOperationTupleParserRuleCall_3_0() { return cTupleLinkOperationTupleParserRuleCall_3_0; }
	}

	public class LinkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LinkOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCreateLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDestroyLinkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClearAssocKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LinkOperation:
		//	'createLink' | 'destroyLink' | 'clearAssoc';
		@Override public ParserRule getRule() { return rule; }

		//'createLink' | 'destroyLink' | 'clearAssoc'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'createLink'
		public Keyword getCreateLinkKeyword_0() { return cCreateLinkKeyword_0; }

		//'destroyLink'
		public Keyword getDestroyLinkKeyword_1() { return cDestroyLinkKeyword_1; }

		//'clearAssoc'
		public Keyword getClearAssocKeyword_2() { return cClearAssocKeyword_2; }
	}

	public class LinkOperationTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LinkOperationTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIndexedNamedTupleExpressionListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPositionalTupleExpressionListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LinkOperationTuple Tuple:
		//	'(' (IndexedNamedTupleExpressionList | PositionalTupleExpressionList) ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' (IndexedNamedTupleExpressionList | PositionalTupleExpressionList) ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(IndexedNamedTupleExpressionList | PositionalTupleExpressionList)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IndexedNamedTupleExpressionList
		public RuleCall getIndexedNamedTupleExpressionListParserRuleCall_1_0() { return cIndexedNamedTupleExpressionListParserRuleCall_1_0; }

		//PositionalTupleExpressionList
		public RuleCall getPositionalTupleExpressionListParserRuleCall_1_1() { return cPositionalTupleExpressionListParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class IndexedNamedTupleExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.IndexedNamedTupleExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamedExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamedExpressionIndexedNamedExpressionParserRuleCall_0_0 = (RuleCall)cNamedExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamedExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamedExpressionIndexedNamedExpressionParserRuleCall_1_1_0 = (RuleCall)cNamedExpressionAssignment_1_1.eContents().get(0);
		
		//IndexedNamedTupleExpressionList NamedTuple:
		//	namedExpression+=IndexedNamedExpression (',' namedExpression+=IndexedNamedExpression)*
		@Override public ParserRule getRule() { return rule; }

		//namedExpression+=IndexedNamedExpression (',' namedExpression+=IndexedNamedExpression)*
		public Group getGroup() { return cGroup; }

		//namedExpression+=IndexedNamedExpression
		public Assignment getNamedExpressionAssignment_0() { return cNamedExpressionAssignment_0; }

		//IndexedNamedExpression
		public RuleCall getNamedExpressionIndexedNamedExpressionParserRuleCall_0_0() { return cNamedExpressionIndexedNamedExpressionParserRuleCall_0_0; }

		//(',' namedExpression+=IndexedNamedExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//namedExpression+=IndexedNamedExpression
		public Assignment getNamedExpressionAssignment_1_1() { return cNamedExpressionAssignment_1_1; }

		//IndexedNamedExpression
		public RuleCall getNamedExpressionIndexedNamedExpressionParserRuleCall_1_1_0() { return cNamedExpressionIndexedNamedExpressionParserRuleCall_1_1_0; }
	}

	public class IndexedNamedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.IndexedNamedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//IndexedNamedExpression NamedExpression:
		//	name=Name index=Index? '=>' expression=Expression
		@Override public ParserRule getRule() { return rule; }

		//name=Name index=Index? '=>' expression=Expression
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//index=Index?
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//Index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ClassExtentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassExtentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0 = (RuleCall)cClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllInstancesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * CLASS EXTENT EXPRESSIONS * / ClassExtentExpression:
		//	className=PotentiallyAmbiguousQualifiedName '.' 'allInstances' '(' ')';
		@Override public ParserRule getRule() { return rule; }

		//className=PotentiallyAmbiguousQualifiedName '.' 'allInstances' '(' ')'
		public Group getGroup() { return cGroup; }

		//className=PotentiallyAmbiguousQualifiedName
		public Assignment getClassNameAssignment_0() { return cClassNameAssignment_0; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getClassNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0() { return cClassNamePotentiallyAmbiguousQualifiedNameParserRuleCall_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//'allInstances'
		public Keyword getAllInstancesKeyword_2() { return cAllInstancesKeyword_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SequenceConstructionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceConstructionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cIsAnyAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_0_0_0_0 = (Keyword)cIsAnyAssignment_0_0_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_0_0_1_0 = (RuleCall)cTypeNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cHasMultiplicityAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_0 = (RuleCall)cHasMultiplicityAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElementsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementsSequenceElementsParserRuleCall_0_3_0 = (RuleCall)cElementsAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cHasMultiplicityAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cHasMultiplicityNullKeyword_1_0 = (Keyword)cHasMultiplicityAssignment_1.eContents().get(0);
		
		/// * SEQUENCE CONSTRUCTION EXPRESSIONS * / SequenceConstructionExpression:
		//	(isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? '{' elements=SequenceElements? '}' |
		//	hasMultiplicity?='null';
		@Override public ParserRule getRule() { return rule; }

		//(isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? '{' elements=SequenceElements? '}' |
		//hasMultiplicity?='null'
		public Alternatives getAlternatives() { return cAlternatives; }

		//(isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? '{' elements=SequenceElements? '}'
		public Group getGroup_0() { return cGroup_0; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_0_0_0() { return cIsAnyAssignment_0_0_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_0_0_0_0() { return cIsAnyAnyKeyword_0_0_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_0_0_1() { return cTypeNameAssignment_0_0_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_0_0_1_0() { return cTypeNameQualifiedNameParserRuleCall_0_0_1_0; }

		//hasMultiplicity?=MultiplicityIndicator?
		public Assignment getHasMultiplicityAssignment_0_1() { return cHasMultiplicityAssignment_0_1; }

		//MultiplicityIndicator
		public RuleCall getHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_0() { return cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//elements=SequenceElements?
		public Assignment getElementsAssignment_0_3() { return cElementsAssignment_0_3; }

		//SequenceElements
		public RuleCall getElementsSequenceElementsParserRuleCall_0_3_0() { return cElementsSequenceElementsParserRuleCall_0_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//hasMultiplicity?='null'
		public Assignment getHasMultiplicityAssignment_1() { return cHasMultiplicityAssignment_1; }

		//'null'
		public Keyword getHasMultiplicityNullKeyword_1_0() { return cHasMultiplicityNullKeyword_1_0; }
	}

	public class MultiplicityIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.MultiplicityIndicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MultiplicityIndicator:
		//	'[' ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}

	public class SequenceElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceExpressionListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SequenceElements:
		//	SequenceRange | SequenceExpressionList;
		@Override public ParserRule getRule() { return rule; }

		//SequenceRange | SequenceExpressionList
		public Alternatives getAlternatives() { return cAlternatives; }

		//SequenceRange
		public RuleCall getSequenceRangeParserRuleCall_0() { return cSequenceRangeParserRuleCall_0; }

		//SequenceExpressionList
		public RuleCall getSequenceExpressionListParserRuleCall_1() { return cSequenceExpressionListParserRuleCall_1; }
	}

	public class SequenceRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeLowerExpressionParserRuleCall_0_0 = (RuleCall)cRangeLowerAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeUpperExpressionParserRuleCall_2_0 = (RuleCall)cRangeUpperAssignment_2.eContents().get(0);
		
		//SequenceRange:
		//	rangeLower=Expression '..' rangeUpper=Expression;
		@Override public ParserRule getRule() { return rule; }

		//rangeLower=Expression '..' rangeUpper=Expression
		public Group getGroup() { return cGroup; }

		//rangeLower=Expression
		public Assignment getRangeLowerAssignment_0() { return cRangeLowerAssignment_0; }

		//Expression
		public RuleCall getRangeLowerExpressionParserRuleCall_0_0() { return cRangeLowerExpressionParserRuleCall_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//rangeUpper=Expression
		public Assignment getRangeUpperAssignment_2() { return cRangeUpperAssignment_2; }

		//Expression
		public RuleCall getRangeUpperExpressionParserRuleCall_2_0() { return cRangeUpperExpressionParserRuleCall_2_0; }
	}

	public class SequenceExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementSequenceElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementSequenceElementParserRuleCall_1_1_0 = (RuleCall)cElementAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SequenceExpressionList:
		//	element+=SequenceElement (',' element+=SequenceElement)* ','?;
		@Override public ParserRule getRule() { return rule; }

		//element+=SequenceElement (',' element+=SequenceElement)* ','?
		public Group getGroup() { return cGroup; }

		//element+=SequenceElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//SequenceElement
		public RuleCall getElementSequenceElementParserRuleCall_0_0() { return cElementSequenceElementParserRuleCall_0_0; }

		//(',' element+=SequenceElement)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//element+=SequenceElement
		public Assignment getElementAssignment_1_1() { return cElementAssignment_1_1; }

		//SequenceElement
		public RuleCall getElementSequenceElementParserRuleCall_1_1_0() { return cElementSequenceElementParserRuleCall_1_1_0; }

		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class SequenceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceInitializationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SequenceElement Expression:
		//	Expression | SequenceInitializationExpression
		@Override public ParserRule getRule() { return rule; }

		//Expression | SequenceInitializationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//SequenceInitializationExpression
		public RuleCall getSequenceInitializationExpressionParserRuleCall_1() { return cSequenceInitializationExpressionParserRuleCall_1; }
	}

	public class SequenceInitializationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceInitializationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsSequenceElementsParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceInitializationExpression SequenceConstructionExpression:
		//	'new'? '{' elements=SequenceElements '}'
		@Override public ParserRule getRule() { return rule; }

		//'new'? '{' elements=SequenceElements '}'
		public Group getGroup() { return cGroup; }

		//'new'?
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements=SequenceElements
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//SequenceElements
		public RuleCall getElementsSequenceElementsParserRuleCall_2_0() { return cElementsSequenceElementsParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// * SEQUENCE ACCESS EXPRESSIONS * / Index Expression:
		//	'[' Expression ']'
		@Override public ParserRule getRule() { return rule; }

		//'[' Expression ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class SequenceOperationOrReductionOrExpansionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SequenceOperationOrReductionOrExpansionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtentOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePotentiallyAmbiguousQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Action cSequenceOperationExpressionPrimaryAction_3_0_0 = (Action)cGroup_3_0.eContents().get(0);
		private final Assignment cOperationAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOperationQualifiedNameParserRuleCall_3_0_1_0 = (RuleCall)cOperationAssignment_3_0_1.eContents().get(0);
		private final Assignment cTupleAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_3_0_2_0 = (RuleCall)cTupleAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Action cSequenceReductionExpressionPrimaryAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cReduceKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cIsOrderedAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final Keyword cIsOrderedOrderedKeyword_3_1_2_0 = (Keyword)cIsOrderedAssignment_3_1_2.eContents().get(0);
		private final Assignment cBehaviorNameAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cBehaviorNameQualifiedNameParserRuleCall_3_1_3_0 = (RuleCall)cBehaviorNameAssignment_3_1_3.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Action cSequenceExpansionExpressionPrimaryAction_3_2_0 = (Action)cGroup_3_2.eContents().get(0);
		private final Assignment cOperationAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOperationIDTerminalRuleCall_3_2_1_0 = (RuleCall)cOperationAssignment_3_2_1.eContents().get(0);
		private final Assignment cVariableAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cVariableNameParserRuleCall_3_2_2_0 = (RuleCall)cVariableAssignment_3_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Assignment cArgumentAssignment_3_2_4 = (Assignment)cGroup_3_2.eContents().get(4);
		private final RuleCall cArgumentExpressionParserRuleCall_3_2_4_0 = (RuleCall)cArgumentAssignment_3_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_5 = (Keyword)cGroup_3_2.eContents().get(5);
		
		/// * SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS * / // NOTE: This only covers the case when the primary is a class extent shorthand.
		//SequenceOperationOrReductionOrExpansionExpression Expression:
		//	{ExtentOrExpression} name=PotentiallyAmbiguousQualifiedName '->' ({SequenceOperationExpression.primary=current}
		//	operation=QualifiedName tuple=Tuple
		//	| {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
		//	// CHANGE: Made SequenceExpansionExpression concrete.
		//	| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
		@Override public ParserRule getRule() { return rule; }

		//{ExtentOrExpression} name=PotentiallyAmbiguousQualifiedName '->' ({SequenceOperationExpression.primary=current}
		//operation=QualifiedName tuple=Tuple | {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'?
		//behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
		public Group getGroup() { return cGroup; }

		//{ExtentOrExpression}
		public Action getExtentOrExpressionAction_0() { return cExtentOrExpressionAction_0; }

		//name=PotentiallyAmbiguousQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getNamePotentiallyAmbiguousQualifiedNameParserRuleCall_1_0() { return cNamePotentiallyAmbiguousQualifiedNameParserRuleCall_1_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//({SequenceOperationExpression.primary=current} operation=QualifiedName tuple=Tuple |
		//{SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName // CHANGE: Made SequenceExpansionExpression concrete.
		//| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//{SequenceOperationExpression.primary=current} operation=QualifiedName tuple=Tuple
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{SequenceOperationExpression.primary=current}
		public Action getSequenceOperationExpressionPrimaryAction_3_0_0() { return cSequenceOperationExpressionPrimaryAction_3_0_0; }

		//operation=QualifiedName
		public Assignment getOperationAssignment_3_0_1() { return cOperationAssignment_3_0_1; }

		//QualifiedName
		public RuleCall getOperationQualifiedNameParserRuleCall_3_0_1_0() { return cOperationQualifiedNameParserRuleCall_3_0_1_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_3_0_2() { return cTupleAssignment_3_0_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_3_0_2_0() { return cTupleTupleParserRuleCall_3_0_2_0; }

		//{SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{SequenceReductionExpression.primary=current}
		public Action getSequenceReductionExpressionPrimaryAction_3_1_0() { return cSequenceReductionExpressionPrimaryAction_3_1_0; }

		//'reduce'
		public Keyword getReduceKeyword_3_1_1() { return cReduceKeyword_3_1_1; }

		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_3_1_2() { return cIsOrderedAssignment_3_1_2; }

		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_3_1_2_0() { return cIsOrderedOrderedKeyword_3_1_2_0; }

		//behaviorName=QualifiedName
		public Assignment getBehaviorNameAssignment_3_1_3() { return cBehaviorNameAssignment_3_1_3; }

		//QualifiedName
		public RuleCall getBehaviorNameQualifiedNameParserRuleCall_3_1_3_0() { return cBehaviorNameQualifiedNameParserRuleCall_3_1_3_0; }

		//{SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')'
		public Group getGroup_3_2() { return cGroup_3_2; }

		//{SequenceExpansionExpression.primary=current}
		public Action getSequenceExpansionExpressionPrimaryAction_3_2_0() { return cSequenceExpansionExpressionPrimaryAction_3_2_0; }

		//operation=ID
		public Assignment getOperationAssignment_3_2_1() { return cOperationAssignment_3_2_1; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_3_2_1_0() { return cOperationIDTerminalRuleCall_3_2_1_0; }

		//variable=Name
		public Assignment getVariableAssignment_3_2_2() { return cVariableAssignment_3_2_2; }

		//Name
		public RuleCall getVariableNameParserRuleCall_3_2_2_0() { return cVariableNameParserRuleCall_3_2_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_2_3() { return cLeftParenthesisKeyword_3_2_3; }

		//argument=Expression
		public Assignment getArgumentAssignment_3_2_4() { return cArgumentAssignment_3_2_4; }

		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_3_2_4_0() { return cArgumentExpressionParserRuleCall_3_2_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_2_5() { return cRightParenthesisKeyword_3_2_5; }
	}

	public class PrefixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PrefixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAffixOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandLeftHandSideParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		/// * INCREMENT OR DECREMENT EXPRESSIONS * / PrefixExpression IncrementOrDecrementExpression:
		//	operator=AffixOperator operand=LeftHandSide
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Added operator to IncrementOrDecrementExpression in the metamodel.
		//operator=AffixOperator operand=LeftHandSide
		public Group getGroup() { return cGroup; }

		//// CHANGE: Added operator to IncrementOrDecrementExpression in the metamodel.
		//operator=AffixOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//AffixOperator
		public RuleCall getOperatorAffixOperatorParserRuleCall_0_0() { return cOperatorAffixOperatorParserRuleCall_0_0; }

		//operand=LeftHandSide
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//LeftHandSide
		public RuleCall getOperandLeftHandSideParserRuleCall_1_0() { return cOperandLeftHandSideParserRuleCall_1_0; }
	}

	public class AffixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AffixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AffixOperator:
		//	'++' | '--';
		@Override public ParserRule getRule() { return rule; }

		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixOrCastExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonPostfixNonCastUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * UNARY EXPRESSIONS * / UnaryExpression Expression:
		//	PostfixOrCastExpression | NonPostfixNonCastUnaryExpression
		@Override public ParserRule getRule() { return rule; }

		//PostfixOrCastExpression | NonPostfixNonCastUnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PostfixOrCastExpression
		public RuleCall getPostfixOrCastExpressionParserRuleCall_0() { return cPostfixOrCastExpressionParserRuleCall_0; }

		//NonPostfixNonCastUnaryExpression
		public RuleCall getNonPostfixNonCastUnaryExpressionParserRuleCall_1() { return cNonPostfixNonCastUnaryExpressionParserRuleCall_1; }
	}

	public class PostfixOrCastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PostfixOrCastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCastExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PostfixOrCastExpression Expression:
		//	PostfixExpression | CastExpression | PrimaryExpression
		@Override public ParserRule getRule() { return rule; }

		//PostfixExpression | CastExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }

		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_1() { return cCastExpressionParserRuleCall_1; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_2() { return cPrimaryExpressionParserRuleCall_2; }
	}

	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandLeftHandSideParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAffixOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		
		//PostfixExpression IncrementOrDecrementExpression:
		//	operand=LeftHandSide operator=AffixOperator
		@Override public ParserRule getRule() { return rule; }

		//operand=LeftHandSide operator=AffixOperator
		public Group getGroup() { return cGroup; }

		//operand=LeftHandSide
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//LeftHandSide
		public RuleCall getOperandLeftHandSideParserRuleCall_0_0() { return cOperandLeftHandSideParserRuleCall_0_0; }

		//operator=AffixOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//AffixOperator
		public RuleCall getOperatorAffixOperatorParserRuleCall_1_0() { return cOperatorAffixOperatorParserRuleCall_1_0; }
	}

	public class NonPostfixNonCastUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NonPostfixNonCastUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBitStringUnaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIsolationExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NonPostfixNonCastUnaryExpression Expression:
		//	PrefixExpression | NumericUnaryExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
		@Override public ParserRule getRule() { return rule; }

		//PrefixExpression | NumericUnaryExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrefixExpression
		public RuleCall getPrefixExpressionParserRuleCall_0() { return cPrefixExpressionParserRuleCall_0; }

		//NumericUnaryExpression
		public RuleCall getNumericUnaryExpressionParserRuleCall_1() { return cNumericUnaryExpressionParserRuleCall_1; }

		//BooleanUnaryExpression
		public RuleCall getBooleanUnaryExpressionParserRuleCall_2() { return cBooleanUnaryExpressionParserRuleCall_2; }

		//BitStringUnaryExpression
		public RuleCall getBitStringUnaryExpressionParserRuleCall_3() { return cBitStringUnaryExpressionParserRuleCall_3; }

		//IsolationExpression
		public RuleCall getIsolationExpressionParserRuleCall_4() { return cIsolationExpressionParserRuleCall_4; }
	}

	public class BooleanUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BooleanUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//BooleanUnaryExpression:
		//	operator='!' operand=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//operator='!' operand=UnaryExpression
		public Group getGroup() { return cGroup; }

		//operator='!'
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//'!'
		public Keyword getOperatorExclamationMarkKeyword_0_0() { return cOperatorExclamationMarkKeyword_0_0; }

		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}

	public class BitStringUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BitStringUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorTildeKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//BitStringUnaryExpression:
		//	operator='~' operand=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//operator='~' operand=UnaryExpression
		public Group getGroup() { return cGroup; }

		//operator='~'
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//'~'
		public Keyword getOperatorTildeKeyword_0_0() { return cOperatorTildeKeyword_0_0; }

		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}

	public class NumericUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NumericUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNumericUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//NumericUnaryExpression:
		//	operator=NumericUnaryOperator operand=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//operator=NumericUnaryOperator operand=UnaryExpression
		public Group getGroup() { return cGroup; }

		//operator=NumericUnaryOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NumericUnaryOperator
		public RuleCall getOperatorNumericUnaryOperatorParserRuleCall_0_0() { return cOperatorNumericUnaryOperatorParserRuleCall_0_0; }

		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}

	public class NumericUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NumericUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NumericUnaryOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class IsolationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.IsolationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorDollarSignKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//IsolationExpression:
		//	operator='$' operand=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//operator='$' operand=UnaryExpression
		public Group getGroup() { return cGroup; }

		//operator='$'
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//'$'
		public Keyword getOperatorDollarSignKeyword_0_0() { return cOperatorDollarSignKeyword_0_0; }

		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}

	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsAnyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_1_0_0 = (Keyword)cIsAnyAssignment_1_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cTypeNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandCastCompletionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		
		//CastExpression: // CHANGE: Added isAny attribute to CastExpression in order to allow Xtext serialization.
		//	'(' (isAny?='any' | typeName=QualifiedName) ')' operand=CastCompletion;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Added isAny attribute to CastExpression in order to allow Xtext serialization.
		//'(' (isAny?='any' | typeName=QualifiedName) ')' operand=CastCompletion
		public Group getGroup() { return cGroup; }

		//// CHANGE: Added isAny attribute to CastExpression in order to allow Xtext serialization.
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_1_0() { return cIsAnyAssignment_1_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_1_0_0() { return cIsAnyAnyKeyword_1_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_1_1() { return cTypeNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_1_1_0() { return cTypeNameQualifiedNameParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//operand=CastCompletion
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//CastCompletion
		public RuleCall getOperandCastCompletionParserRuleCall_3_0() { return cOperandCastCompletionParserRuleCall_3_0; }
	}

	public class CastCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.CastCompletion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixOrCastExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBitStringUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsolationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CastCompletion Expression:
		//	PostfixOrCastExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
		@Override public ParserRule getRule() { return rule; }

		//PostfixOrCastExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PostfixOrCastExpression
		public RuleCall getPostfixOrCastExpressionParserRuleCall_0() { return cPostfixOrCastExpressionParserRuleCall_0; }

		//BooleanUnaryExpression
		public RuleCall getBooleanUnaryExpressionParserRuleCall_1() { return cBooleanUnaryExpressionParserRuleCall_1; }

		//BitStringUnaryExpression
		public RuleCall getBitStringUnaryExpressionParserRuleCall_2() { return cBitStringUnaryExpressionParserRuleCall_2; }

		//IsolationExpression
		public RuleCall getIsolationExpressionParserRuleCall_3() { return cIsolationExpressionParserRuleCall_3; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2UnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * ARITHMETIC EXPRESSIONS * / MultiplicativeExpression Expression:
		//	UnaryExpression ({ArithmeticExpression.operand1=current} operator=MultiplicativeOperator operand2=UnaryExpression)*
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpression ({ArithmeticExpression.operand1=current} operator=MultiplicativeOperator operand2=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//({ArithmeticExpression.operand1=current} operator=MultiplicativeOperator operand2=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ArithmeticExpression.operand1=current}
		public Action getArithmeticExpressionOperand1Action_1_0() { return cArithmeticExpressionOperand1Action_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_1_0; }

		//operand2=UnaryExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//UnaryExpression
		public RuleCall getOperand2UnaryExpressionParserRuleCall_1_2_0() { return cOperand2UnaryExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicativeOperator:
		//	'*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }

		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2MultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({ArithmeticExpression.operand1=current} operator=AdditiveOperator
		//	operand2=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({ArithmeticExpression.operand1=current} operator=AdditiveOperator
		//operand2=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({ArithmeticExpression.operand1=current} operator=AdditiveOperator operand2=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ArithmeticExpression.operand1=current}
		public Action getArithmeticExpressionOperand1Action_1_0() { return cArithmeticExpressionOperand1Action_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0; }

		//operand2=MultiplicativeExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getOperand2MultiplicativeExpressionParserRuleCall_1_2_0() { return cOperand2MultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorShiftOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2AdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * SHIFT EXPRESSIONS * / ShiftExpression Expression:
		//	AdditiveExpression ({ShiftExpression.operand1=current} operator=ShiftOperator operand2=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpression ({ShiftExpression.operand1=current} operator=ShiftOperator operand2=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({ShiftExpression.operand1=current} operator=ShiftOperator operand2=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ShiftExpression.operand1=current}
		public Action getShiftExpressionOperand1Action_1_0() { return cShiftExpressionOperand1Action_1_0; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorParserRuleCall_1_1_0() { return cOperatorShiftOperatorParserRuleCall_1_1_0; }

		//operand2=AdditiveExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//AdditiveExpression
		public RuleCall getOperand2AdditiveExpressionParserRuleCall_1_2_0() { return cOperand2AdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class ShiftOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ShiftOperator:
		//	'<<' | '>>' | '>>>';
		@Override public ParserRule getRule() { return rule; }

		//'<<' | '>>' | '>>>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }

		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * RELATIONAL EXPRESSIONS * / RelationalExpression Expression:
		//	ShiftExpression ({RelationalExpression.operand1=current} operator=RelationalOperator operand2=ShiftExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ShiftExpression ({RelationalExpression.operand1=current} operator=RelationalOperator operand2=ShiftExpression)?
		public Group getGroup() { return cGroup; }

		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0() { return cShiftExpressionParserRuleCall_0; }

		//({RelationalExpression.operand1=current} operator=RelationalOperator operand2=ShiftExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalExpression.operand1=current}
		public Action getRelationalExpressionOperand1Action_1_0() { return cRelationalExpressionOperand1Action_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }

		//operand2=ShiftExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//ShiftExpression
		public RuleCall getOperand2ShiftExpressionParserRuleCall_1_2_0() { return cOperand2ShiftExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//	'<' | '>' | '<=' | '>=';
		@Override public ParserRule getRule() { return rule; }

		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cClassificationExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorClassificationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_1_2_0 = (RuleCall)cTypeNameAssignment_1_2.eContents().get(0);
		
		/// * CLASSIFICATION EXPRESSIONS * / ClassificationExpression Expression:
		//	RelationalExpression ({ClassificationExpression.operand=current} operator=ClassificationOperator
		//	typeName=QualifiedName)?
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpression ({ClassificationExpression.operand=current} operator=ClassificationOperator
		//typeName=QualifiedName)?
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({ClassificationExpression.operand=current} operator=ClassificationOperator typeName=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//{ClassificationExpression.operand=current}
		public Action getClassificationExpressionOperandAction_1_0() { return cClassificationExpressionOperandAction_1_0; }

		//operator=ClassificationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ClassificationOperator
		public RuleCall getOperatorClassificationOperatorParserRuleCall_1_1_0() { return cOperatorClassificationOperatorParserRuleCall_1_1_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_1_2() { return cTypeNameAssignment_1_2; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_1_2_0() { return cTypeNameQualifiedNameParserRuleCall_1_2_0; }
	}

	public class ClassificationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassificationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInstanceofKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHastypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ClassificationOperator:
		//	'instanceof' | 'hastype';
		@Override public ParserRule getRule() { return rule; }

		//'instanceof' | 'hastype'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'instanceof'
		public Keyword getInstanceofKeyword_0() { return cInstanceofKeyword_0; }

		//'hastype'
		public Keyword getHastypeKeyword_1() { return cHastypeKeyword_1; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ClassificationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * EQUALITY EXPRESSIONS * / EqualityExpression Expression:
		//	ClassificationExpression ({EqualityExpression.operand1=current} operator=EqualityOperator
		//	operand2=ClassificationExpression)*
		@Override public ParserRule getRule() { return rule; }

		//ClassificationExpression ({EqualityExpression.operand1=current} operator=EqualityOperator
		//operand2=ClassificationExpression)*
		public Group getGroup() { return cGroup; }

		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_0() { return cClassificationExpressionParserRuleCall_0; }

		//({EqualityExpression.operand1=current} operator=EqualityOperator operand2=ClassificationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{EqualityExpression.operand1=current}
		public Action getEqualityExpressionOperand1Action_1_0() { return cEqualityExpressionOperand1Action_1_0; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }

		//operand2=ClassificationExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//ClassificationExpression
		public RuleCall getOperand2ClassificationExpressionParserRuleCall_1_2_0() { return cOperand2ClassificationExpressionParserRuleCall_1_2_0; }
	}

	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqualityOperator:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }

		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * LOGICAL EXPRESSIONS * / AndExpression Expression:
		//	EqualityExpression ({LogicalExpression.operand1=current} operator='&' operand2=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }

		//EqualityExpression ({LogicalExpression.operand1=current} operator='&' operand2=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//({LogicalExpression.operand1=current} operator='&' operand2=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalExpression.operand1=current}
		public Action getLogicalExpressionOperand1Action_1_0() { return cLogicalExpressionOperand1Action_1_0; }

		//operator='&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0() { return cOperatorAmpersandKeyword_1_1_0; }

		//operand2=EqualityExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//EqualityExpression
		public RuleCall getOperand2EqualityExpressionParserRuleCall_1_2_0() { return cOperand2EqualityExpressionParserRuleCall_1_2_0; }
	}

	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2AndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//ExclusiveOrExpression Expression:
		//	AndExpression ({LogicalExpression.operand1=current} operator='^' operand2=AndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({LogicalExpression.operand1=current} operator='^' operand2=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({LogicalExpression.operand1=current} operator='^' operand2=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalExpression.operand1=current}
		public Action getLogicalExpressionOperand1Action_1_0() { return cLogicalExpressionOperand1Action_1_0; }

		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }

		//operand2=AndExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//AndExpression
		public RuleCall getOperand2AndExpressionParserRuleCall_1_2_0() { return cOperand2AndExpressionParserRuleCall_1_2_0; }
	}

	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ExclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//InclusiveOrExpression Expression:
		//	ExclusiveOrExpression ({LogicalExpression.operand1=current} operator='|' operand2=ExclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }

		//ExclusiveOrExpression ({LogicalExpression.operand1=current} operator='|' operand2=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }

		//ExclusiveOrExpression
		public RuleCall getExclusiveOrExpressionParserRuleCall_0() { return cExclusiveOrExpressionParserRuleCall_0; }

		//({LogicalExpression.operand1=current} operator='|' operand2=ExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalExpression.operand1=current}
		public Action getLogicalExpressionOperand1Action_1_0() { return cLogicalExpressionOperand1Action_1_0; }

		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }

		//operand2=ExclusiveOrExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//ExclusiveOrExpression
		public RuleCall getOperand2ExclusiveOrExpressionParserRuleCall_1_2_0() { return cOperand2ExclusiveOrExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalLogicalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2InclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		/// * CONDITIONAL LOGICAL EXPRESSIONS * / ConditionalAndExpression Expression:
		//	InclusiveOrExpression ({ConditionalLogicalExpression.operand1=current} operator='&&' operand2=InclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }

		//InclusiveOrExpression ({ConditionalLogicalExpression.operand1=current} operator='&&' operand2=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }

		//InclusiveOrExpression
		public RuleCall getInclusiveOrExpressionParserRuleCall_0() { return cInclusiveOrExpressionParserRuleCall_0; }

		//({ConditionalLogicalExpression.operand1=current} operator='&&' operand2=InclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalLogicalExpression.operand1=current}
		public Action getConditionalLogicalExpressionOperand1Action_1_0() { return cConditionalLogicalExpressionOperand1Action_1_0; }

		//operator='&&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }

		//operand2=InclusiveOrExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//InclusiveOrExpression
		public RuleCall getOperand2InclusiveOrExpressionParserRuleCall_1_2_0() { return cOperand2InclusiveOrExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalLogicalExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ConditionalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//ConditionalOrExpression Expression:
		//	ConditionalAndExpression ({ConditionalLogicalExpression.operand1=current} operator='||'
		//	operand2=ConditionalAndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//ConditionalAndExpression ({ConditionalLogicalExpression.operand1=current} operator='||'
		//operand2=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_0() { return cConditionalAndExpressionParserRuleCall_0; }

		//({ConditionalLogicalExpression.operand1=current} operator='||' operand2=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalLogicalExpression.operand1=current}
		public Action getConditionalLogicalExpressionOperand1Action_1_0() { return cConditionalLogicalExpressionOperand1Action_1_0; }

		//operator='||'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }

		//operand2=ConditionalAndExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//ConditionalAndExpression
		public RuleCall getOperand2ConditionalAndExpressionParserRuleCall_1_2_0() { return cOperand2ConditionalAndExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalTestExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperand3Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperand3ConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cOperand3Assignment_1_4.eContents().get(0);
		
		/// * CONDITIONAL-TEST EXPRESSIONS * / ConditionalExpression Expression:
		//	ConditionalOrExpression ({ConditionalTestExpression.operand1=current}
		//	'?' operand2=Expression ':' operand3=ConditionalExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ConditionalOrExpression ({ConditionalTestExpression.operand1=current} '?' operand2=Expression ':'
		//operand3=ConditionalExpression)?
		public Group getGroup() { return cGroup; }

		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }

		//({ConditionalTestExpression.operand1=current} '?' operand2=Expression ':' operand3=ConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalTestExpression.operand1=current}
		public Action getConditionalTestExpressionOperand1Action_1_0() { return cConditionalTestExpressionOperand1Action_1_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//operand2=Expression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//Expression
		public RuleCall getOperand2ExpressionParserRuleCall_1_2_0() { return cOperand2ExpressionParserRuleCall_1_2_0; }

		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//operand3=ConditionalExpression
		public Assignment getOperand3Assignment_1_4() { return cOperand3Assignment_1_4; }

		//ConditionalExpression
		public RuleCall getOperand3ConditionalExpressionParserRuleCall_1_4_0() { return cOperand3ConditionalExpressionParserRuleCall_1_4_0; }
	}

	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideLeftHandSideParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightHandSideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandSideExpressionParserRuleCall_2_0 = (RuleCall)cRightHandSideAssignment_2.eContents().get(0);
		
		/// * ASSIGNMENT EXPRESSIONS * / AssignmentExpression:
		//	leftHandSide=LeftHandSide operator=AssignmentOperator rightHandSide=Expression;
		@Override public ParserRule getRule() { return rule; }

		//leftHandSide=LeftHandSide operator=AssignmentOperator rightHandSide=Expression
		public Group getGroup() { return cGroup; }

		//leftHandSide=LeftHandSide
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }

		//LeftHandSide
		public RuleCall getLeftHandSideLeftHandSideParserRuleCall_0_0() { return cLeftHandSideLeftHandSideParserRuleCall_0_0; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorParserRuleCall_1_0() { return cOperatorAssignmentOperatorParserRuleCall_1_0; }

		//rightHandSide=Expression
		public Assignment getRightHandSideAssignment_2() { return cRightHandSideAssignment_2; }

		//Expression
		public RuleCall getRightHandSideExpressionParserRuleCall_2_0() { return cRightHandSideExpressionParserRuleCall_2_0; }
	}

	public class LeftHandSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LeftHandSide");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameLeftHandSideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureLeftHandSideParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LeftHandSide:
		//	NameLeftHandSide | FeatureLeftHandSide // ( index = Index )? |
		//	//  "(" LeftHandSide ")"
		//;
		@Override public ParserRule getRule() { return rule; }

		//NameLeftHandSide | FeatureLeftHandSide
		public Alternatives getAlternatives() { return cAlternatives; }

		//NameLeftHandSide
		public RuleCall getNameLeftHandSideParserRuleCall_0() { return cNameLeftHandSideParserRuleCall_0; }

		//FeatureLeftHandSide
		public RuleCall getFeatureLeftHandSideParserRuleCall_1() { return cFeatureLeftHandSideParserRuleCall_1; }
	}

	public class NameLeftHandSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NameLeftHandSide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		
		//NameLeftHandSide:
		//	target=PotentiallyAmbiguousQualifiedName index=Index?;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Moved the index property from LeftHandSide down to just NameLeftHandSide.
		//target=PotentiallyAmbiguousQualifiedName index=Index?
		public Group getGroup() { return cGroup; }

		//// CHANGE: Moved the index property from LeftHandSide down to just NameLeftHandSide.
		//target=PotentiallyAmbiguousQualifiedName
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//PotentiallyAmbiguousQualifiedName
		public RuleCall getTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0() { return cTargetPotentiallyAmbiguousQualifiedNameParserRuleCall_0_0; }

		//index=Index?
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//Index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }
	}

	public class FeatureLeftHandSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.FeatureLeftHandSide");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//FeatureLeftHandSide:
		//	expression=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Replaced the feature property of a FeatureLeftHandSide with expression.
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_0() { return cExpressionPrimaryExpressionParserRuleCall_0; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVerticalLineEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCircumflexAccentEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//AssignmentOperator:
		//	'=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>=';
		@Override public ParserRule getRule() { return rule; }

		//'=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//'*='
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//'/='
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//'%='
		public Keyword getPercentSignEqualsSignKeyword_5() { return cPercentSignEqualsSignKeyword_5; }

		//'&='
		public Keyword getAmpersandEqualsSignKeyword_6() { return cAmpersandEqualsSignKeyword_6; }

		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_7() { return cVerticalLineEqualsSignKeyword_7; }

		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_8() { return cCircumflexAccentEqualsSignKeyword_8; }

		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_9() { return cLessThanSignLessThanSignEqualsSignKeyword_9; }

		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_10() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_10; }

		//'>>>='
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_11; }
	}

	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.StatementSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementDocumentedStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		/// **************
		// * STATEMENTS *
		// ************** / StatementSequence Block:
		//	{Block} statement+=DocumentedStatement*
		@Override public ParserRule getRule() { return rule; }

		//{Block} statement+=DocumentedStatement*
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//statement+=DocumentedStatement*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//DocumentedStatement
		public RuleCall getStatementDocumentedStatementParserRuleCall_1_0() { return cStatementDocumentedStatementParserRuleCall_1_0; }
	}

	public class DocumentedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DocumentedStatement");
		private final RuleCall cAnnotatedStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DocumentedStatement AnnotatedStatement:
		//	AnnotatedStatement
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Made AnnotatedStatement a subtype of DocumentedStatement with annotations and a statement reference. 
		//AnnotatedStatement
		public RuleCall getAnnotatedStatementParserRuleCall() { return cAnnotatedStatementParserRuleCall; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInLineStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEmptyStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocalNameDeclarationStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSwitchStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWhileStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cForStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDoStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cBreakStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReturnStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAcceptStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cClassifyStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Statement:
		//	InLineStatement | BlockStatement | EmptyStatement | LocalNameDeclarationStatement | ExpressionStatement | IfStatement
		//	| SwitchStatement | WhileStatement | ForStatement | DoStatement | BreakStatement | ReturnStatement | AcceptStatement
		//	| ClassifyStatement;
		@Override public ParserRule getRule() { return rule; }

		//// AnnotatedStatement | 
		//InLineStatement | BlockStatement | EmptyStatement | LocalNameDeclarationStatement | ExpressionStatement | IfStatement |
		//SwitchStatement | WhileStatement | ForStatement | DoStatement | BreakStatement | ReturnStatement | AcceptStatement |
		//ClassifyStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//// AnnotatedStatement | 
		//InLineStatement
		public RuleCall getInLineStatementParserRuleCall_0() { return cInLineStatementParserRuleCall_0; }

		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_1() { return cBlockStatementParserRuleCall_1; }

		//EmptyStatement
		public RuleCall getEmptyStatementParserRuleCall_2() { return cEmptyStatementParserRuleCall_2; }

		//LocalNameDeclarationStatement
		public RuleCall getLocalNameDeclarationStatementParserRuleCall_3() { return cLocalNameDeclarationStatementParserRuleCall_3; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_4() { return cExpressionStatementParserRuleCall_4; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_5() { return cIfStatementParserRuleCall_5; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_6() { return cSwitchStatementParserRuleCall_6; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_7() { return cWhileStatementParserRuleCall_7; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_8() { return cForStatementParserRuleCall_8; }

		//DoStatement
		public RuleCall getDoStatementParserRuleCall_9() { return cDoStatementParserRuleCall_9; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_10() { return cBreakStatementParserRuleCall_10; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_11() { return cReturnStatementParserRuleCall_11; }

		//AcceptStatement
		public RuleCall getAcceptStatementParserRuleCall_12() { return cAcceptStatementParserRuleCall_12; }

		//ClassifyStatement
		public RuleCall getClassifyStatementParserRuleCall_13() { return cClassifyStatementParserRuleCall_13; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementDocumentedStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * BLOCK * / Block:
		//	{Block} '{' statement+=DocumentedStatement* '}';
		@Override public ParserRule getRule() { return rule; }

		//{Block} '{' statement+=DocumentedStatement* '}'
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statement+=DocumentedStatement*
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//DocumentedStatement
		public RuleCall getStatementDocumentedStatementParserRuleCall_2_0() { return cStatementDocumentedStatementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AnnotatedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AnnotatedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationSTATEMENT_ANNOTATIONTerminalRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		/// * ANNOTATED STATEMENTS * / AnnotatedStatement:
		//	documentation+=DOCUMENTATION_COMMENT?
		//	// CHANGE: Include text line in annotation statement.
		//	annotation+=STATEMENT_ANNOTATION*
		//	// ( '//@' annotation += Annotation ( '@' annotation += Annotation )+ '\r'? '\n' )*
		//	statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//documentation+=DOCUMENTATION_COMMENT? // CHANGE: Include text line in annotation statement.
		//annotation+=STATEMENT_ANNOTATION* // ( '//@' annotation += Annotation ( '@' annotation += Annotation )+ '\r'? '\n' )*
		//statement=Statement
		public Group getGroup() { return cGroup; }

		//documentation+=DOCUMENTATION_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOCUMENTATION_COMMENT
		public RuleCall getDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATION_COMMENTTerminalRuleCall_0_0; }

		//// CHANGE: Include text line in annotation statement.
		//annotation+=STATEMENT_ANNOTATION*
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//STATEMENT_ANNOTATION
		public RuleCall getAnnotationSTATEMENT_ANNOTATIONTerminalRuleCall_1_0() { return cAnnotationSTATEMENT_ANNOTATIONTerminalRuleCall_1_0; }

		//// ( '//@' annotation += Annotation ( '@' annotation += Annotation )+ '\r'? '\n' )*
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}

	public class InLineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.InLineStatement");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeINLINE_STATEMENTTerminalRuleCall_0 = (RuleCall)cCodeAssignment.eContents().get(0);
		
		/// *
		//Annotation : 
		//	identifier = ID ( '(' argument += Name ( ',' argument += Name )* ')' )?
		//;
		// * / / * IN-LINE STATEMENTS * / InLineStatement:
		//	code=INLINE_STATEMENT
		//	//'/ *@' 'inline' '(' language = Name ')' '* /'
		//;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Include all text lexically in one attribute of InLineStatement.
		//code=INLINE_STATEMENT
		public Assignment getCodeAssignment() { return cCodeAssignment; }

		//INLINE_STATEMENT
		public RuleCall getCodeINLINE_STATEMENTTerminalRuleCall_0() { return cCodeINLINE_STATEMENTTerminalRuleCall_0; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BlockStatement");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		/// * BLOCK STATEMENTS * / BlockStatement:
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }

		//block=Block
		public Assignment getBlockAssignment() { return cBlockAssignment; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_0() { return cBlockBlockParserRuleCall_0; }
	}

	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.EmptyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// * EMPTY STATEMENTS * / EmptyStatement:
		//	{EmptyStatement}
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//{EmptyStatement} ';'
		public Group getGroup() { return cGroup; }

		//{EmptyStatement}
		public Action getEmptyStatementAction_0() { return cEmptyStatementAction_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LocalNameDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LocalNameDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cLetKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Alternatives cAlternatives_0_0_3 = (Alternatives)cGroup_0_0.eContents().get(3);
		private final Assignment cIsAnyAssignment_0_0_3_0 = (Assignment)cAlternatives_0_0_3.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_0_0_3_0_0 = (Keyword)cIsAnyAssignment_0_0_3_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_0_3_1 = (Assignment)cAlternatives_0_0_3.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_0_0_3_1_0 = (RuleCall)cTypeNameAssignment_0_0_3_1.eContents().get(0);
		private final Assignment cHasMultiplicityAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_0_4_0 = (RuleCall)cHasMultiplicityAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Assignment cIsAnyAssignment_0_1_0_0 = (Assignment)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_0_1_0_0_0 = (Keyword)cIsAnyAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_1_0_1 = (Assignment)cAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_0_1_0_1_0 = (RuleCall)cTypeNameAssignment_0_1_0_1.eContents().get(0);
		private final Assignment cHasMultiplicityAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_1_0 = (RuleCall)cHasMultiplicityAssignment_0_1_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInitializationExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * LOCAL NAME DECLARATION STATEMENTS * / LocalNameDeclarationStatement:
		//	('let' name=Name ':' (isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? | (isAny?='any'
		//	| typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? name=Name)
		//	'=' expression=InitializationExpression ';';
		@Override public ParserRule getRule() { return rule; }

		//('let' name=Name ':' (isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? | (isAny?='any' |
		//typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? name=Name) '=' expression=InitializationExpression ';'
		public Group getGroup() { return cGroup; }

		//('let' name=Name ':' (isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? | (isAny?='any' |
		//typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? name=Name)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'let' name=Name ':' (isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'let'
		public Keyword getLetKeyword_0_0_0() { return cLetKeyword_0_0_0; }

		//name=Name
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_1_0() { return cNameNameParserRuleCall_0_0_1_0; }

		//':'
		public Keyword getColonKeyword_0_0_2() { return cColonKeyword_0_0_2; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_0_0_3() { return cAlternatives_0_0_3; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_0_0_3_0() { return cIsAnyAssignment_0_0_3_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_0_0_3_0_0() { return cIsAnyAnyKeyword_0_0_3_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_0_0_3_1() { return cTypeNameAssignment_0_0_3_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_0_0_3_1_0() { return cTypeNameQualifiedNameParserRuleCall_0_0_3_1_0; }

		//hasMultiplicity?=MultiplicityIndicator?
		public Assignment getHasMultiplicityAssignment_0_0_4() { return cHasMultiplicityAssignment_0_0_4; }

		//MultiplicityIndicator
		public RuleCall getHasMultiplicityMultiplicityIndicatorParserRuleCall_0_0_4_0() { return cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_0_4_0; }

		//(isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? name=Name
		public Group getGroup_0_1() { return cGroup_0_1; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_0_1_0_0() { return cIsAnyAssignment_0_1_0_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_0_1_0_0_0() { return cIsAnyAnyKeyword_0_1_0_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_0_1_0_1() { return cTypeNameAssignment_0_1_0_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_0_1_0_1_0() { return cTypeNameQualifiedNameParserRuleCall_0_1_0_1_0; }

		//hasMultiplicity?=MultiplicityIndicator?
		public Assignment getHasMultiplicityAssignment_0_1_1() { return cHasMultiplicityAssignment_0_1_1; }

		//MultiplicityIndicator
		public RuleCall getHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_1_0() { return cHasMultiplicityMultiplicityIndicatorParserRuleCall_0_1_1_0; }

		//name=Name
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_2_0() { return cNameNameParserRuleCall_0_1_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=InitializationExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InitializationExpression
		public RuleCall getExpressionInitializationExpressionParserRuleCall_2_0() { return cExpressionInitializationExpressionParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InitializationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.InitializationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceInitializationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstanceInitializationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InitializationExpression Expression:
		//	Expression
		//	| SequenceInitializationExpression
		//	| InstanceInitializationExpression
		@Override public ParserRule getRule() { return rule; }

		//Expression | SequenceInitializationExpression | InstanceInitializationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//SequenceInitializationExpression
		public RuleCall getSequenceInitializationExpressionParserRuleCall_1() { return cSequenceInitializationExpressionParserRuleCall_1; }

		//InstanceInitializationExpression
		public RuleCall getInstanceInitializationExpressionParserRuleCall_2() { return cInstanceInitializationExpressionParserRuleCall_2; }
	}

	public class InstanceInitializationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.InstanceInitializationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTupleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_0 = (RuleCall)cTupleAssignment_1.eContents().get(0);
		
		//InstanceInitializationExpression InstanceCreationExpression:
		//	'new' tuple=Tuple
		@Override public ParserRule getRule() { return rule; }

		//'new' tuple=Tuple
		public Group getGroup() { return cGroup; }

		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//tuple=Tuple
		public Assignment getTupleAssignment_1() { return cTupleAssignment_1; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_0() { return cTupleTupleParserRuleCall_1_0; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// * EXPRESSION STATEMENTS * / ExpressionStatement:
		//	expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression ';'
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNonFinalClausesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNonFinalClausesConcurrentClausesParserRuleCall_1_0 = (RuleCall)cNonFinalClausesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cIfKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNonFinalClausesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNonFinalClausesConcurrentClausesParserRuleCall_2_2_0 = (RuleCall)cNonFinalClausesAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFinalClauseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinalClauseBlockParserRuleCall_3_1_0 = (RuleCall)cFinalClauseAssignment_3_1.eContents().get(0);
		
		/// * IF STATEMENTS * / IfStatement:
		//	'if' nonFinalClauses+=ConcurrentClauses ('else' 'if' nonFinalClauses+=ConcurrentClauses)* ('else'
		//	finalClause=Block)?;
		@Override public ParserRule getRule() { return rule; }

		//'if' nonFinalClauses+=ConcurrentClauses ('else' 'if' nonFinalClauses+=ConcurrentClauses)* ('else' finalClause=Block)?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//nonFinalClauses+=ConcurrentClauses
		public Assignment getNonFinalClausesAssignment_1() { return cNonFinalClausesAssignment_1; }

		//ConcurrentClauses
		public RuleCall getNonFinalClausesConcurrentClausesParserRuleCall_1_0() { return cNonFinalClausesConcurrentClausesParserRuleCall_1_0; }

		//('else' 'if' nonFinalClauses+=ConcurrentClauses)*
		public Group getGroup_2() { return cGroup_2; }

		//'else'
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }

		//'if'
		public Keyword getIfKeyword_2_1() { return cIfKeyword_2_1; }

		//nonFinalClauses+=ConcurrentClauses
		public Assignment getNonFinalClausesAssignment_2_2() { return cNonFinalClausesAssignment_2_2; }

		//ConcurrentClauses
		public RuleCall getNonFinalClausesConcurrentClausesParserRuleCall_2_2_0() { return cNonFinalClausesConcurrentClausesParserRuleCall_2_2_0; }

		//('else' finalClause=Block)?
		public Group getGroup_3() { return cGroup_3; }

		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//finalClause=Block
		public Assignment getFinalClauseAssignment_3_1() { return cFinalClauseAssignment_3_1; }

		//Block
		public RuleCall getFinalClauseBlockParserRuleCall_3_1_0() { return cFinalClauseBlockParserRuleCall_3_1_0; }
	}

	public class ConcurrentClausesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ConcurrentClauses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClauseNonFinalClauseParserRuleCall_0_0 = (RuleCall)cClauseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cClauseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cClauseNonFinalClauseParserRuleCall_1_2_0 = (RuleCall)cClauseAssignment_1_2.eContents().get(0);
		
		//ConcurrentClauses:
		//	clause+=NonFinalClause ('or' 'if' clause+=NonFinalClause)*;
		@Override public ParserRule getRule() { return rule; }

		//clause+=NonFinalClause ('or' 'if' clause+=NonFinalClause)*
		public Group getGroup() { return cGroup; }

		//clause+=NonFinalClause
		public Assignment getClauseAssignment_0() { return cClauseAssignment_0; }

		//NonFinalClause
		public RuleCall getClauseNonFinalClauseParserRuleCall_0_0() { return cClauseNonFinalClauseParserRuleCall_0_0; }

		//('or' 'if' clause+=NonFinalClause)*
		public Group getGroup_1() { return cGroup_1; }

		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//'if'
		public Keyword getIfKeyword_1_1() { return cIfKeyword_1_1; }

		//clause+=NonFinalClause
		public Assignment getClauseAssignment_1_2() { return cClauseAssignment_1_2; }

		//NonFinalClause
		public RuleCall getClauseNonFinalClauseParserRuleCall_1_2_0() { return cClauseNonFinalClauseParserRuleCall_1_2_0; }
	}

	public class NonFinalClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NonFinalClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBlockParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//NonFinalClause:
		//	'(' condition=Expression ')' body=Block;
		@Override public ParserRule getRule() { return rule; }

		//'(' condition=Expression ')' body=Block
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//body=Block
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_3_0() { return cBodyBlockParserRuleCall_3_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNonDefaultClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNonDefaultClauseSwitchClauseParserRuleCall_5_0 = (RuleCall)cNonDefaultClauseAssignment_5.eContents().get(0);
		private final Assignment cDefaultClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultClauseSwitchDefaultClauseParserRuleCall_6_0 = (RuleCall)cDefaultClauseAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// * SWITCH STATEMENTS * / SwitchStatement:
		//	'switch' '(' expression=Expression ')'
		//	'{' nonDefaultClause+=SwitchClause*
		//	defaultClause=SwitchDefaultClause? '}';
		@Override public ParserRule getRule() { return rule; }

		//'switch' '(' expression=Expression ')' '{' nonDefaultClause+=SwitchClause* defaultClause=SwitchDefaultClause? '}'
		public Group getGroup() { return cGroup; }

		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//nonDefaultClause+=SwitchClause*
		public Assignment getNonDefaultClauseAssignment_5() { return cNonDefaultClauseAssignment_5; }

		//SwitchClause
		public RuleCall getNonDefaultClauseSwitchClauseParserRuleCall_5_0() { return cNonDefaultClauseSwitchClauseParserRuleCall_5_0; }

		//defaultClause=SwitchDefaultClause?
		public Assignment getDefaultClauseAssignment_6() { return cDefaultClauseAssignment_6; }

		//SwitchDefaultClause
		public RuleCall getDefaultClauseSwitchDefaultClauseParserRuleCall_6_0() { return cDefaultClauseSwitchDefaultClauseParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SwitchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SwitchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseSwitchCaseParserRuleCall_0_0 = (RuleCall)cCaseAssignment_0.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseSwitchCaseParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockNonEmptyStatementSequenceParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//SwitchClause:
		//	case+=SwitchCase case+=SwitchCase*
		//	block=NonEmptyStatementSequence;
		@Override public ParserRule getRule() { return rule; }

		//case+=SwitchCase case+=SwitchCase* block=NonEmptyStatementSequence
		public Group getGroup() { return cGroup; }

		//case+=SwitchCase
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }

		//SwitchCase
		public RuleCall getCaseSwitchCaseParserRuleCall_0_0() { return cCaseSwitchCaseParserRuleCall_0_0; }

		//case+=SwitchCase*
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//SwitchCase
		public RuleCall getCaseSwitchCaseParserRuleCall_1_0() { return cCaseSwitchCaseParserRuleCall_1_0; }

		//block=NonEmptyStatementSequence
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//NonEmptyStatementSequence
		public RuleCall getBlockNonEmptyStatementSequenceParserRuleCall_2_0() { return cBlockNonEmptyStatementSequenceParserRuleCall_2_0; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SwitchCase Expression:
		//	'case' Expression ':'
		@Override public ParserRule getRule() { return rule; }

		//'case' Expression ':'
		public Group getGroup() { return cGroup; }

		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}

	public class SwitchDefaultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SwitchDefaultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNonEmptyStatementSequenceParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SwitchDefaultClause Block:
		//	'default' ':' NonEmptyStatementSequence
		@Override public ParserRule getRule() { return rule; }

		//'default' ':' NonEmptyStatementSequence
		public Group getGroup() { return cGroup; }

		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//NonEmptyStatementSequence
		public RuleCall getNonEmptyStatementSequenceParserRuleCall_2() { return cNonEmptyStatementSequenceParserRuleCall_2; }
	}

	public class NonEmptyStatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NonEmptyStatementSequence");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementDocumentedStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//NonEmptyStatementSequence Block:
		//	statement+=DocumentedStatement+
		@Override public ParserRule getRule() { return rule; }

		//statement+=DocumentedStatement+
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//DocumentedStatement
		public RuleCall getStatementDocumentedStatementParserRuleCall_0() { return cStatementDocumentedStatementParserRuleCall_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		/// * WHILE STATEMENTS * / WhileStatement:
		//	'while' '(' condition=Expression ')' body=Block;
		@Override public ParserRule getRule() { return rule; }

		//'while' '(' condition=Expression ')' body=Block
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}

	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * DO STATEMENTS * / DoStatement:
		//	'do' body=Block 'while' '(' condition=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//'do' body=Block 'while' '(' condition=Expression ')' ';'
		public Group getGroup() { return cGroup; }

		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }

		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableDefinitionLoopVariableDefinitionParserRuleCall_2_0 = (RuleCall)cVariableDefinitionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableDefinitionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableDefinitionLoopVariableDefinitionParserRuleCall_3_1_0 = (RuleCall)cVariableDefinitionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		/// * FOR STATEMENTS * / ForStatement:
		//	'for' '(' variableDefinition+=LoopVariableDefinition (',' variableDefinition+=LoopVariableDefinition)* ')'
		//	body=Block;
		@Override public ParserRule getRule() { return rule; }

		//'for' '(' variableDefinition+=LoopVariableDefinition (',' variableDefinition+=LoopVariableDefinition)* ')' body=Block
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variableDefinition+=LoopVariableDefinition
		public Assignment getVariableDefinitionAssignment_2() { return cVariableDefinitionAssignment_2; }

		//LoopVariableDefinition
		public RuleCall getVariableDefinitionLoopVariableDefinitionParserRuleCall_2_0() { return cVariableDefinitionLoopVariableDefinitionParserRuleCall_2_0; }

		//(',' variableDefinition+=LoopVariableDefinition)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variableDefinition+=LoopVariableDefinition
		public Assignment getVariableDefinitionAssignment_3_1() { return cVariableDefinitionAssignment_3_1; }

		//LoopVariableDefinition
		public RuleCall getVariableDefinitionLoopVariableDefinitionParserRuleCall_3_1_0() { return cVariableDefinitionLoopVariableDefinitionParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=Block
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_5_0() { return cBodyBlockParserRuleCall_5_0; }
	}

	public class LoopVariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.LoopVariableDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Assignment cTypeIsInferredAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeIsInferredInKeyword_0_1_0 = (Keyword)cTypeIsInferredAssignment_0_1.eContents().get(0);
		private final Assignment cExpression1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpression1ExpressionParserRuleCall_0_2_0 = (RuleCall)cExpression1Assignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cFullStopFullStopKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cExpression2Assignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_0_3_1_0 = (RuleCall)cExpression2Assignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cIsAnyAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cIsAnyAnyKeyword_1_0_0_0 = (Keyword)cIsAnyAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeNameQualifiedNameParserRuleCall_1_0_1_0 = (RuleCall)cTypeNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableNameParserRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression1Assignment_1_3.eContents().get(0);
		
		//LoopVariableDefinition:
		//	variable=Name typeIsInferred?='in' expression1=Expression ('..' expression2=Expression)? | (isAny?='any' |
		//	typeName=QualifiedName) variable=Name ':' expression1=Expression;
		@Override public ParserRule getRule() { return rule; }

		//// CHANGE: Added isAny attribute to LoopVariableDefinition in order to allow Xtext serialization.
		//// NOTE: Default for typeIsInferred must be false.
		//variable=Name typeIsInferred?='in' expression1=Expression ('..' expression2=Expression)? | (isAny?='any' |
		//typeName=QualifiedName) variable=Name ':' expression1=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//// CHANGE: Added isAny attribute to LoopVariableDefinition in order to allow Xtext serialization.
		//// NOTE: Default for typeIsInferred must be false.
		//variable=Name typeIsInferred?='in' expression1=Expression ('..' expression2=Expression)?
		public Group getGroup_0() { return cGroup_0; }

		//// CHANGE: Added isAny attribute to LoopVariableDefinition in order to allow Xtext serialization.
		//// NOTE: Default for typeIsInferred must be false.
		//variable=Name
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//Name
		public RuleCall getVariableNameParserRuleCall_0_0_0() { return cVariableNameParserRuleCall_0_0_0; }

		//typeIsInferred?='in'
		public Assignment getTypeIsInferredAssignment_0_1() { return cTypeIsInferredAssignment_0_1; }

		//'in'
		public Keyword getTypeIsInferredInKeyword_0_1_0() { return cTypeIsInferredInKeyword_0_1_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_0_2() { return cExpression1Assignment_0_2; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_0_2_0() { return cExpression1ExpressionParserRuleCall_0_2_0; }

		//('..' expression2=Expression)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//'..'
		public Keyword getFullStopFullStopKeyword_0_3_0() { return cFullStopFullStopKeyword_0_3_0; }

		//expression2=Expression
		public Assignment getExpression2Assignment_0_3_1() { return cExpression2Assignment_0_3_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_0_3_1_0() { return cExpression2ExpressionParserRuleCall_0_3_1_0; }

		//(isAny?='any' | typeName=QualifiedName) variable=Name ':' expression1=Expression
		public Group getGroup_1() { return cGroup_1; }

		//(isAny?='any' | typeName=QualifiedName)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//isAny?='any'
		public Assignment getIsAnyAssignment_1_0_0() { return cIsAnyAssignment_1_0_0; }

		//'any'
		public Keyword getIsAnyAnyKeyword_1_0_0_0() { return cIsAnyAnyKeyword_1_0_0_0; }

		//typeName=QualifiedName
		public Assignment getTypeNameAssignment_1_0_1() { return cTypeNameAssignment_1_0_1; }

		//QualifiedName
		public RuleCall getTypeNameQualifiedNameParserRuleCall_1_0_1_0() { return cTypeNameQualifiedNameParserRuleCall_1_0_1_0; }

		//variable=Name
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//Name
		public RuleCall getVariableNameParserRuleCall_1_1_0() { return cVariableNameParserRuleCall_1_1_0; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1_3() { return cExpression1Assignment_1_3; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_3_0() { return cExpression1ExpressionParserRuleCall_1_3_0; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// * BREAK STATEMENTS * / BreakStatement:
		//	{BreakStatement}
		//	'break' ';';
		@Override public ParserRule getRule() { return rule; }

		//{BreakStatement} 'break' ';'
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * RETURN STATEMENTS * / ReturnStatement:
		//	{ReturnStatement}
		//	'return' expression=Expression? ';';
		@Override public ParserRule getRule() { return rule; }

		//{ReturnStatement} 'return' expression=Expression? ';'
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AcceptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AcceptStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAcceptBlockAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAcceptBlockAcceptClauseParserRuleCall_0_0_0 = (RuleCall)cAcceptBlockAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAcceptBlockAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAcceptBlockAcceptBlockParserRuleCall_1_0_0 = (RuleCall)cAcceptBlockAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAcceptBlockAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAcceptBlockAcceptBlockParserRuleCall_1_1_1_0 = (RuleCall)cAcceptBlockAssignment_1_1_1.eContents().get(0);
		
		/// * ACCEPT STATEMENTS * / AcceptStatement:
		//	acceptBlock+=AcceptClause ';' | acceptBlock+=AcceptBlock ('or' acceptBlock+=AcceptBlock)*;
		@Override public ParserRule getRule() { return rule; }

		//acceptBlock+=AcceptClause ';' | acceptBlock+=AcceptBlock ('or' acceptBlock+=AcceptBlock)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//acceptBlock+=AcceptClause ';'
		public Group getGroup_0() { return cGroup_0; }

		//acceptBlock+=AcceptClause
		public Assignment getAcceptBlockAssignment_0_0() { return cAcceptBlockAssignment_0_0; }

		//AcceptClause
		public RuleCall getAcceptBlockAcceptClauseParserRuleCall_0_0_0() { return cAcceptBlockAcceptClauseParserRuleCall_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//acceptBlock+=AcceptBlock ('or' acceptBlock+=AcceptBlock)*
		public Group getGroup_1() { return cGroup_1; }

		//acceptBlock+=AcceptBlock
		public Assignment getAcceptBlockAssignment_1_0() { return cAcceptBlockAssignment_1_0; }

		//AcceptBlock
		public RuleCall getAcceptBlockAcceptBlockParserRuleCall_1_0_0() { return cAcceptBlockAcceptBlockParserRuleCall_1_0_0; }

		//('or' acceptBlock+=AcceptBlock)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'or'
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//acceptBlock+=AcceptBlock
		public Assignment getAcceptBlockAssignment_1_1_1() { return cAcceptBlockAssignment_1_1_1; }

		//AcceptBlock
		public RuleCall getAcceptBlockAcceptBlockParserRuleCall_1_1_1_0() { return cAcceptBlockAcceptBlockParserRuleCall_1_1_1_0; }
	}

	public class AcceptBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AcceptBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAcceptClauseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//AcceptBlock:
		//	AcceptClause block=Block;
		@Override public ParserRule getRule() { return rule; }

		//AcceptClause block=Block
		public Group getGroup() { return cGroup; }

		//AcceptClause
		public RuleCall getAcceptClauseParserRuleCall_0() { return cAcceptClauseParserRuleCall_0; }

		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class AcceptClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.AcceptClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAcceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSignalNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignalNamesQualifiedNameListParserRuleCall_3_0 = (RuleCall)cSignalNamesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AcceptClause AcceptBlock:
		//	'accept' '(' (name=Name ':')? signalNames=QualifiedNameList ')'
		@Override public ParserRule getRule() { return rule; }

		//'accept' '(' (name=Name ':')? signalNames=QualifiedNameList ')'
		public Group getGroup() { return cGroup; }

		//'accept'
		public Keyword getAcceptKeyword_0() { return cAcceptKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(name=Name ':')?
		public Group getGroup_2() { return cGroup_2; }

		//name=Name
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_0() { return cNameNameParserRuleCall_2_0_0; }

		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//signalNames=QualifiedNameList
		public Assignment getSignalNamesAssignment_3() { return cSignalNamesAssignment_3; }

		//QualifiedNameList
		public RuleCall getSignalNamesQualifiedNameListParserRuleCall_3_0() { return cSignalNamesQualifiedNameListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ClassifyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassifyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cFromListAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cFromListClassificationFromClauseParserRuleCall_2_0_0_0 = (RuleCall)cFromListAssignment_2_0_0.eContents().get(0);
		private final Assignment cToListAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cToListClassificationToClauseParserRuleCall_2_0_1_0 = (RuleCall)cToListAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIsReclassifyAllAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cIsReclassifyAllReclassifyAllClauseParserRuleCall_2_1_0_0 = (RuleCall)cIsReclassifyAllAssignment_2_1_0.eContents().get(0);
		private final Assignment cToListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cToListClassificationToClauseParserRuleCall_2_1_1_0 = (RuleCall)cToListAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * CLASSIFY STATEMENTS * / ClassifyStatement:
		//	'classify' expression=Expression (fromList=ClassificationFromClause toList=ClassificationToClause? |
		//	isReclassifyAll?=ReclassifyAllClause? toList=ClassificationToClause)
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//'classify' expression=Expression (fromList=ClassificationFromClause toList=ClassificationToClause? |
		//isReclassifyAll?=ReclassifyAllClause? toList=ClassificationToClause) ';'
		public Group getGroup() { return cGroup; }

		//'classify'
		public Keyword getClassifyKeyword_0() { return cClassifyKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//(fromList=ClassificationFromClause toList=ClassificationToClause? | isReclassifyAll?=ReclassifyAllClause?
		//toList=ClassificationToClause)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//fromList=ClassificationFromClause toList=ClassificationToClause?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//fromList=ClassificationFromClause
		public Assignment getFromListAssignment_2_0_0() { return cFromListAssignment_2_0_0; }

		//ClassificationFromClause
		public RuleCall getFromListClassificationFromClauseParserRuleCall_2_0_0_0() { return cFromListClassificationFromClauseParserRuleCall_2_0_0_0; }

		//toList=ClassificationToClause?
		public Assignment getToListAssignment_2_0_1() { return cToListAssignment_2_0_1; }

		//ClassificationToClause
		public RuleCall getToListClassificationToClauseParserRuleCall_2_0_1_0() { return cToListClassificationToClauseParserRuleCall_2_0_1_0; }

		//isReclassifyAll?=ReclassifyAllClause? toList=ClassificationToClause
		public Group getGroup_2_1() { return cGroup_2_1; }

		//isReclassifyAll?=ReclassifyAllClause?
		public Assignment getIsReclassifyAllAssignment_2_1_0() { return cIsReclassifyAllAssignment_2_1_0; }

		//ReclassifyAllClause
		public RuleCall getIsReclassifyAllReclassifyAllClauseParserRuleCall_2_1_0_0() { return cIsReclassifyAllReclassifyAllClauseParserRuleCall_2_1_0_0; }

		//toList=ClassificationToClause
		public Assignment getToListAssignment_2_1_1() { return cToListAssignment_2_1_1; }

		//ClassificationToClause
		public RuleCall getToListClassificationToClauseParserRuleCall_2_1_1_0() { return cToListClassificationToClauseParserRuleCall_2_1_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ClassificationFromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassificationFromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ClassificationFromClause QualifiedNameList:
		//	'from' QualifiedNameList
		@Override public ParserRule getRule() { return rule; }

		//'from' QualifiedNameList
		public Group getGroup() { return cGroup; }

		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//QualifiedNameList
		public RuleCall getQualifiedNameListParserRuleCall_1() { return cQualifiedNameListParserRuleCall_1; }
	}

	public class ClassificationToClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ClassificationToClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ClassificationToClause QualifiedNameList:
		//	'to' QualifiedNameList
		@Override public ParserRule getRule() { return rule; }

		//'to' QualifiedNameList
		public Group getGroup() { return cGroup; }

		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }

		//QualifiedNameList
		public RuleCall getQualifiedNameListParserRuleCall_1() { return cQualifiedNameListParserRuleCall_1; }
	}

	public class ReclassifyAllClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ReclassifyAllClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReclassifyAllClause:
		//	'from' '*';
		@Override public ParserRule getRule() { return rule; }

		//'from' '*'
		public Group getGroup() { return cGroup; }

		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class QualifiedNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.QualifiedNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//QualifiedNameList:
		//	name+=QualifiedName (',' name+=QualifiedName)*;
		@Override public ParserRule getRule() { return rule; }

		//name+=QualifiedName (',' name+=QualifiedName)*
		public Group getGroup() { return cGroup; }

		//name+=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }

		//(',' name+=QualifiedName)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=QualifiedName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_0; }
	}
	
	
	private final UnitDefinitionElements pUnitDefinition;
	private final StereotypeAnnotationElements pStereotypeAnnotation;
	private final TaggedValueListElements pTaggedValueList;
	private final TaggedValueElements pTaggedValue;
	private final NamespaceDeclarationElements pNamespaceDeclaration;
	private final ImportDeclarationElements pImportDeclaration;
	private final ElementImportReferenceElements pElementImportReference;
	private final PackageImportReferenceElements pPackageImportReference;
	private final PackageImportQualifiedNameElements pPackageImportQualifiedName;
	private final ImportVisibilityIndicatorElements pImportVisibilityIndicator;
	private final NamespaceDefinitionElements pNamespaceDefinition;
	private final VisibilityIndicatorElements pVisibilityIndicator;
	private final PackageDefinitionElements pPackageDefinition;
	private final PackageDefinitionOrStubElements pPackageDefinitionOrStub;
	private final PackagedElementElements pPackagedElement;
	private final PackagedElementDefinitionElements pPackagedElementDefinition;
	private final ClassifierDefinitionElements pClassifierDefinition;
	private final ClassifierDefinitionOrStubElements pClassifierDefinitionOrStub;
	private final ClassifierSignatureElements pClassifierSignature;
	private final ClassifierTemplateParameterElements pClassifierTemplateParameter;
	private final ClassifierTemplateParameterDefinitionElements pClassifierTemplateParameterDefinition;
	private final TemplateParameterConstraintElements pTemplateParameterConstraint;
	private final SpecializationClauseElements pSpecializationClause;
	private final ClassDeclarationElements pClassDeclaration;
	private final ClassDefinitionElements pClassDefinition;
	private final ClassDefinitionOrStubElements pClassDefinitionOrStub;
	private final ClassMemberElements pClassMember;
	private final ClassMemberDefinitionElements pClassMemberDefinition;
	private final ActiveClassDeclarationElements pActiveClassDeclaration;
	private final ActiveClassDefinitionElements pActiveClassDefinition;
	private final ActiveClassDefinitionOrStubElements pActiveClassDefinitionOrStub;
	private final BehaviorClauseElements pBehaviorClause;
	private final ActiveClassMemberElements pActiveClassMember;
	private final ActiveClassMemberDefinitionElements pActiveClassMemberDefinition;
	private final DataTypeDeclarationElements pDataTypeDeclaration;
	private final DataTypeDefinitionElements pDataTypeDefinition;
	private final DataTypeDefinitionOrStubElements pDataTypeDefinitionOrStub;
	private final StructuredMemberElements pStructuredMember;
	private final AssociationDeclarationElements pAssociationDeclaration;
	private final AssociationDefinitionElements pAssociationDefinition;
	private final AssociationDefinitionOrStubElements pAssociationDefinitionOrStub;
	private final EnumerationDeclarationElements pEnumerationDeclaration;
	private final EnumerationDefinitionElements pEnumerationDefinition;
	private final EnumerationDefinitionOrStubElements pEnumerationDefinitionOrStub;
	private final EnumerationLiteralNameElements pEnumerationLiteralName;
	private final EnumerationLiteralNameDefinitionElements pEnumerationLiteralNameDefinition;
	private final SignalDeclarationElements pSignalDeclaration;
	private final SignalDefinitionElements pSignalDefinition;
	private final SignalDefinitionOrStubElements pSignalDefinitionOrStub;
	private final ActivityDeclarationElements pActivityDeclaration;
	private final ActivityDefinitionElements pActivityDefinition;
	private final ActivityDefinitionOrStubElements pActivityDefinitionOrStub;
	private final FormalParameterElements pFormalParameter;
	private final FormalParameterDefinitionElements pFormalParameterDefinition;
	private final ReturnParameterElements pReturnParameter;
	private final ReturnParameterDefinitionElements pReturnParameterDefinition;
	private final ParameterDirectionElements pParameterDirection;
	private final FeatureDefinitionOrStubElements pFeatureDefinitionOrStub;
	private final ActiveFeatureDefinitionOrStubElements pActiveFeatureDefinitionOrStub;
	private final PropertyDefinitionElements pPropertyDefinition;
	private final AttributeDefinitionElements pAttributeDefinition;
	private final AttributeInitializerElements pAttributeInitializer;
	private final PropertyDeclarationElements pPropertyDeclaration;
	private final TypePartElements pTypePart;
	private final UnlimitedNaturalLiteralElements pUnlimitedNaturalLiteral;
	private final OperationDeclarationElements pOperationDeclaration;
	private final OperationDefinitionOrStubElements pOperationDefinitionOrStub;
	private final RedefinitionClauseElements pRedefinitionClause;
	private final ReceptionDefinitionElements pReceptionDefinition;
	private final SignalReceptionDeclarationElements pSignalReceptionDeclaration;
	private final SignalReceptionDefinitionOrStubElements pSignalReceptionDefinitionOrStub;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final PotentiallyAmbiguousQualifiedNameElements pPotentiallyAmbiguousQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final UnqualifiedNameElements pUnqualifiedName;
	private final NameBindingElements pNameBinding;
	private final TemplateBindingElements pTemplateBinding;
	private final PositionalTemplateBindingElements pPositionalTemplateBinding;
	private final NamedTemplateBindingElements pNamedTemplateBinding;
	private final TemplateParameterSubstitutionElements pTemplateParameterSubstitution;
	private final ExpressionElements pExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BaseExpressionElements pBaseExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final UnboundedLiteralExpressionElements pUnboundedLiteralExpression;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final NameExpressionElements pNameExpression;
	private final ThisExpressionElements pThisExpression;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final BehaviorInvocationExpressionElements pBehaviorInvocationExpression;
	private final TupleElements pTuple;
	private final PositionalTupleExpressionListElements pPositionalTupleExpressionList;
	private final NamedTupleExpressionListElements pNamedTupleExpressionList;
	private final NamedExpressionElements pNamedExpression;
	private final SuperInvocationExpressionElements pSuperInvocationExpression;
	private final InstanceCreationOrSequenceConstructionExpressionElements pInstanceCreationOrSequenceConstructionExpression;
	private final LinkOperationExpressionElements pLinkOperationExpression;
	private final LinkOperationElements pLinkOperation;
	private final LinkOperationTupleElements pLinkOperationTuple;
	private final IndexedNamedTupleExpressionListElements pIndexedNamedTupleExpressionList;
	private final IndexedNamedExpressionElements pIndexedNamedExpression;
	private final ClassExtentExpressionElements pClassExtentExpression;
	private final SequenceConstructionExpressionElements pSequenceConstructionExpression;
	private final MultiplicityIndicatorElements pMultiplicityIndicator;
	private final SequenceElementsElements pSequenceElements;
	private final SequenceRangeElements pSequenceRange;
	private final SequenceExpressionListElements pSequenceExpressionList;
	private final SequenceElementElements pSequenceElement;
	private final SequenceInitializationExpressionElements pSequenceInitializationExpression;
	private final IndexElements pIndex;
	private final SequenceOperationOrReductionOrExpansionExpressionElements pSequenceOperationOrReductionOrExpansionExpression;
	private final PrefixExpressionElements pPrefixExpression;
	private final AffixOperatorElements pAffixOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final PostfixOrCastExpressionElements pPostfixOrCastExpression;
	private final PostfixExpressionElements pPostfixExpression;
	private final NonPostfixNonCastUnaryExpressionElements pNonPostfixNonCastUnaryExpression;
	private final BooleanUnaryExpressionElements pBooleanUnaryExpression;
	private final BitStringUnaryExpressionElements pBitStringUnaryExpression;
	private final NumericUnaryExpressionElements pNumericUnaryExpression;
	private final NumericUnaryOperatorElements pNumericUnaryOperator;
	private final IsolationExpressionElements pIsolationExpression;
	private final CastExpressionElements pCastExpression;
	private final CastCompletionElements pCastCompletion;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final ShiftExpressionElements pShiftExpression;
	private final ShiftOperatorElements pShiftOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final ClassificationExpressionElements pClassificationExpression;
	private final ClassificationOperatorElements pClassificationOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final AndExpressionElements pAndExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final LeftHandSideElements pLeftHandSide;
	private final NameLeftHandSideElements pNameLeftHandSide;
	private final FeatureLeftHandSideElements pFeatureLeftHandSide;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final StatementSequenceElements pStatementSequence;
	private final DocumentedStatementElements pDocumentedStatement;
	private final StatementElements pStatement;
	private final BlockElements pBlock;
	private final AnnotatedStatementElements pAnnotatedStatement;
	private final InLineStatementElements pInLineStatement;
	private final BlockStatementElements pBlockStatement;
	private final EmptyStatementElements pEmptyStatement;
	private final LocalNameDeclarationStatementElements pLocalNameDeclarationStatement;
	private final InitializationExpressionElements pInitializationExpression;
	private final InstanceInitializationExpressionElements pInstanceInitializationExpression;
	private final ExpressionStatementElements pExpressionStatement;
	private final IfStatementElements pIfStatement;
	private final ConcurrentClausesElements pConcurrentClauses;
	private final NonFinalClauseElements pNonFinalClause;
	private final SwitchStatementElements pSwitchStatement;
	private final SwitchClauseElements pSwitchClause;
	private final SwitchCaseElements pSwitchCase;
	private final SwitchDefaultClauseElements pSwitchDefaultClause;
	private final NonEmptyStatementSequenceElements pNonEmptyStatementSequence;
	private final WhileStatementElements pWhileStatement;
	private final DoStatementElements pDoStatement;
	private final ForStatementElements pForStatement;
	private final LoopVariableDefinitionElements pLoopVariableDefinition;
	private final BreakStatementElements pBreakStatement;
	private final ReturnStatementElements pReturnStatement;
	private final AcceptStatementElements pAcceptStatement;
	private final AcceptBlockElements pAcceptBlock;
	private final AcceptClauseElements pAcceptClause;
	private final ClassifyStatementElements pClassifyStatement;
	private final ClassificationFromClauseElements pClassificationFromClause;
	private final ClassificationToClauseElements pClassificationToClause;
	private final ReclassifyAllClauseElements pReclassifyAllClause;
	private final QualifiedNameListElements pQualifiedNameList;
	private final TerminalRule tBOOLEAN_VALUE;
	private final TerminalRule tNATURAL_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tSTATEMENT_ANNOTATION;
	private final TerminalRule tINLINE_STATEMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public AlfGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pUnitDefinition = new UnitDefinitionElements();
		this.pStereotypeAnnotation = new StereotypeAnnotationElements();
		this.pTaggedValueList = new TaggedValueListElements();
		this.pTaggedValue = new TaggedValueElements();
		this.pNamespaceDeclaration = new NamespaceDeclarationElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pElementImportReference = new ElementImportReferenceElements();
		this.pPackageImportReference = new PackageImportReferenceElements();
		this.pPackageImportQualifiedName = new PackageImportQualifiedNameElements();
		this.pImportVisibilityIndicator = new ImportVisibilityIndicatorElements();
		this.pNamespaceDefinition = new NamespaceDefinitionElements();
		this.pVisibilityIndicator = new VisibilityIndicatorElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pPackageDefinitionOrStub = new PackageDefinitionOrStubElements();
		this.pPackagedElement = new PackagedElementElements();
		this.pPackagedElementDefinition = new PackagedElementDefinitionElements();
		this.pClassifierDefinition = new ClassifierDefinitionElements();
		this.pClassifierDefinitionOrStub = new ClassifierDefinitionOrStubElements();
		this.pClassifierSignature = new ClassifierSignatureElements();
		this.pClassifierTemplateParameter = new ClassifierTemplateParameterElements();
		this.pClassifierTemplateParameterDefinition = new ClassifierTemplateParameterDefinitionElements();
		this.pTemplateParameterConstraint = new TemplateParameterConstraintElements();
		this.pSpecializationClause = new SpecializationClauseElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pClassDefinition = new ClassDefinitionElements();
		this.pClassDefinitionOrStub = new ClassDefinitionOrStubElements();
		this.pClassMember = new ClassMemberElements();
		this.pClassMemberDefinition = new ClassMemberDefinitionElements();
		this.pActiveClassDeclaration = new ActiveClassDeclarationElements();
		this.pActiveClassDefinition = new ActiveClassDefinitionElements();
		this.pActiveClassDefinitionOrStub = new ActiveClassDefinitionOrStubElements();
		this.pBehaviorClause = new BehaviorClauseElements();
		this.pActiveClassMember = new ActiveClassMemberElements();
		this.pActiveClassMemberDefinition = new ActiveClassMemberDefinitionElements();
		this.pDataTypeDeclaration = new DataTypeDeclarationElements();
		this.pDataTypeDefinition = new DataTypeDefinitionElements();
		this.pDataTypeDefinitionOrStub = new DataTypeDefinitionOrStubElements();
		this.pStructuredMember = new StructuredMemberElements();
		this.pAssociationDeclaration = new AssociationDeclarationElements();
		this.pAssociationDefinition = new AssociationDefinitionElements();
		this.pAssociationDefinitionOrStub = new AssociationDefinitionOrStubElements();
		this.pEnumerationDeclaration = new EnumerationDeclarationElements();
		this.pEnumerationDefinition = new EnumerationDefinitionElements();
		this.pEnumerationDefinitionOrStub = new EnumerationDefinitionOrStubElements();
		this.pEnumerationLiteralName = new EnumerationLiteralNameElements();
		this.pEnumerationLiteralNameDefinition = new EnumerationLiteralNameDefinitionElements();
		this.pSignalDeclaration = new SignalDeclarationElements();
		this.pSignalDefinition = new SignalDefinitionElements();
		this.pSignalDefinitionOrStub = new SignalDefinitionOrStubElements();
		this.pActivityDeclaration = new ActivityDeclarationElements();
		this.pActivityDefinition = new ActivityDefinitionElements();
		this.pActivityDefinitionOrStub = new ActivityDefinitionOrStubElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pFormalParameterDefinition = new FormalParameterDefinitionElements();
		this.pReturnParameter = new ReturnParameterElements();
		this.pReturnParameterDefinition = new ReturnParameterDefinitionElements();
		this.pParameterDirection = new ParameterDirectionElements();
		this.pFeatureDefinitionOrStub = new FeatureDefinitionOrStubElements();
		this.pActiveFeatureDefinitionOrStub = new ActiveFeatureDefinitionOrStubElements();
		this.pPropertyDefinition = new PropertyDefinitionElements();
		this.pAttributeDefinition = new AttributeDefinitionElements();
		this.pAttributeInitializer = new AttributeInitializerElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
		this.pTypePart = new TypePartElements();
		this.pUnlimitedNaturalLiteral = new UnlimitedNaturalLiteralElements();
		this.pOperationDeclaration = new OperationDeclarationElements();
		this.pOperationDefinitionOrStub = new OperationDefinitionOrStubElements();
		this.pRedefinitionClause = new RedefinitionClauseElements();
		this.pReceptionDefinition = new ReceptionDefinitionElements();
		this.pSignalReceptionDeclaration = new SignalReceptionDeclarationElements();
		this.pSignalReceptionDefinitionOrStub = new SignalReceptionDefinitionOrStubElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPotentiallyAmbiguousQualifiedName = new PotentiallyAmbiguousQualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.pUnqualifiedName = new UnqualifiedNameElements();
		this.pNameBinding = new NameBindingElements();
		this.pTemplateBinding = new TemplateBindingElements();
		this.pPositionalTemplateBinding = new PositionalTemplateBindingElements();
		this.pNamedTemplateBinding = new NamedTemplateBindingElements();
		this.pTemplateParameterSubstitution = new TemplateParameterSubstitutionElements();
		this.pExpression = new ExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pUnboundedLiteralExpression = new UnboundedLiteralExpressionElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pNameExpression = new NameExpressionElements();
		this.pThisExpression = new ThisExpressionElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pBehaviorInvocationExpression = new BehaviorInvocationExpressionElements();
		this.pTuple = new TupleElements();
		this.pPositionalTupleExpressionList = new PositionalTupleExpressionListElements();
		this.pNamedTupleExpressionList = new NamedTupleExpressionListElements();
		this.pNamedExpression = new NamedExpressionElements();
		this.pSuperInvocationExpression = new SuperInvocationExpressionElements();
		this.pInstanceCreationOrSequenceConstructionExpression = new InstanceCreationOrSequenceConstructionExpressionElements();
		this.pLinkOperationExpression = new LinkOperationExpressionElements();
		this.pLinkOperation = new LinkOperationElements();
		this.pLinkOperationTuple = new LinkOperationTupleElements();
		this.pIndexedNamedTupleExpressionList = new IndexedNamedTupleExpressionListElements();
		this.pIndexedNamedExpression = new IndexedNamedExpressionElements();
		this.pClassExtentExpression = new ClassExtentExpressionElements();
		this.pSequenceConstructionExpression = new SequenceConstructionExpressionElements();
		this.pMultiplicityIndicator = new MultiplicityIndicatorElements();
		this.pSequenceElements = new SequenceElementsElements();
		this.pSequenceRange = new SequenceRangeElements();
		this.pSequenceExpressionList = new SequenceExpressionListElements();
		this.pSequenceElement = new SequenceElementElements();
		this.pSequenceInitializationExpression = new SequenceInitializationExpressionElements();
		this.pIndex = new IndexElements();
		this.pSequenceOperationOrReductionOrExpansionExpression = new SequenceOperationOrReductionOrExpansionExpressionElements();
		this.pPrefixExpression = new PrefixExpressionElements();
		this.pAffixOperator = new AffixOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPostfixOrCastExpression = new PostfixOrCastExpressionElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pNonPostfixNonCastUnaryExpression = new NonPostfixNonCastUnaryExpressionElements();
		this.pBooleanUnaryExpression = new BooleanUnaryExpressionElements();
		this.pBitStringUnaryExpression = new BitStringUnaryExpressionElements();
		this.pNumericUnaryExpression = new NumericUnaryExpressionElements();
		this.pNumericUnaryOperator = new NumericUnaryOperatorElements();
		this.pIsolationExpression = new IsolationExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pCastCompletion = new CastCompletionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pShiftOperator = new ShiftOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pClassificationOperator = new ClassificationOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pLeftHandSide = new LeftHandSideElements();
		this.pNameLeftHandSide = new NameLeftHandSideElements();
		this.pFeatureLeftHandSide = new FeatureLeftHandSideElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pStatementSequence = new StatementSequenceElements();
		this.pDocumentedStatement = new DocumentedStatementElements();
		this.pStatement = new StatementElements();
		this.pBlock = new BlockElements();
		this.pAnnotatedStatement = new AnnotatedStatementElements();
		this.pInLineStatement = new InLineStatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pEmptyStatement = new EmptyStatementElements();
		this.pLocalNameDeclarationStatement = new LocalNameDeclarationStatementElements();
		this.pInitializationExpression = new InitializationExpressionElements();
		this.pInstanceInitializationExpression = new InstanceInitializationExpressionElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pConcurrentClauses = new ConcurrentClausesElements();
		this.pNonFinalClause = new NonFinalClauseElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pSwitchClause = new SwitchClauseElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pSwitchDefaultClause = new SwitchDefaultClauseElements();
		this.pNonEmptyStatementSequence = new NonEmptyStatementSequenceElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pDoStatement = new DoStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pLoopVariableDefinition = new LoopVariableDefinitionElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pAcceptStatement = new AcceptStatementElements();
		this.pAcceptBlock = new AcceptBlockElements();
		this.pAcceptClause = new AcceptClauseElements();
		this.pClassifyStatement = new ClassifyStatementElements();
		this.pClassificationFromClause = new ClassificationFromClauseElements();
		this.pClassificationToClause = new ClassificationToClauseElements();
		this.pReclassifyAllClause = new ReclassifyAllClauseElements();
		this.pQualifiedNameList = new QualifiedNameListElements();
		this.tBOOLEAN_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.BOOLEAN_VALUE");
		this.tNATURAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.NATURAL_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.UNRESTRICTED_NAME");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.STRING");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.DOCUMENTATION_COMMENT");
		this.tSTATEMENT_ANNOTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.STATEMENT_ANNOTATION");
		this.tINLINE_STATEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.INLINE_STATEMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.alf.Alf.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrus.uml.alf.Alf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *********
	// * UNITS *
	// ********* / UnitDefinition:
	//	namespaceName=NamespaceDeclaration?
	//	^import+=ImportDeclaration*
	//	documentation+=DOCUMENTATION_COMMENT?
	//	annotation+=StereotypeAnnotation*
	//	definition=NamespaceDefinition;
	public UnitDefinitionElements getUnitDefinitionAccess() {
		return pUnitDefinition;
	}
	
	public ParserRule getUnitDefinitionRule() {
		return getUnitDefinitionAccess().getRule();
	}

	//StereotypeAnnotation:
	//	'@' stereotypeName=QualifiedName ('(' (names=QualifiedNameList | taggedValues=TaggedValueList) ')')?;
	public StereotypeAnnotationElements getStereotypeAnnotationAccess() {
		return pStereotypeAnnotation;
	}
	
	public ParserRule getStereotypeAnnotationRule() {
		return getStereotypeAnnotationAccess().getRule();
	}

	//TaggedValueList:
	//	taggedValue+=TaggedValue ("," taggedValue+=TaggedValue)*;
	public TaggedValueListElements getTaggedValueListAccess() {
		return pTaggedValueList;
	}
	
	public ParserRule getTaggedValueListRule() {
		return getTaggedValueListAccess().getRule();
	}

	//TaggedValue:
	//	name=Name '=>' (value=BOOLEAN_VALUE | operator=NumericUnaryOperator? value=NATURAL_VALUE | value='*' | value=STRING);
	public TaggedValueElements getTaggedValueAccess() {
		return pTaggedValue;
	}
	
	public ParserRule getTaggedValueRule() {
		return getTaggedValueAccess().getRule();
	}

	//NamespaceDeclaration QualifiedName:
	//	'namespace' QualifiedName ';'
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return pNamespaceDeclaration;
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//ImportDeclaration ImportReference:
	//	(PackageImportReference | ElementImportReference) ';'
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//ElementImportReference:
	//	visibility=ImportVisibilityIndicator 'import' referentName=QualifiedName ('as' alias=Name)?;
	public ElementImportReferenceElements getElementImportReferenceAccess() {
		return pElementImportReference;
	}
	
	public ParserRule getElementImportReferenceRule() {
		return getElementImportReferenceAccess().getRule();
	}

	//PackageImportReference:
	//	visibility=ImportVisibilityIndicator 'import' referentName=PackageImportQualifiedName
	//	//  ( 
	//	//    referentName = UnqualifiedName ('::' | '.') '*' |
	//	//    referentName = ColonQualifiedName '::' '*' | 
	//	//    referentName = DotQualifiedName '.' '*'
	//	//  )
	//;
	public PackageImportReferenceElements getPackageImportReferenceAccess() {
		return pPackageImportReference;
	}
	
	public ParserRule getPackageImportReferenceRule() {
		return getPackageImportReferenceAccess().getRule();
	}

	//PackageImportQualifiedName QualifiedName:
	//	nameBinding+=NameBinding (('::' nameBinding+=NameBinding)* '::' '*' | ('.' nameBinding+=NameBinding)* '.' '*')
	public PackageImportQualifiedNameElements getPackageImportQualifiedNameAccess() {
		return pPackageImportQualifiedName;
	}
	
	public ParserRule getPackageImportQualifiedNameRule() {
		return getPackageImportQualifiedNameAccess().getRule();
	}

	//ImportVisibilityIndicator:
	//	'public' | 'private';
	public ImportVisibilityIndicatorElements getImportVisibilityIndicatorAccess() {
		return pImportVisibilityIndicator;
	}
	
	public ParserRule getImportVisibilityIndicatorRule() {
		return getImportVisibilityIndicatorAccess().getRule();
	}

	/// * NAMESPACES * / NamespaceDefinition:
	//	PackageDefinition | ClassifierDefinition;
	public NamespaceDefinitionElements getNamespaceDefinitionAccess() {
		return pNamespaceDefinition;
	}
	
	public ParserRule getNamespaceDefinitionRule() {
		return getNamespaceDefinitionAccess().getRule();
	}

	//VisibilityIndicator:
	//	ImportVisibilityIndicator | 'protected';
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return pVisibilityIndicator;
	}
	
	public ParserRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}

	//// CHANGE: Separated Member into Member with a composite reference to MemberDefinition.
	/// * PACKAGES * / PackageDefinition:
	//	'package' name=Name '{' ownedMember+=PackagedElement* '}';
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//PackageDefinitionOrStub PackageDefinition:
	//	'package' name=Name (isStub?=';' | '{' ownedMember+=PackagedElement* '}')
	public PackageDefinitionOrStubElements getPackageDefinitionOrStubAccess() {
		return pPackageDefinitionOrStub;
	}
	
	public ParserRule getPackageDefinitionOrStubRule() {
		return getPackageDefinitionOrStubAccess().getRule();
	}

	//// PackageBody : 
	//// 	{PackageBody}'{' ( packagedElement += PackagedElement )* '}'
	//// ;
	//PackagedElement Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	annotation+=StereotypeAnnotation*
	//	visibility=ImportVisibilityIndicator
	//	definition=PackagedElementDefinition
	public PackagedElementElements getPackagedElementAccess() {
		return pPackagedElement;
	}
	
	public ParserRule getPackagedElementRule() {
		return getPackagedElementAccess().getRule();
	}

	//PackagedElementDefinition MemberDefinition:
	//	PackageDefinitionOrStub | ClassifierDefinitionOrStub
	public PackagedElementDefinitionElements getPackagedElementDefinitionAccess() {
		return pPackagedElementDefinition;
	}
	
	public ParserRule getPackagedElementDefinitionRule() {
		return getPackagedElementDefinitionAccess().getRule();
	}

	/// ***************
	// * CLASSIFIERS *
	// *************** / ClassifierDefinition:
	//	ClassDefinition | ActiveClassDefinition | DataTypeDefinition | EnumerationDefinition | AssociationDefinition |
	//	SignalDefinition | ActivityDefinition;
	public ClassifierDefinitionElements getClassifierDefinitionAccess() {
		return pClassifierDefinition;
	}
	
	public ParserRule getClassifierDefinitionRule() {
		return getClassifierDefinitionAccess().getRule();
	}

	//ClassifierDefinitionOrStub ClassifierDefinition:
	//	ClassDefinitionOrStub | ActiveClassDefinitionOrStub | DataTypeDefinitionOrStub | EnumerationDefinitionOrStub |
	//	AssociationDefinitionOrStub | SignalDefinitionOrStub | ActivityDefinitionOrStub
	public ClassifierDefinitionOrStubElements getClassifierDefinitionOrStubAccess() {
		return pClassifierDefinitionOrStub;
	}
	
	public ParserRule getClassifierDefinitionOrStubRule() {
		return getClassifierDefinitionOrStubAccess().getRule();
	}

	//ClassifierSignature ClassifierDefinition:
	//	name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public ClassifierSignatureElements getClassifierSignatureAccess() {
		return pClassifierSignature;
	}
	
	public ParserRule getClassifierSignatureRule() {
		return getClassifierSignatureAccess().getRule();
	}

	//ClassifierTemplateParameter Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	definition=ClassifierTemplateParameterDefinition
	public ClassifierTemplateParameterElements getClassifierTemplateParameterAccess() {
		return pClassifierTemplateParameter;
	}
	
	public ParserRule getClassifierTemplateParameterRule() {
		return getClassifierTemplateParameterAccess().getRule();
	}

	//ClassifierTemplateParameterDefinition ClassifierTemplateParameter:
	//	name=Name ('specializes' specialization=TemplateParameterConstraint)?
	public ClassifierTemplateParameterDefinitionElements getClassifierTemplateParameterDefinitionAccess() {
		return pClassifierTemplateParameterDefinition;
	}
	
	public ParserRule getClassifierTemplateParameterDefinitionRule() {
		return getClassifierTemplateParameterDefinitionAccess().getRule();
	}

	//TemplateParameterConstraint QualifiedNameList:
	//	name+=QualifiedName
	public TemplateParameterConstraintElements getTemplateParameterConstraintAccess() {
		return pTemplateParameterConstraint;
	}
	
	public ParserRule getTemplateParameterConstraintRule() {
		return getTemplateParameterConstraintAccess().getRule();
	}

	//SpecializationClause QualifiedNameList:
	//	'specializes' QualifiedNameList
	public SpecializationClauseElements getSpecializationClauseAccess() {
		return pSpecializationClause;
	}
	
	public ParserRule getSpecializationClauseRule() {
		return getSpecializationClauseAccess().getRule();
	}

	/// * CLASSES * / ClassDeclaration ClassDefinition:
	//	isAbstract?='abstract'? 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
	//	ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//ClassDefinition:
	//	ClassDeclaration
	//	'{' ownedMember+=ClassMember* '}';
	public ClassDefinitionElements getClassDefinitionAccess() {
		return pClassDefinition;
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}

	//ClassDefinitionOrStub ClassDefinition:
	//	ClassDeclaration (isStub?=';' | '{' ownedMember+=ClassMember* '}')
	public ClassDefinitionOrStubElements getClassDefinitionOrStubAccess() {
		return pClassDefinitionOrStub;
	}
	
	public ParserRule getClassDefinitionOrStubRule() {
		return getClassDefinitionOrStubAccess().getRule();
	}

	//ClassMember Member:
	//	documentation+=DOCUMENTATION_COMMENT*
	//	annotation+=StereotypeAnnotation*
	//	visibility=VisibilityIndicator?
	//	definition=ClassMemberDefinition
	public ClassMemberElements getClassMemberAccess() {
		return pClassMember;
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//ClassMemberDefinition MemberDefinition:
	//	ClassifierDefinitionOrStub | FeatureDefinitionOrStub
	public ClassMemberDefinitionElements getClassMemberDefinitionAccess() {
		return pClassMemberDefinition;
	}
	
	public ParserRule getClassMemberDefinitionRule() {
		return getClassMemberDefinitionAccess().getRule();
	}

	/// * ACTIVE CLASSES * / ActiveClassDeclaration ActiveClassDefinition:
	//	isAbstract?='abstract'? 'active' 'class' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
	//	ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public ActiveClassDeclarationElements getActiveClassDeclarationAccess() {
		return pActiveClassDeclaration;
	}
	
	public ParserRule getActiveClassDeclarationRule() {
		return getActiveClassDeclarationAccess().getRule();
	}

	//ActiveClassDefinition:
	//	ActiveClassDeclaration
	//	'{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?;
	public ActiveClassDefinitionElements getActiveClassDefinitionAccess() {
		return pActiveClassDefinition;
	}
	
	public ParserRule getActiveClassDefinitionRule() {
		return getActiveClassDefinitionAccess().getRule();
	}

	//ActiveClassDefinitionOrStub ActiveClassDefinition:
	//	ActiveClassDeclaration (isStub?=';' |
	//	'{' ownedMember+=ActiveClassMember* '}' ('do' classifierBehavior=BehaviorClause)?)
	public ActiveClassDefinitionOrStubElements getActiveClassDefinitionOrStubAccess() {
		return pActiveClassDefinitionOrStub;
	}
	
	public ParserRule getActiveClassDefinitionOrStubRule() {
		return getActiveClassDefinitionOrStubAccess().getRule();
	}

	//BehaviorClause ActivityDefinition:
	//	body=Block | name=Name
	public BehaviorClauseElements getBehaviorClauseAccess() {
		return pBehaviorClause;
	}
	
	public ParserRule getBehaviorClauseRule() {
		return getBehaviorClauseAccess().getRule();
	}

	//ActiveClassMember Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	annotation+=StereotypeAnnotation*
	//	visibility=VisibilityIndicator?
	//	definition=ActiveClassMemberDefinition
	public ActiveClassMemberElements getActiveClassMemberAccess() {
		return pActiveClassMember;
	}
	
	public ParserRule getActiveClassMemberRule() {
		return getActiveClassMemberAccess().getRule();
	}

	//ActiveClassMemberDefinition MemberDefinition:
	//	ClassMemberDefinition | ActiveFeatureDefinitionOrStub
	public ActiveClassMemberDefinitionElements getActiveClassMemberDefinitionAccess() {
		return pActiveClassMemberDefinition;
	}
	
	public ParserRule getActiveClassMemberDefinitionRule() {
		return getActiveClassMemberDefinitionAccess().getRule();
	}

	/// * DATA TYPES * / DataTypeDeclaration DataTypeDefinition:
	//	isAbstract?='abstract'? 'datatype' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
	//	ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return pDataTypeDeclaration;
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}

	//DataTypeDefinition:
	//	DataTypeDeclaration
	//	'{' ownedMember+=StructuredMember* '}';
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return pDataTypeDefinition;
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	//DataTypeDefinitionOrStub DataTypeDefinition:
	//	DataTypeDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
	public DataTypeDefinitionOrStubElements getDataTypeDefinitionOrStubAccess() {
		return pDataTypeDefinitionOrStub;
	}
	
	public ParserRule getDataTypeDefinitionOrStubRule() {
		return getDataTypeDefinitionOrStubAccess().getRule();
	}

	//StructuredMember Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	annotation+=StereotypeAnnotation*
	//	visibility='public'?
	//	definition=PropertyDefinition
	public StructuredMemberElements getStructuredMemberAccess() {
		return pStructuredMember;
	}
	
	public ParserRule getStructuredMemberRule() {
		return getStructuredMemberAccess().getRule();
	}

	/// * ASSOCIATIONS * / AssociationDeclaration AssociationDefinition:
	//	isAbstract?='abstract'? 'assoc' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
	//	ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public AssociationDeclarationElements getAssociationDeclarationAccess() {
		return pAssociationDeclaration;
	}
	
	public ParserRule getAssociationDeclarationRule() {
		return getAssociationDeclarationAccess().getRule();
	}

	//AssociationDefinition:
	//	AssociationDeclaration
	//	'{' ownedMember+=StructuredMember* '}';
	public AssociationDefinitionElements getAssociationDefinitionAccess() {
		return pAssociationDefinition;
	}
	
	public ParserRule getAssociationDefinitionRule() {
		return getAssociationDefinitionAccess().getRule();
	}

	//AssociationDefinitionOrStub AssociationDefinition:
	//	AssociationDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
	public AssociationDefinitionOrStubElements getAssociationDefinitionOrStubAccess() {
		return pAssociationDefinitionOrStub;
	}
	
	public ParserRule getAssociationDefinitionOrStubRule() {
		return getAssociationDefinitionOrStubAccess().getRule();
	}

	/// * ENUMERATIONS * / EnumerationDeclaration EnumerationDefinition:
	//	'enum' name=Name specialization=SpecializationClause?
	public EnumerationDeclarationElements getEnumerationDeclarationAccess() {
		return pEnumerationDeclaration;
	}
	
	public ParserRule getEnumerationDeclarationRule() {
		return getEnumerationDeclarationAccess().getRule();
	}

	//EnumerationDefinition:
	//	EnumerationDeclaration
	//	'{' (ownedMember+=EnumerationLiteralName (',' ownedMember+=EnumerationLiteralName)*)? '}';
	public EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return pEnumerationDefinition;
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	//EnumerationDefinitionOrStub EnumerationDefinition:
	//	EnumerationDeclaration (isStub?=';' | '{' (ownedMember+=EnumerationLiteralName (','
	//	ownedMember+=EnumerationLiteralName)*)? '}')
	public EnumerationDefinitionOrStubElements getEnumerationDefinitionOrStubAccess() {
		return pEnumerationDefinitionOrStub;
	}
	
	public ParserRule getEnumerationDefinitionOrStubRule() {
		return getEnumerationDefinitionOrStubAccess().getRule();
	}

	//EnumerationLiteralName Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	// TODO: visibility = 'public'
	//	definition=EnumerationLiteralNameDefinition
	public EnumerationLiteralNameElements getEnumerationLiteralNameAccess() {
		return pEnumerationLiteralName;
	}
	
	public ParserRule getEnumerationLiteralNameRule() {
		return getEnumerationLiteralNameAccess().getRule();
	}

	//EnumerationLiteralNameDefinition EnumerationLiteralName:
	//	name=Name
	public EnumerationLiteralNameDefinitionElements getEnumerationLiteralNameDefinitionAccess() {
		return pEnumerationLiteralNameDefinition;
	}
	
	public ParserRule getEnumerationLiteralNameDefinitionRule() {
		return getEnumerationLiteralNameDefinitionAccess().getRule();
	}

	/// * SIGNALS * / SignalDeclaration SignalDefinition:
	//	isAbstract?='abstract'? 'signal' name=Name ('<' ownedMember+=ClassifierTemplateParameter (','
	//	ownedMember+=ClassifierTemplateParameter)* '>')?
	//	specialization=SpecializationClause?
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return pSignalDeclaration;
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//SignalDefinition:
	//	SignalDeclaration
	//	'{' ownedMember+=StructuredMember* '}';
	public SignalDefinitionElements getSignalDefinitionAccess() {
		return pSignalDefinition;
	}
	
	public ParserRule getSignalDefinitionRule() {
		return getSignalDefinitionAccess().getRule();
	}

	//SignalDefinitionOrStub SignalDefinition:
	//	SignalDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
	public SignalDefinitionOrStubElements getSignalDefinitionOrStubAccess() {
		return pSignalDefinitionOrStub;
	}
	
	public ParserRule getSignalDefinitionOrStubRule() {
		return getSignalDefinitionOrStubAccess().getRule();
	}

	/// * ACTIVITIES * / ActivityDeclaration ActivityDefinition:
	//	'activity' name=Name ('<' ownedMember+=ClassifierTemplateParameter (',' ownedMember+=ClassifierTemplateParameter)*
	//	'>')?
	//	'(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')'
	//	ownedMember+=ReturnParameter?
	public ActivityDeclarationElements getActivityDeclarationAccess() {
		return pActivityDeclaration;
	}
	
	public ParserRule getActivityDeclarationRule() {
		return getActivityDeclarationAccess().getRule();
	}

	//ActivityDefinition:
	//	ActivityDeclaration
	//	body=Block;
	public ActivityDefinitionElements getActivityDefinitionAccess() {
		return pActivityDefinition;
	}
	
	public ParserRule getActivityDefinitionRule() {
		return getActivityDefinitionAccess().getRule();
	}

	//ActivityDefinitionOrStub ActivityDefinition:
	//	ActivityDeclaration (isStub?=';' | body=Block)
	public ActivityDefinitionOrStubElements getActivityDefinitionOrStubAccess() {
		return pActivityDefinitionOrStub;
	}
	
	public ParserRule getActivityDefinitionOrStubRule() {
		return getActivityDefinitionOrStubAccess().getRule();
	}

	//FormalParameter Member:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	annotation+=StereotypeAnnotation*
	//	definition=FormalParameterDefinition
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//FormalParameterDefinition NonReturnParameter:
	//	direction=ParameterDirection name=Name ':'
	//	// CHANGE: Made TypedElementDefinition a composite part of FormalParameter, rather than the supertype
	//	typePart=TypePart
	public FormalParameterDefinitionElements getFormalParameterDefinitionAccess() {
		return pFormalParameterDefinition;
	}
	
	public ParserRule getFormalParameterDefinitionRule() {
		return getFormalParameterDefinitionAccess().getRule();
	}

	//ReturnParameter Member:
	//	definition=ReturnParameterDefinition
	public ReturnParameterElements getReturnParameterAccess() {
		return pReturnParameter;
	}
	
	public ParserRule getReturnParameterRule() {
		return getReturnParameterAccess().getRule();
	}

	//ReturnParameterDefinition ReturnParameter: // CHANGE: Added the NonReturnParameter subtype of FormalParameter to accomodate Xtext serialization.
	//	':' typePart=TypePart
	public ReturnParameterDefinitionElements getReturnParameterDefinitionAccess() {
		return pReturnParameterDefinition;
	}
	
	public ParserRule getReturnParameterDefinitionRule() {
		return getReturnParameterDefinitionAccess().getRule();
	}

	//ParameterDirection:
	//	'in' | 'out' | 'inout';
	public ParameterDirectionElements getParameterDirectionAccess() {
		return pParameterDirection;
	}
	
	public ParserRule getParameterDirectionRule() {
		return getParameterDirectionAccess().getRule();
	}

	/// * FEATURES * / FeatureDefinitionOrStub MemberDefinition:
	//	AttributeDefinition | OperationDefinitionOrStub
	public FeatureDefinitionOrStubElements getFeatureDefinitionOrStubAccess() {
		return pFeatureDefinitionOrStub;
	}
	
	public ParserRule getFeatureDefinitionOrStubRule() {
		return getFeatureDefinitionOrStubAccess().getRule();
	}

	//ActiveFeatureDefinitionOrStub MemberDefinition:
	//	ReceptionDefinition | SignalReceptionDefinitionOrStub
	public ActiveFeatureDefinitionOrStubElements getActiveFeatureDefinitionOrStubAccess() {
		return pActiveFeatureDefinitionOrStub;
	}
	
	public ParserRule getActiveFeatureDefinitionOrStubRule() {
		return getActiveFeatureDefinitionOrStubAccess().getRule();
	}

	/// * PROPERTIES * / PropertyDefinition:
	//	PropertyDeclaration ';';
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return pPropertyDefinition;
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//AttributeDefinition PropertyDefinition:
	//	PropertyDeclaration initializer=AttributeInitializer? ';'
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return pAttributeDefinition;
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	//AttributeInitializer Expression:
	//	'=' InitializationExpression
	public AttributeInitializerElements getAttributeInitializerAccess() {
		return pAttributeInitializer;
	}
	
	public ParserRule getAttributeInitializerRule() {
		return getAttributeInitializerAccess().getRule();
	}

	//PropertyDeclaration PropertyDefinition:
	//	name=Name ':' isComposite?='compose'?
	//	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
	//	typePart=TypePart
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//TypePart TypedElementDefinition:
	//	(isAny?='any' | typeName=QualifiedName) (('[' (isMultiplicity?=']' | (lowerBound=NATURAL_VALUE '..')?
	//	upperBound=UnlimitedNaturalLiteral ']'))? (isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique'
	//	isOrdered?='ordered'? | isSequence?='sequence')?)?
	public TypePartElements getTypePartAccess() {
		return pTypePart;
	}
	
	public ParserRule getTypePartRule() {
		return getTypePartAccess().getRule();
	}

	/// *
	//TypeName returns QualifiedName :
	//	'any' | QualifiedName
	//;
	// * / UnlimitedNaturalLiteral:
	//	NATURAL_VALUE | '*';
	public UnlimitedNaturalLiteralElements getUnlimitedNaturalLiteralAccess() {
		return pUnlimitedNaturalLiteral;
	}
	
	public ParserRule getUnlimitedNaturalLiteralRule() {
		return getUnlimitedNaturalLiteralAccess().getRule();
	}

	/// * OPERATIONS * / OperationDeclaration OperationDefinition:
	//	isAbstract?='abstract'? name=Name
	//	'(' (ownedMember+=FormalParameter (',' ownedMember+=FormalParameter)*)? ')'
	//	ownedMember+=ReturnParameter?
	//	redefinition=RedefinitionClause?
	public OperationDeclarationElements getOperationDeclarationAccess() {
		return pOperationDeclaration;
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationDefinitionOrStub OperationDefinition:
	//	OperationDeclaration (isStub?=';' | body=Block)
	public OperationDefinitionOrStubElements getOperationDefinitionOrStubAccess() {
		return pOperationDefinitionOrStub;
	}
	
	public ParserRule getOperationDefinitionOrStubRule() {
		return getOperationDefinitionOrStubAccess().getRule();
	}

	//RedefinitionClause QualifiedNameList:
	//	'redefines' QualifiedNameList
	public RedefinitionClauseElements getRedefinitionClauseAccess() {
		return pRedefinitionClause;
	}
	
	public ParserRule getRedefinitionClauseRule() {
		return getRedefinitionClauseAccess().getRule();
	}

	/// * RECEPTIONS * / ReceptionDefinition:
	//	'receive' signalName=QualifiedName ';'
	//	// TODO: name = signal.nameBinding->last().name
	//;
	public ReceptionDefinitionElements getReceptionDefinitionAccess() {
		return pReceptionDefinition;
	}
	
	public ParserRule getReceptionDefinitionRule() {
		return getReceptionDefinitionAccess().getRule();
	}

	//SignalReceptionDeclaration SignalReceptionDefinition:
	//	'receive' 'signal' name=Name specialization=SpecializationClause?
	public SignalReceptionDeclarationElements getSignalReceptionDeclarationAccess() {
		return pSignalReceptionDeclaration;
	}
	
	public ParserRule getSignalReceptionDeclarationRule() {
		return getSignalReceptionDeclarationAccess().getRule();
	}

	//SignalReceptionDefinitionOrStub SignalReceptionDefinition:
	//	SignalReceptionDeclaration (isStub?=';' | '{' ownedMember+=StructuredMember* '}')
	public SignalReceptionDefinitionOrStubElements getSignalReceptionDefinitionOrStubAccess() {
		return pSignalReceptionDefinitionOrStub;
	}
	
	public ParserRule getSignalReceptionDefinitionOrStubRule() {
		return getSignalReceptionDefinitionOrStubAccess().getRule();
	}

	/// ***************
	// * NAMES        *
	// *************** / Name:
	//	ID | UNRESTRICTED_NAME;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//QualifiedName:
	//	UnqualifiedName (('::' nameBinding+=NameBinding)+ | ('.' nameBinding+=NameBinding)+)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//PotentiallyAmbiguousQualifiedName QualifiedName:
	//	UnqualifiedName (('::' nameBinding+=NameBinding)+ | isAmbiguous?='.' nameBinding+=NameBinding ('.'
	//	nameBinding+=NameBinding)*)?
	public PotentiallyAmbiguousQualifiedNameElements getPotentiallyAmbiguousQualifiedNameAccess() {
		return pPotentiallyAmbiguousQualifiedName;
	}
	
	public ParserRule getPotentiallyAmbiguousQualifiedNameRule() {
		return getPotentiallyAmbiguousQualifiedNameAccess().getRule();
	}

	//ColonQualifiedName QualifiedName:
	//	UnqualifiedName ('::' nameBinding+=NameBinding)+
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}

	//DotQualifiedName QualifiedName:
	//	UnqualifiedName ('.' nameBinding+=NameBinding)+
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}

	//UnqualifiedName QualifiedName:
	//	nameBinding+=NameBinding
	public UnqualifiedNameElements getUnqualifiedNameAccess() {
		return pUnqualifiedName;
	}
	
	public ParserRule getUnqualifiedNameRule() {
		return getUnqualifiedNameAccess().getRule();
	}

	//NameBinding:
	//	name=Name binding=TemplateBinding?;
	public NameBindingElements getNameBindingAccess() {
		return pNameBinding;
	}
	
	public ParserRule getNameBindingRule() {
		return getNameBindingAccess().getRule();
	}

	/// *
	//QualifiedNameWithoutBinding :
	//	// unqualified = UnqualifiedName (nameCompletion = (ColonQualifiedNameCompletion | DotQualifiedNameCompletion))?
	//	unqualified = Name (nameCompletion = (ColonQualifiedNameCompletionWithoutBinding))?
	//;
	// * / / *
	//ColonQualifiedNameCompletionWithoutBinding : 
	//	( '::' names+=Name)+
	//;
	// * / / * Unbounded lookahead required here * / TemplateBinding:
	//	'<' (NamedTemplateBinding | PositionalTemplateBinding) '>';
	public TemplateBindingElements getTemplateBindingAccess() {
		return pTemplateBinding;
	}
	
	public ParserRule getTemplateBindingRule() {
		return getTemplateBindingAccess().getRule();
	}

	//PositionalTemplateBinding:
	//	argumentName+=QualifiedName (',' argumentName+=QualifiedName)*;
	public PositionalTemplateBindingElements getPositionalTemplateBindingAccess() {
		return pPositionalTemplateBinding;
	}
	
	public ParserRule getPositionalTemplateBindingRule() {
		return getPositionalTemplateBindingAccess().getRule();
	}

	//NamedTemplateBinding:
	//	substitution+=TemplateParameterSubstitution (',' substitution+=TemplateParameterSubstitution)*;
	public NamedTemplateBindingElements getNamedTemplateBindingAccess() {
		return pNamedTemplateBinding;
	}
	
	public ParserRule getNamedTemplateBindingRule() {
		return getNamedTemplateBindingAccess().getRule();
	}

	//TemplateParameterSubstitution:
	//	parameterName=Name "=>" argumentName=QualifiedName;
	public TemplateParameterSubstitutionElements getTemplateParameterSubstitutionAccess() {
		return pTemplateParameterSubstitution;
	}
	
	public ParserRule getTemplateParameterSubstitutionRule() {
		return getTemplateParameterSubstitutionAccess().getRule();
	}

	/// ***************
	// * EXPRESSIONS *
	// *************** / Expression:
	//	AssignmentExpression | ConditionalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// * PRIMARY EXPRESSIONS * / PrimaryExpression Expression:
	//	BaseExpression ({FeatureReference.expression=current} '.' nameBinding=NameBinding
	//	{FeatureInvocationExpression.target=current} tuple=Tuple | {FeatureReference.expression=current} '.'
	//	nameBinding=NameBinding {PropertyAccessExpression.featureReference=current} |
	//	{ExtentOrExpression.nonNameExpression=current} '->' ({SequenceOperationExpression.primary=current}
	//	operation=QualifiedName tuple=Tuple
	//	| {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
	//	// CHANGE: Made SequenceExpansionExpression concrete.
	//	| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')') |
	//	{SequenceAccessExpression.primary=current} index=Index)*
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////NonNamePrimaryExpression returns Expression :
	////  NonNameBaseExpression |
	////  BaseExpression
	////  // CHANGE: Made FeatureReference and ExtentOrExpression subtypes of Expression.
	////  ( {FeatureReference.expression = current} '.' nameBinding = NameBinding {FeatureInvocationExpression.target = current} tuple = Tuple |
	////    {FeatureReference.expression = current} '.' nameBinding = NameBinding {PropertyAccessExpression.featureReference = current} | 
	////    {ExtentOrExpression.nonNameExpression = current} '->' 
	////      ( {SequenceOperationExpression.primary = current} operation = QualifiedName tuple = Tuple
	////      | {SequenceReductionExpression.primary = current} 'reduce' ( isOrdered ?= 'ordered' )? behaviorName = QualifiedName 
	////      // CHANGE: Made SequenceExpansionExpression concrete.
	////      | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
	////      ) | 
	////    {SequenceAccessExpression.primary = current} index = Index
	////  )+
	////;
	//BaseExpression Expression:
	//	LiteralExpression | ThisExpression | SuperInvocationExpression | InstanceCreationOrSequenceConstructionExpression |
	//	ClassExtentExpression | LinkOperationExpression | SequenceConstructionExpression |
	//	SequenceOperationOrReductionOrExpansionExpression | BehaviorInvocationExpression | NameExpression |
	//	ParenthesizedExpression
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}

	/// * LITERAL EXPRESSIONS * / LiteralExpression:
	//	BooleanLiteralExpression | NaturalLiteralExpression | UnboundedLiteralExpression | StringLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//BooleanLiteralExpression:
	//	image=BOOLEAN_VALUE;
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}

	//NaturalLiteralExpression:
	//	image=NATURAL_VALUE;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}

	//UnboundedLiteralExpression:
	//	{UnboundedLiteralExpression} '*';
	public UnboundedLiteralExpressionElements getUnboundedLiteralExpressionAccess() {
		return pUnboundedLiteralExpression;
	}
	
	public ParserRule getUnboundedLiteralExpressionRule() {
		return getUnboundedLiteralExpressionAccess().getRule();
	}

	//StringLiteralExpression:
	//	image=STRING;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}

	/// * Name EXPRESSIONS * / NameExpression:
	//	name=PotentiallyAmbiguousQualifiedName;
	public NameExpressionElements getNameExpressionAccess() {
		return pNameExpression;
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}

	/// * THIS EXPRESSIONS * / ThisExpression Expression:
	//	{FeatureInvocationExpression} 'this' tuple=Tuple | {ThisExpression} 'this'
	public ThisExpressionElements getThisExpressionAccess() {
		return pThisExpression;
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}

	/// * PARENTHESIZED EXPRESSIONS * / ParenthesizedExpression Expression:
	//	'(' Expression ')'
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	/// * PROPERTY ACCESS EXPRESSIONS * / //FeatureReference :
	////  expression = PrimaryExpression // '.' nameBinding = NameBinding
	////;
	////FeatureTargetExpression returns Expression :
	////  NonNamePrimaryExpression | NameTargetExpression
	////;
	////
	////NameTargetExpression returns NameExpression :
	////  name = ColonQualifiedName
	////;
	/// * INVOCATION EXPRESSIONS * / BehaviorInvocationExpression:
	//	target=PotentiallyAmbiguousQualifiedName tuple=Tuple;
	public BehaviorInvocationExpressionElements getBehaviorInvocationExpressionAccess() {
		return pBehaviorInvocationExpression;
	}
	
	public ParserRule getBehaviorInvocationExpressionRule() {
		return getBehaviorInvocationExpressionAccess().getRule();
	}

	//Tuple:
	/// * {Tuple}'(' ( namedTupleExpressionList = NamedTupleExpressionList | ( positionalTupleExpressionList = PositionalTupleExpressionList )? ) ')' * /
	//	'(' (NamedTupleExpressionList | PositionalTupleExpressionList) ')';
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PositionalTupleExpressionList PositionalTuple:
	//	{PositionalTuple} (expression+=Expression (',' expression+=Expression)*)?
	public PositionalTupleExpressionListElements getPositionalTupleExpressionListAccess() {
		return pPositionalTupleExpressionList;
	}
	
	public ParserRule getPositionalTupleExpressionListRule() {
		return getPositionalTupleExpressionListAccess().getRule();
	}

	//NamedTupleExpressionList NamedTuple:
	//	namedExpression+=NamedExpression (',' namedExpression+=NamedExpression)*
	public NamedTupleExpressionListElements getNamedTupleExpressionListAccess() {
		return pNamedTupleExpressionList;
	}
	
	public ParserRule getNamedTupleExpressionListRule() {
		return getNamedTupleExpressionListAccess().getRule();
	}

	//NamedExpression:
	//	name=Name '=>' expression=Expression;
	public NamedExpressionElements getNamedExpressionAccess() {
		return pNamedExpression;
	}
	
	public ParserRule getNamedExpressionRule() {
		return getNamedExpressionAccess().getRule();
	}

	//SuperInvocationExpression:
	//	'super' ('.' target=QualifiedName)? tuple=Tuple;
	public SuperInvocationExpressionElements getSuperInvocationExpressionAccess() {
		return pSuperInvocationExpression;
	}
	
	public ParserRule getSuperInvocationExpressionRule() {
		return getSuperInvocationExpressionAccess().getRule();
	}

	/// * INSTANCE CREATION EXPRESSIONS * / InstanceCreationOrSequenceConstructionExpression Expression:
	//	'new' ({SequenceConstructionExpression} typeName=QualifiedName hasMultiplicity?=MultiplicityIndicator? '{'
	//	elements=SequenceElements? '}' | {InstanceCreationExpression} constructor=QualifiedName tuple=Tuple)
	public InstanceCreationOrSequenceConstructionExpressionElements getInstanceCreationOrSequenceConstructionExpressionAccess() {
		return pInstanceCreationOrSequenceConstructionExpression;
	}
	
	public ParserRule getInstanceCreationOrSequenceConstructionExpressionRule() {
		return getInstanceCreationOrSequenceConstructionExpressionAccess().getRule();
	}

	/// * LINK OPERATION EXPRESSIONS * / LinkOperationExpression:
	//	associationName=PotentiallyAmbiguousQualifiedName '.' operation=LinkOperation tuple=LinkOperationTuple;
	public LinkOperationExpressionElements getLinkOperationExpressionAccess() {
		return pLinkOperationExpression;
	}
	
	public ParserRule getLinkOperationExpressionRule() {
		return getLinkOperationExpressionAccess().getRule();
	}

	//LinkOperation:
	//	'createLink' | 'destroyLink' | 'clearAssoc';
	public LinkOperationElements getLinkOperationAccess() {
		return pLinkOperation;
	}
	
	public ParserRule getLinkOperationRule() {
		return getLinkOperationAccess().getRule();
	}

	//LinkOperationTuple Tuple:
	//	'(' (IndexedNamedTupleExpressionList | PositionalTupleExpressionList) ')'
	public LinkOperationTupleElements getLinkOperationTupleAccess() {
		return pLinkOperationTuple;
	}
	
	public ParserRule getLinkOperationTupleRule() {
		return getLinkOperationTupleAccess().getRule();
	}

	//IndexedNamedTupleExpressionList NamedTuple:
	//	namedExpression+=IndexedNamedExpression (',' namedExpression+=IndexedNamedExpression)*
	public IndexedNamedTupleExpressionListElements getIndexedNamedTupleExpressionListAccess() {
		return pIndexedNamedTupleExpressionList;
	}
	
	public ParserRule getIndexedNamedTupleExpressionListRule() {
		return getIndexedNamedTupleExpressionListAccess().getRule();
	}

	//IndexedNamedExpression NamedExpression:
	//	name=Name index=Index? '=>' expression=Expression
	public IndexedNamedExpressionElements getIndexedNamedExpressionAccess() {
		return pIndexedNamedExpression;
	}
	
	public ParserRule getIndexedNamedExpressionRule() {
		return getIndexedNamedExpressionAccess().getRule();
	}

	/// * CLASS EXTENT EXPRESSIONS * / ClassExtentExpression:
	//	className=PotentiallyAmbiguousQualifiedName '.' 'allInstances' '(' ')';
	public ClassExtentExpressionElements getClassExtentExpressionAccess() {
		return pClassExtentExpression;
	}
	
	public ParserRule getClassExtentExpressionRule() {
		return getClassExtentExpressionAccess().getRule();
	}

	/// * SEQUENCE CONSTRUCTION EXPRESSIONS * / SequenceConstructionExpression:
	//	(isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? '{' elements=SequenceElements? '}' |
	//	hasMultiplicity?='null';
	public SequenceConstructionExpressionElements getSequenceConstructionExpressionAccess() {
		return pSequenceConstructionExpression;
	}
	
	public ParserRule getSequenceConstructionExpressionRule() {
		return getSequenceConstructionExpressionAccess().getRule();
	}

	//MultiplicityIndicator:
	//	'[' ']';
	public MultiplicityIndicatorElements getMultiplicityIndicatorAccess() {
		return pMultiplicityIndicator;
	}
	
	public ParserRule getMultiplicityIndicatorRule() {
		return getMultiplicityIndicatorAccess().getRule();
	}

	//SequenceElements:
	//	SequenceRange | SequenceExpressionList;
	public SequenceElementsElements getSequenceElementsAccess() {
		return pSequenceElements;
	}
	
	public ParserRule getSequenceElementsRule() {
		return getSequenceElementsAccess().getRule();
	}

	//SequenceRange:
	//	rangeLower=Expression '..' rangeUpper=Expression;
	public SequenceRangeElements getSequenceRangeAccess() {
		return pSequenceRange;
	}
	
	public ParserRule getSequenceRangeRule() {
		return getSequenceRangeAccess().getRule();
	}

	//SequenceExpressionList:
	//	element+=SequenceElement (',' element+=SequenceElement)* ','?;
	public SequenceExpressionListElements getSequenceExpressionListAccess() {
		return pSequenceExpressionList;
	}
	
	public ParserRule getSequenceExpressionListRule() {
		return getSequenceExpressionListAccess().getRule();
	}

	//SequenceElement Expression:
	//	Expression | SequenceInitializationExpression
	public SequenceElementElements getSequenceElementAccess() {
		return pSequenceElement;
	}
	
	public ParserRule getSequenceElementRule() {
		return getSequenceElementAccess().getRule();
	}

	//SequenceInitializationExpression SequenceConstructionExpression:
	//	'new'? '{' elements=SequenceElements '}'
	public SequenceInitializationExpressionElements getSequenceInitializationExpressionAccess() {
		return pSequenceInitializationExpression;
	}
	
	public ParserRule getSequenceInitializationExpressionRule() {
		return getSequenceInitializationExpressionAccess().getRule();
	}

	/// * SEQUENCE ACCESS EXPRESSIONS * / Index Expression:
	//	'[' Expression ']'
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}

	/// * SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS * / // NOTE: This only covers the case when the primary is a class extent shorthand.
	//SequenceOperationOrReductionOrExpansionExpression Expression:
	//	{ExtentOrExpression} name=PotentiallyAmbiguousQualifiedName '->' ({SequenceOperationExpression.primary=current}
	//	operation=QualifiedName tuple=Tuple
	//	| {SequenceReductionExpression.primary=current} 'reduce' isOrdered?='ordered'? behaviorName=QualifiedName
	//	// CHANGE: Made SequenceExpansionExpression concrete.
	//	| {SequenceExpansionExpression.primary=current} operation=ID variable=Name '(' argument=Expression ')')
	public SequenceOperationOrReductionOrExpansionExpressionElements getSequenceOperationOrReductionOrExpansionExpressionAccess() {
		return pSequenceOperationOrReductionOrExpansionExpression;
	}
	
	public ParserRule getSequenceOperationOrReductionOrExpansionExpressionRule() {
		return getSequenceOperationOrReductionOrExpansionExpressionAccess().getRule();
	}

	/// * INCREMENT OR DECREMENT EXPRESSIONS * / PrefixExpression IncrementOrDecrementExpression:
	//	operator=AffixOperator operand=LeftHandSide
	public PrefixExpressionElements getPrefixExpressionAccess() {
		return pPrefixExpression;
	}
	
	public ParserRule getPrefixExpressionRule() {
		return getPrefixExpressionAccess().getRule();
	}

	//AffixOperator:
	//	'++' | '--';
	public AffixOperatorElements getAffixOperatorAccess() {
		return pAffixOperator;
	}
	
	public ParserRule getAffixOperatorRule() {
		return getAffixOperatorAccess().getRule();
	}

	/// * UNARY EXPRESSIONS * / UnaryExpression Expression:
	//	PostfixOrCastExpression | NonPostfixNonCastUnaryExpression
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PostfixOrCastExpression Expression:
	//	PostfixExpression | CastExpression | PrimaryExpression
	public PostfixOrCastExpressionElements getPostfixOrCastExpressionAccess() {
		return pPostfixOrCastExpression;
	}
	
	public ParserRule getPostfixOrCastExpressionRule() {
		return getPostfixOrCastExpressionAccess().getRule();
	}

	//PostfixExpression IncrementOrDecrementExpression:
	//	operand=LeftHandSide operator=AffixOperator
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//NonPostfixNonCastUnaryExpression Expression:
	//	PrefixExpression | NumericUnaryExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
	public NonPostfixNonCastUnaryExpressionElements getNonPostfixNonCastUnaryExpressionAccess() {
		return pNonPostfixNonCastUnaryExpression;
	}
	
	public ParserRule getNonPostfixNonCastUnaryExpressionRule() {
		return getNonPostfixNonCastUnaryExpressionAccess().getRule();
	}

	//BooleanUnaryExpression:
	//	operator='!' operand=UnaryExpression;
	public BooleanUnaryExpressionElements getBooleanUnaryExpressionAccess() {
		return pBooleanUnaryExpression;
	}
	
	public ParserRule getBooleanUnaryExpressionRule() {
		return getBooleanUnaryExpressionAccess().getRule();
	}

	//BitStringUnaryExpression:
	//	operator='~' operand=UnaryExpression;
	public BitStringUnaryExpressionElements getBitStringUnaryExpressionAccess() {
		return pBitStringUnaryExpression;
	}
	
	public ParserRule getBitStringUnaryExpressionRule() {
		return getBitStringUnaryExpressionAccess().getRule();
	}

	//NumericUnaryExpression:
	//	operator=NumericUnaryOperator operand=UnaryExpression;
	public NumericUnaryExpressionElements getNumericUnaryExpressionAccess() {
		return pNumericUnaryExpression;
	}
	
	public ParserRule getNumericUnaryExpressionRule() {
		return getNumericUnaryExpressionAccess().getRule();
	}

	//NumericUnaryOperator:
	//	'+' | '-';
	public NumericUnaryOperatorElements getNumericUnaryOperatorAccess() {
		return pNumericUnaryOperator;
	}
	
	public ParserRule getNumericUnaryOperatorRule() {
		return getNumericUnaryOperatorAccess().getRule();
	}

	//IsolationExpression:
	//	operator='$' operand=UnaryExpression;
	public IsolationExpressionElements getIsolationExpressionAccess() {
		return pIsolationExpression;
	}
	
	public ParserRule getIsolationExpressionRule() {
		return getIsolationExpressionAccess().getRule();
	}

	//CastExpression: // CHANGE: Added isAny attribute to CastExpression in order to allow Xtext serialization.
	//	'(' (isAny?='any' | typeName=QualifiedName) ')' operand=CastCompletion;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}

	//CastCompletion Expression:
	//	PostfixOrCastExpression | BooleanUnaryExpression | BitStringUnaryExpression | IsolationExpression
	public CastCompletionElements getCastCompletionAccess() {
		return pCastCompletion;
	}
	
	public ParserRule getCastCompletionRule() {
		return getCastCompletionAccess().getRule();
	}

	/// * ARITHMETIC EXPRESSIONS * / MultiplicativeExpression Expression:
	//	UnaryExpression ({ArithmeticExpression.operand1=current} operator=MultiplicativeOperator operand2=UnaryExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeOperator:
	//	'*' | '/' | '%';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({ArithmeticExpression.operand1=current} operator=AdditiveOperator
	//	operand2=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveOperator:
	//	'+' | '-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	/// * SHIFT EXPRESSIONS * / ShiftExpression Expression:
	//	AdditiveExpression ({ShiftExpression.operand1=current} operator=ShiftOperator operand2=AdditiveExpression)*
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//ShiftOperator:
	//	'<<' | '>>' | '>>>';
	public ShiftOperatorElements getShiftOperatorAccess() {
		return pShiftOperator;
	}
	
	public ParserRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	/// * RELATIONAL EXPRESSIONS * / RelationalExpression Expression:
	//	ShiftExpression ({RelationalExpression.operand1=current} operator=RelationalOperator operand2=ShiftExpression)?
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalOperator:
	//	'<' | '>' | '<=' | '>=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	/// * CLASSIFICATION EXPRESSIONS * / ClassificationExpression Expression:
	//	RelationalExpression ({ClassificationExpression.operand=current} operator=ClassificationOperator
	//	typeName=QualifiedName)?
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}

	//ClassificationOperator:
	//	'instanceof' | 'hastype';
	public ClassificationOperatorElements getClassificationOperatorAccess() {
		return pClassificationOperator;
	}
	
	public ParserRule getClassificationOperatorRule() {
		return getClassificationOperatorAccess().getRule();
	}

	/// * EQUALITY EXPRESSIONS * / EqualityExpression Expression:
	//	ClassificationExpression ({EqualityExpression.operand1=current} operator=EqualityOperator
	//	operand2=ClassificationExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityOperator:
	//	'==' | '!=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	/// * LOGICAL EXPRESSIONS * / AndExpression Expression:
	//	EqualityExpression ({LogicalExpression.operand1=current} operator='&' operand2=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//ExclusiveOrExpression Expression:
	//	AndExpression ({LogicalExpression.operand1=current} operator='^' operand2=AndExpression)*
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}

	//InclusiveOrExpression Expression:
	//	ExclusiveOrExpression ({LogicalExpression.operand1=current} operator='|' operand2=ExclusiveOrExpression)*
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}

	/// * CONDITIONAL LOGICAL EXPRESSIONS * / ConditionalAndExpression Expression:
	//	InclusiveOrExpression ({ConditionalLogicalExpression.operand1=current} operator='&&' operand2=InclusiveOrExpression)*
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//ConditionalOrExpression Expression:
	//	ConditionalAndExpression ({ConditionalLogicalExpression.operand1=current} operator='||'
	//	operand2=ConditionalAndExpression)*
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	/// * CONDITIONAL-TEST EXPRESSIONS * / ConditionalExpression Expression:
	//	ConditionalOrExpression ({ConditionalTestExpression.operand1=current}
	//	'?' operand2=Expression ':' operand3=ConditionalExpression)?
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	/// * ASSIGNMENT EXPRESSIONS * / AssignmentExpression:
	//	leftHandSide=LeftHandSide operator=AssignmentOperator rightHandSide=Expression;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//LeftHandSide:
	//	NameLeftHandSide | FeatureLeftHandSide // ( index = Index )? |
	//	//  "(" LeftHandSide ")"
	//;
	public LeftHandSideElements getLeftHandSideAccess() {
		return pLeftHandSide;
	}
	
	public ParserRule getLeftHandSideRule() {
		return getLeftHandSideAccess().getRule();
	}

	//NameLeftHandSide:
	//	target=PotentiallyAmbiguousQualifiedName index=Index?;
	public NameLeftHandSideElements getNameLeftHandSideAccess() {
		return pNameLeftHandSide;
	}
	
	public ParserRule getNameLeftHandSideRule() {
		return getNameLeftHandSideAccess().getRule();
	}

	//FeatureLeftHandSide:
	//	expression=PrimaryExpression;
	public FeatureLeftHandSideElements getFeatureLeftHandSideAccess() {
		return pFeatureLeftHandSide;
	}
	
	public ParserRule getFeatureLeftHandSideRule() {
		return getFeatureLeftHandSideAccess().getRule();
	}

	//AssignmentOperator:
	//	'=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>=';
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	/// **************
	// * STATEMENTS *
	// ************** / StatementSequence Block:
	//	{Block} statement+=DocumentedStatement*
	public StatementSequenceElements getStatementSequenceAccess() {
		return pStatementSequence;
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}

	//DocumentedStatement AnnotatedStatement:
	//	AnnotatedStatement
	public DocumentedStatementElements getDocumentedStatementAccess() {
		return pDocumentedStatement;
	}
	
	public ParserRule getDocumentedStatementRule() {
		return getDocumentedStatementAccess().getRule();
	}

	//Statement:
	//	InLineStatement | BlockStatement | EmptyStatement | LocalNameDeclarationStatement | ExpressionStatement | IfStatement
	//	| SwitchStatement | WhileStatement | ForStatement | DoStatement | BreakStatement | ReturnStatement | AcceptStatement
	//	| ClassifyStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	/// * BLOCK * / Block:
	//	{Block} '{' statement+=DocumentedStatement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	/// * ANNOTATED STATEMENTS * / AnnotatedStatement:
	//	documentation+=DOCUMENTATION_COMMENT?
	//	// CHANGE: Include text line in annotation statement.
	//	annotation+=STATEMENT_ANNOTATION*
	//	// ( '//@' annotation += Annotation ( '@' annotation += Annotation )+ '\r'? '\n' )*
	//	statement=Statement;
	public AnnotatedStatementElements getAnnotatedStatementAccess() {
		return pAnnotatedStatement;
	}
	
	public ParserRule getAnnotatedStatementRule() {
		return getAnnotatedStatementAccess().getRule();
	}

	/// *
	//Annotation : 
	//	identifier = ID ( '(' argument += Name ( ',' argument += Name )* ')' )?
	//;
	// * / / * IN-LINE STATEMENTS * / InLineStatement:
	//	code=INLINE_STATEMENT
	//	//'/ *@' 'inline' '(' language = Name ')' '* /'
	//;
	public InLineStatementElements getInLineStatementAccess() {
		return pInLineStatement;
	}
	
	public ParserRule getInLineStatementRule() {
		return getInLineStatementAccess().getRule();
	}

	/// * BLOCK STATEMENTS * / BlockStatement:
	//	block=Block;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	/// * EMPTY STATEMENTS * / EmptyStatement:
	//	{EmptyStatement}
	//	';';
	public EmptyStatementElements getEmptyStatementAccess() {
		return pEmptyStatement;
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}

	/// * LOCAL NAME DECLARATION STATEMENTS * / LocalNameDeclarationStatement:
	//	('let' name=Name ':' (isAny?='any' | typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? | (isAny?='any'
	//	| typeName=QualifiedName) hasMultiplicity?=MultiplicityIndicator? name=Name)
	//	'=' expression=InitializationExpression ';';
	public LocalNameDeclarationStatementElements getLocalNameDeclarationStatementAccess() {
		return pLocalNameDeclarationStatement;
	}
	
	public ParserRule getLocalNameDeclarationStatementRule() {
		return getLocalNameDeclarationStatementAccess().getRule();
	}

	//InitializationExpression Expression:
	//	Expression
	//	| SequenceInitializationExpression
	//	| InstanceInitializationExpression
	public InitializationExpressionElements getInitializationExpressionAccess() {
		return pInitializationExpression;
	}
	
	public ParserRule getInitializationExpressionRule() {
		return getInitializationExpressionAccess().getRule();
	}

	//InstanceInitializationExpression InstanceCreationExpression:
	//	'new' tuple=Tuple
	public InstanceInitializationExpressionElements getInstanceInitializationExpressionAccess() {
		return pInstanceInitializationExpression;
	}
	
	public ParserRule getInstanceInitializationExpressionRule() {
		return getInstanceInitializationExpressionAccess().getRule();
	}

	/// * EXPRESSION STATEMENTS * / ExpressionStatement:
	//	expression=Expression ';';
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	/// * IF STATEMENTS * / IfStatement:
	//	'if' nonFinalClauses+=ConcurrentClauses ('else' 'if' nonFinalClauses+=ConcurrentClauses)* ('else'
	//	finalClause=Block)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ConcurrentClauses:
	//	clause+=NonFinalClause ('or' 'if' clause+=NonFinalClause)*;
	public ConcurrentClausesElements getConcurrentClausesAccess() {
		return pConcurrentClauses;
	}
	
	public ParserRule getConcurrentClausesRule() {
		return getConcurrentClausesAccess().getRule();
	}

	//NonFinalClause:
	//	'(' condition=Expression ')' body=Block;
	public NonFinalClauseElements getNonFinalClauseAccess() {
		return pNonFinalClause;
	}
	
	public ParserRule getNonFinalClauseRule() {
		return getNonFinalClauseAccess().getRule();
	}

	/// * SWITCH STATEMENTS * / SwitchStatement:
	//	'switch' '(' expression=Expression ')'
	//	'{' nonDefaultClause+=SwitchClause*
	//	defaultClause=SwitchDefaultClause? '}';
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//SwitchClause:
	//	case+=SwitchCase case+=SwitchCase*
	//	block=NonEmptyStatementSequence;
	public SwitchClauseElements getSwitchClauseAccess() {
		return pSwitchClause;
	}
	
	public ParserRule getSwitchClauseRule() {
		return getSwitchClauseAccess().getRule();
	}

	//SwitchCase Expression:
	//	'case' Expression ':'
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//SwitchDefaultClause Block:
	//	'default' ':' NonEmptyStatementSequence
	public SwitchDefaultClauseElements getSwitchDefaultClauseAccess() {
		return pSwitchDefaultClause;
	}
	
	public ParserRule getSwitchDefaultClauseRule() {
		return getSwitchDefaultClauseAccess().getRule();
	}

	//NonEmptyStatementSequence Block:
	//	statement+=DocumentedStatement+
	public NonEmptyStatementSequenceElements getNonEmptyStatementSequenceAccess() {
		return pNonEmptyStatementSequence;
	}
	
	public ParserRule getNonEmptyStatementSequenceRule() {
		return getNonEmptyStatementSequenceAccess().getRule();
	}

	/// * WHILE STATEMENTS * / WhileStatement:
	//	'while' '(' condition=Expression ')' body=Block;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	/// * DO STATEMENTS * / DoStatement:
	//	'do' body=Block 'while' '(' condition=Expression ')' ';';
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}

	/// * FOR STATEMENTS * / ForStatement:
	//	'for' '(' variableDefinition+=LoopVariableDefinition (',' variableDefinition+=LoopVariableDefinition)* ')'
	//	body=Block;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//LoopVariableDefinition:
	//	variable=Name typeIsInferred?='in' expression1=Expression ('..' expression2=Expression)? | (isAny?='any' |
	//	typeName=QualifiedName) variable=Name ':' expression1=Expression;
	public LoopVariableDefinitionElements getLoopVariableDefinitionAccess() {
		return pLoopVariableDefinition;
	}
	
	public ParserRule getLoopVariableDefinitionRule() {
		return getLoopVariableDefinitionAccess().getRule();
	}

	/// * BREAK STATEMENTS * / BreakStatement:
	//	{BreakStatement}
	//	'break' ';';
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	/// * RETURN STATEMENTS * / ReturnStatement:
	//	{ReturnStatement}
	//	'return' expression=Expression? ';';
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// * ACCEPT STATEMENTS * / AcceptStatement:
	//	acceptBlock+=AcceptClause ';' | acceptBlock+=AcceptBlock ('or' acceptBlock+=AcceptBlock)*;
	public AcceptStatementElements getAcceptStatementAccess() {
		return pAcceptStatement;
	}
	
	public ParserRule getAcceptStatementRule() {
		return getAcceptStatementAccess().getRule();
	}

	//AcceptBlock:
	//	AcceptClause block=Block;
	public AcceptBlockElements getAcceptBlockAccess() {
		return pAcceptBlock;
	}
	
	public ParserRule getAcceptBlockRule() {
		return getAcceptBlockAccess().getRule();
	}

	//AcceptClause AcceptBlock:
	//	'accept' '(' (name=Name ':')? signalNames=QualifiedNameList ')'
	public AcceptClauseElements getAcceptClauseAccess() {
		return pAcceptClause;
	}
	
	public ParserRule getAcceptClauseRule() {
		return getAcceptClauseAccess().getRule();
	}

	/// * CLASSIFY STATEMENTS * / ClassifyStatement:
	//	'classify' expression=Expression (fromList=ClassificationFromClause toList=ClassificationToClause? |
	//	isReclassifyAll?=ReclassifyAllClause? toList=ClassificationToClause)
	//	';';
	public ClassifyStatementElements getClassifyStatementAccess() {
		return pClassifyStatement;
	}
	
	public ParserRule getClassifyStatementRule() {
		return getClassifyStatementAccess().getRule();
	}

	//ClassificationFromClause QualifiedNameList:
	//	'from' QualifiedNameList
	public ClassificationFromClauseElements getClassificationFromClauseAccess() {
		return pClassificationFromClause;
	}
	
	public ParserRule getClassificationFromClauseRule() {
		return getClassificationFromClauseAccess().getRule();
	}

	//ClassificationToClause QualifiedNameList:
	//	'to' QualifiedNameList
	public ClassificationToClauseElements getClassificationToClauseAccess() {
		return pClassificationToClause;
	}
	
	public ParserRule getClassificationToClauseRule() {
		return getClassificationToClauseAccess().getRule();
	}

	//ReclassifyAllClause:
	//	'from' '*';
	public ReclassifyAllClauseElements getReclassifyAllClauseAccess() {
		return pReclassifyAllClause;
	}
	
	public ParserRule getReclassifyAllClauseRule() {
		return getReclassifyAllClauseAccess().getRule();
	}

	//QualifiedNameList:
	//	name+=QualifiedName (',' name+=QualifiedName)*;
	public QualifiedNameListElements getQualifiedNameListAccess() {
		return pQualifiedNameList;
	}
	
	public ParserRule getQualifiedNameListRule() {
		return getQualifiedNameListAccess().getRule();
	}

	//terminal BOOLEAN_VALUE:
	//	'true' | 'false';
	public TerminalRule getBOOLEAN_VALUERule() {
		return tBOOLEAN_VALUE;
	} 

	//terminal NATURAL_VALUE:
	//	('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	//	'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getNATURAL_VALUERule() {
		return tNATURAL_VALUE;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal UNRESTRICTED_NAME:
	//	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal DOCUMENTATION_COMMENT:
	//	'/ **'->'* /';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	} 

	//terminal STATEMENT_ANNOTATION:
	//	'//@'->'\n'
	//	//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
	//	//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
	//;
	public TerminalRule getSTATEMENT_ANNOTATIONRule() {
		return tSTATEMENT_ANNOTATION;
	} 

	//terminal INLINE_STATEMENT:
	//	'/ *@inline(' (ID | UNRESTRICTED_NAME) ')'->'* /';
	public TerminalRule getINLINE_STATEMENTRule() {
		return tINLINE_STATEMENT;
	} 

	//terminal ML_COMMENT:
	//	'/ *' !('*' | '@')->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' (!('@' | '\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
