
import langc;

extension langc::debug;
extension langc::element;
extension langc::expr;
extension langc::name;
extension langc::type;
extension generator::filepartitioner;

private create FileName fileName() : setName( 'bug13928' ) -> this;
private cached Name var1Name()    : fileName().child( 'var1' );
private cached Name var2Name()    : fileName().child( 'var2' );
private cached Name func1Name()   : fileName().child( 'func1' );
private cached Name func2Name()   : fileName().child( 'func2' );
private cached Name struct1Name() : fileName().child( 'struct1' );
private cached Name struct2Name() : fileName().child( 'struct2' );
private cached Name field1Name()  : struct1Name().child( 'field1' );
private cached Name field2Name()  : struct1Name().child( 'field2' );

/****************************************/

create ElementList simpleVariables() :
    setName( fileName() )
 -> addElement( variable( targetStruct1(), var1Name() ) )
 -> addElement( variable( struct1Name(), var2Name() ) )
 -> addElement( targetStruct1() )
;

/****************************************/

create ElementList createVariables() :
    setName( fileName() )
 -> addElement( createVar( var1Name() ) )
 -> addElement( variable( void().ptr(), var2Name() ) )
/*  Deferred binding not yet implemented, full name context is required */
 -> addElement( variable( void().ptr(), /*( let n = new Name : n.setName(*/ fileName().child( 'var3' )/* -> n )*/ ) )
 -> addElement( variable( void().ptr(), fileName().child( 'var4' ) ) )
 -> resolveDependencies()
;

private create VariableDeclaration createVar( Name name ) :
    setElement( void().ptr() )
 -> setName( name )
;

/****************************************/

create ElementList createFunctions() :
    setName( fileName() )
 -> addElement( createFunc( func1Name() ) )
 -> addElement( function( void().ptr(), func2Name() ) )
/*  Deferred binding not yet implemented, full name context is required */
 -> addElement( function( void().ptr(), /*( let n = new Name : n.setName(*/ fileName().child( 'func3' )/* -> n )*/ ) )
 -> addElement( function( void().ptr(), fileName().child( 'func4' ) ) )
 -> resolveDependencies()
;

private create Function createFunc( Name name ) :
    setReturnType( void().ptr() )
 -> setName( name )
;

/****************************************/

create ElementList createStructs() :
    setName( fileName() )
 -> addElement( createStruct( struct1Name() ) )
 -> addElement( struct( struct2Name() ) )
/*  Deferred binding not yet implemented, full name context is required */
 -> addElement( struct( /*let n = new Name : n.setName(*/ fileName().child( 'struct3' )/* -> n*/ ) )
 -> addElement( struct( fileName().child( 'struct4' ) ) )
 -> resolveDependencies()
;

private create Struct createStruct( Name name ) :
    setName( name )
;

/****************************************/

ElementList simpleAccess() :
    let f = file( fileName() ) :
        f.addElement( targetStruct1() )
     -> f.addElement( variable( struct1Name(), var1Name() ) )
     -> f.addElement( variable( struct1Name().ptr(), var2Name() ) )
     -> f.addElement( accessFunction() )
     -> f
;

private cached Struct targetStruct1() :
    let s = struct( struct1Name() ) :
        s.addMember( int32(), field1Name() )
     -> s.addMember( int32().ptr(), field2Name() )
     -> s
;

private Function accessFunction() :
    let f = function( void(), func1Name() ) :
        f.addParameter( int32(), 'param1' )
     -> f.addStatement( var1Name().field( field1Name() ) )
     -> f.addStatement( var2Name().field( field2Name() ) )
     -> f.addStatement( f.param( 'param1' ) )
     -> f.addStatement( var1Name() )
     -> f
;
